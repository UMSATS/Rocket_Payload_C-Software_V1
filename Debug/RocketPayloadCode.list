
RocketPayloadCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007218  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  080073b8  080073b8  000173b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007630  08007630  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007630  08007630  00017630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007638  08007638  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007638  08007638  00017638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800763c  0800763c  0001763c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004158  200001e0  08007820  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004338  08007820  00024338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015836  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e37  00000000  00000000  00035a46  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001430  00000000  00000000  00038880  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012e8  00000000  00000000  00039cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003e26  00000000  00000000  0003af98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f508  00000000  00000000  0003edbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009b899  00000000  00000000  0004e2c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e9b5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d50  00000000  00000000  000e9bdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080073a0 	.word	0x080073a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	080073a0 	.word	0x080073a0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_uldivmod>:
 8000b18:	b953      	cbnz	r3, 8000b30 <__aeabi_uldivmod+0x18>
 8000b1a:	b94a      	cbnz	r2, 8000b30 <__aeabi_uldivmod+0x18>
 8000b1c:	2900      	cmp	r1, #0
 8000b1e:	bf08      	it	eq
 8000b20:	2800      	cmpeq	r0, #0
 8000b22:	bf1c      	itt	ne
 8000b24:	f04f 31ff 	movne.w	r1, #4294967295
 8000b28:	f04f 30ff 	movne.w	r0, #4294967295
 8000b2c:	f000 b972 	b.w	8000e14 <__aeabi_idiv0>
 8000b30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b38:	f000 f806 	bl	8000b48 <__udivmoddi4>
 8000b3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b44:	b004      	add	sp, #16
 8000b46:	4770      	bx	lr

08000b48 <__udivmoddi4>:
 8000b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b4c:	9e08      	ldr	r6, [sp, #32]
 8000b4e:	4604      	mov	r4, r0
 8000b50:	4688      	mov	r8, r1
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d14b      	bne.n	8000bee <__udivmoddi4+0xa6>
 8000b56:	428a      	cmp	r2, r1
 8000b58:	4615      	mov	r5, r2
 8000b5a:	d967      	bls.n	8000c2c <__udivmoddi4+0xe4>
 8000b5c:	fab2 f282 	clz	r2, r2
 8000b60:	b14a      	cbz	r2, 8000b76 <__udivmoddi4+0x2e>
 8000b62:	f1c2 0720 	rsb	r7, r2, #32
 8000b66:	fa01 f302 	lsl.w	r3, r1, r2
 8000b6a:	fa20 f707 	lsr.w	r7, r0, r7
 8000b6e:	4095      	lsls	r5, r2
 8000b70:	ea47 0803 	orr.w	r8, r7, r3
 8000b74:	4094      	lsls	r4, r2
 8000b76:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b7a:	0c23      	lsrs	r3, r4, #16
 8000b7c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b80:	fa1f fc85 	uxth.w	ip, r5
 8000b84:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b88:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b8c:	fb07 f10c 	mul.w	r1, r7, ip
 8000b90:	4299      	cmp	r1, r3
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x60>
 8000b94:	18eb      	adds	r3, r5, r3
 8000b96:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b9a:	f080 811b 	bcs.w	8000dd4 <__udivmoddi4+0x28c>
 8000b9e:	4299      	cmp	r1, r3
 8000ba0:	f240 8118 	bls.w	8000dd4 <__udivmoddi4+0x28c>
 8000ba4:	3f02      	subs	r7, #2
 8000ba6:	442b      	add	r3, r5
 8000ba8:	1a5b      	subs	r3, r3, r1
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bb0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bbc:	45a4      	cmp	ip, r4
 8000bbe:	d909      	bls.n	8000bd4 <__udivmoddi4+0x8c>
 8000bc0:	192c      	adds	r4, r5, r4
 8000bc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc6:	f080 8107 	bcs.w	8000dd8 <__udivmoddi4+0x290>
 8000bca:	45a4      	cmp	ip, r4
 8000bcc:	f240 8104 	bls.w	8000dd8 <__udivmoddi4+0x290>
 8000bd0:	3802      	subs	r0, #2
 8000bd2:	442c      	add	r4, r5
 8000bd4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bd8:	eba4 040c 	sub.w	r4, r4, ip
 8000bdc:	2700      	movs	r7, #0
 8000bde:	b11e      	cbz	r6, 8000be8 <__udivmoddi4+0xa0>
 8000be0:	40d4      	lsrs	r4, r2
 8000be2:	2300      	movs	r3, #0
 8000be4:	e9c6 4300 	strd	r4, r3, [r6]
 8000be8:	4639      	mov	r1, r7
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	428b      	cmp	r3, r1
 8000bf0:	d909      	bls.n	8000c06 <__udivmoddi4+0xbe>
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	f000 80eb 	beq.w	8000dce <__udivmoddi4+0x286>
 8000bf8:	2700      	movs	r7, #0
 8000bfa:	e9c6 0100 	strd	r0, r1, [r6]
 8000bfe:	4638      	mov	r0, r7
 8000c00:	4639      	mov	r1, r7
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	fab3 f783 	clz	r7, r3
 8000c0a:	2f00      	cmp	r7, #0
 8000c0c:	d147      	bne.n	8000c9e <__udivmoddi4+0x156>
 8000c0e:	428b      	cmp	r3, r1
 8000c10:	d302      	bcc.n	8000c18 <__udivmoddi4+0xd0>
 8000c12:	4282      	cmp	r2, r0
 8000c14:	f200 80fa 	bhi.w	8000e0c <__udivmoddi4+0x2c4>
 8000c18:	1a84      	subs	r4, r0, r2
 8000c1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c1e:	2001      	movs	r0, #1
 8000c20:	4698      	mov	r8, r3
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	d0e0      	beq.n	8000be8 <__udivmoddi4+0xa0>
 8000c26:	e9c6 4800 	strd	r4, r8, [r6]
 8000c2a:	e7dd      	b.n	8000be8 <__udivmoddi4+0xa0>
 8000c2c:	b902      	cbnz	r2, 8000c30 <__udivmoddi4+0xe8>
 8000c2e:	deff      	udf	#255	; 0xff
 8000c30:	fab2 f282 	clz	r2, r2
 8000c34:	2a00      	cmp	r2, #0
 8000c36:	f040 808f 	bne.w	8000d58 <__udivmoddi4+0x210>
 8000c3a:	1b49      	subs	r1, r1, r5
 8000c3c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c40:	fa1f f885 	uxth.w	r8, r5
 8000c44:	2701      	movs	r7, #1
 8000c46:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c54:	fb08 f10c 	mul.w	r1, r8, ip
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d907      	bls.n	8000c6c <__udivmoddi4+0x124>
 8000c5c:	18eb      	adds	r3, r5, r3
 8000c5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c62:	d202      	bcs.n	8000c6a <__udivmoddi4+0x122>
 8000c64:	4299      	cmp	r1, r3
 8000c66:	f200 80cd 	bhi.w	8000e04 <__udivmoddi4+0x2bc>
 8000c6a:	4684      	mov	ip, r0
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	b2a3      	uxth	r3, r4
 8000c70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c74:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c78:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c7c:	fb08 f800 	mul.w	r8, r8, r0
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x14c>
 8000c84:	192c      	adds	r4, r5, r4
 8000c86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x14a>
 8000c8c:	45a0      	cmp	r8, r4
 8000c8e:	f200 80b6 	bhi.w	8000dfe <__udivmoddi4+0x2b6>
 8000c92:	4618      	mov	r0, r3
 8000c94:	eba4 0408 	sub.w	r4, r4, r8
 8000c98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c9c:	e79f      	b.n	8000bde <__udivmoddi4+0x96>
 8000c9e:	f1c7 0c20 	rsb	ip, r7, #32
 8000ca2:	40bb      	lsls	r3, r7
 8000ca4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ca8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cac:	fa01 f407 	lsl.w	r4, r1, r7
 8000cb0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cb4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cb8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cbc:	4325      	orrs	r5, r4
 8000cbe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cc2:	0c2c      	lsrs	r4, r5, #16
 8000cc4:	fb08 3319 	mls	r3, r8, r9, r3
 8000cc8:	fa1f fa8e 	uxth.w	sl, lr
 8000ccc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cd0:	fb09 f40a 	mul.w	r4, r9, sl
 8000cd4:	429c      	cmp	r4, r3
 8000cd6:	fa02 f207 	lsl.w	r2, r2, r7
 8000cda:	fa00 f107 	lsl.w	r1, r0, r7
 8000cde:	d90b      	bls.n	8000cf8 <__udivmoddi4+0x1b0>
 8000ce0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ce4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ce8:	f080 8087 	bcs.w	8000dfa <__udivmoddi4+0x2b2>
 8000cec:	429c      	cmp	r4, r3
 8000cee:	f240 8084 	bls.w	8000dfa <__udivmoddi4+0x2b2>
 8000cf2:	f1a9 0902 	sub.w	r9, r9, #2
 8000cf6:	4473      	add	r3, lr
 8000cf8:	1b1b      	subs	r3, r3, r4
 8000cfa:	b2ad      	uxth	r5, r5
 8000cfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d00:	fb08 3310 	mls	r3, r8, r0, r3
 8000d04:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d08:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d0c:	45a2      	cmp	sl, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x1da>
 8000d10:	eb1e 0404 	adds.w	r4, lr, r4
 8000d14:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d18:	d26b      	bcs.n	8000df2 <__udivmoddi4+0x2aa>
 8000d1a:	45a2      	cmp	sl, r4
 8000d1c:	d969      	bls.n	8000df2 <__udivmoddi4+0x2aa>
 8000d1e:	3802      	subs	r0, #2
 8000d20:	4474      	add	r4, lr
 8000d22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d26:	fba0 8902 	umull	r8, r9, r0, r2
 8000d2a:	eba4 040a 	sub.w	r4, r4, sl
 8000d2e:	454c      	cmp	r4, r9
 8000d30:	46c2      	mov	sl, r8
 8000d32:	464b      	mov	r3, r9
 8000d34:	d354      	bcc.n	8000de0 <__udivmoddi4+0x298>
 8000d36:	d051      	beq.n	8000ddc <__udivmoddi4+0x294>
 8000d38:	2e00      	cmp	r6, #0
 8000d3a:	d069      	beq.n	8000e10 <__udivmoddi4+0x2c8>
 8000d3c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d40:	eb64 0403 	sbc.w	r4, r4, r3
 8000d44:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d48:	40fd      	lsrs	r5, r7
 8000d4a:	40fc      	lsrs	r4, r7
 8000d4c:	ea4c 0505 	orr.w	r5, ip, r5
 8000d50:	e9c6 5400 	strd	r5, r4, [r6]
 8000d54:	2700      	movs	r7, #0
 8000d56:	e747      	b.n	8000be8 <__udivmoddi4+0xa0>
 8000d58:	f1c2 0320 	rsb	r3, r2, #32
 8000d5c:	fa20 f703 	lsr.w	r7, r0, r3
 8000d60:	4095      	lsls	r5, r2
 8000d62:	fa01 f002 	lsl.w	r0, r1, r2
 8000d66:	fa21 f303 	lsr.w	r3, r1, r3
 8000d6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d6e:	4338      	orrs	r0, r7
 8000d70:	0c01      	lsrs	r1, r0, #16
 8000d72:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d76:	fa1f f885 	uxth.w	r8, r5
 8000d7a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d82:	fb07 f308 	mul.w	r3, r7, r8
 8000d86:	428b      	cmp	r3, r1
 8000d88:	fa04 f402 	lsl.w	r4, r4, r2
 8000d8c:	d907      	bls.n	8000d9e <__udivmoddi4+0x256>
 8000d8e:	1869      	adds	r1, r5, r1
 8000d90:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d94:	d22f      	bcs.n	8000df6 <__udivmoddi4+0x2ae>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d92d      	bls.n	8000df6 <__udivmoddi4+0x2ae>
 8000d9a:	3f02      	subs	r7, #2
 8000d9c:	4429      	add	r1, r5
 8000d9e:	1acb      	subs	r3, r1, r3
 8000da0:	b281      	uxth	r1, r0
 8000da2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000da6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000daa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dae:	fb00 f308 	mul.w	r3, r0, r8
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x27e>
 8000db6:	1869      	adds	r1, r5, r1
 8000db8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dbc:	d217      	bcs.n	8000dee <__udivmoddi4+0x2a6>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d915      	bls.n	8000dee <__udivmoddi4+0x2a6>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	4429      	add	r1, r5
 8000dc6:	1ac9      	subs	r1, r1, r3
 8000dc8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dcc:	e73b      	b.n	8000c46 <__udivmoddi4+0xfe>
 8000dce:	4637      	mov	r7, r6
 8000dd0:	4630      	mov	r0, r6
 8000dd2:	e709      	b.n	8000be8 <__udivmoddi4+0xa0>
 8000dd4:	4607      	mov	r7, r0
 8000dd6:	e6e7      	b.n	8000ba8 <__udivmoddi4+0x60>
 8000dd8:	4618      	mov	r0, r3
 8000dda:	e6fb      	b.n	8000bd4 <__udivmoddi4+0x8c>
 8000ddc:	4541      	cmp	r1, r8
 8000dde:	d2ab      	bcs.n	8000d38 <__udivmoddi4+0x1f0>
 8000de0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000de4:	eb69 020e 	sbc.w	r2, r9, lr
 8000de8:	3801      	subs	r0, #1
 8000dea:	4613      	mov	r3, r2
 8000dec:	e7a4      	b.n	8000d38 <__udivmoddi4+0x1f0>
 8000dee:	4660      	mov	r0, ip
 8000df0:	e7e9      	b.n	8000dc6 <__udivmoddi4+0x27e>
 8000df2:	4618      	mov	r0, r3
 8000df4:	e795      	b.n	8000d22 <__udivmoddi4+0x1da>
 8000df6:	4667      	mov	r7, ip
 8000df8:	e7d1      	b.n	8000d9e <__udivmoddi4+0x256>
 8000dfa:	4681      	mov	r9, r0
 8000dfc:	e77c      	b.n	8000cf8 <__udivmoddi4+0x1b0>
 8000dfe:	3802      	subs	r0, #2
 8000e00:	442c      	add	r4, r5
 8000e02:	e747      	b.n	8000c94 <__udivmoddi4+0x14c>
 8000e04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e08:	442b      	add	r3, r5
 8000e0a:	e72f      	b.n	8000c6c <__udivmoddi4+0x124>
 8000e0c:	4638      	mov	r0, r7
 8000e0e:	e708      	b.n	8000c22 <__udivmoddi4+0xda>
 8000e10:	4637      	mov	r7, r6
 8000e12:	e6e9      	b.n	8000be8 <__udivmoddi4+0xa0>

08000e14 <__aeabi_idiv0>:
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop

08000e18 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	4a06      	ldr	r2, [pc, #24]	; (8000e48 <vApplicationGetIdleTaskMemory+0x30>)
 8000e2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2280      	movs	r2, #128	; 0x80
 8000e34:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	200001fc 	.word	0x200001fc
 8000e48:	20000250 	.word	0x20000250

08000e4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e4c:	b5b0      	push	{r4, r5, r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e52:	f000 fc5b 	bl	800170c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e56:	f000 f823 	bl	8000ea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e5a:	f000 f94b 	bl	80010f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e5e:	f000 f929 	bl	80010b4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e62:	f000 f87d 	bl	8000f60 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000e66:	f000 f8fb 	bl	8001060 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8000e6a:	f000 f8cb 	bl	8001004 <MX_I2C3_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <main+0x4c>)
 8000e70:	1d3c      	adds	r4, r7, #4
 8000e72:	461d      	mov	r5, r3
 8000e74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f003 fb32 	bl	80044ee <osThreadCreate>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <main+0x50>)
 8000e8e:	601a      	str	r2, [r3, #0]
//	  Error_Handler();
//  }
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e90:	f003 fb26 	bl	80044e0 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <main+0x48>
 8000e96:	bf00      	nop
 8000e98:	080073c4 	.word	0x080073c4
 8000e9c:	200041ac 	.word	0x200041ac

08000ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b094      	sub	sp, #80	; 0x50
 8000ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea6:	f107 0320 	add.w	r3, r7, #32
 8000eaa:	2230      	movs	r2, #48	; 0x30
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f004 fd53 	bl	800595a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	4b23      	ldr	r3, [pc, #140]	; (8000f58 <SystemClock_Config+0xb8>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ecc:	4a22      	ldr	r2, [pc, #136]	; (8000f58 <SystemClock_Config+0xb8>)
 8000ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed4:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <SystemClock_Config+0xb8>)
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <SystemClock_Config+0xbc>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000eec:	4a1b      	ldr	r2, [pc, #108]	; (8000f5c <SystemClock_Config+0xbc>)
 8000eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <SystemClock_Config+0xbc>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f00:	2302      	movs	r3, #2
 8000f02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f04:	2301      	movs	r3, #1
 8000f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f08:	2310      	movs	r3, #16
 8000f0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f10:	f107 0320 	add.w	r3, r7, #32
 8000f14:	4618      	mov	r0, r3
 8000f16:	f001 fd5d 	bl	80029d4 <HAL_RCC_OscConfig>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000f20:	f000 f994 	bl	800124c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f24:	230f      	movs	r3, #15
 8000f26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f001 ffb8 	bl	8002eb4 <HAL_RCC_ClockConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f4a:	f000 f97f 	bl	800124c <Error_Handler>
  }
}
 8000f4e:	bf00      	nop
 8000f50:	3750      	adds	r7, #80	; 0x50
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40007000 	.word	0x40007000

08000f60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f66:	463b      	mov	r3, r7
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000f72:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000f74:	4a21      	ldr	r2, [pc, #132]	; (8000ffc <MX_ADC1_Init+0x9c>)
 8000f76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f78:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f84:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f90:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f98:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f9e:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000fa0:	4a17      	ldr	r2, [pc, #92]	; (8001000 <MX_ADC1_Init+0xa0>)
 8000fa2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000faa:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fbe:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000fc0:	f000 fbe6 	bl	8001790 <HAL_ADC_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fca:	f000 f93f 	bl	800124c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000fce:	2306      	movs	r3, #6
 8000fd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fda:	463b      	mov	r3, r7
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4806      	ldr	r0, [pc, #24]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000fe0:	f000 fc1a 	bl	8001818 <HAL_ADC_ConfigChannel>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000fea:	f000 f92f 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  //adc_config = sConfig;
  /* USER CODE END ADC1_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20004264 	.word	0x20004264
 8000ffc:	40012000 	.word	0x40012000
 8001000:	0f000001 	.word	0x0f000001

08001004 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <MX_I2C3_Init+0x50>)
 800100a:	4a13      	ldr	r2, [pc, #76]	; (8001058 <MX_I2C3_Init+0x54>)
 800100c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_I2C3_Init+0x50>)
 8001010:	4a12      	ldr	r2, [pc, #72]	; (800105c <MX_I2C3_Init+0x58>)
 8001012:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MX_I2C3_Init+0x50>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_I2C3_Init+0x50>)
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_I2C3_Init+0x50>)
 8001022:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001026:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001028:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <MX_I2C3_Init+0x50>)
 800102a:	2200      	movs	r2, #0
 800102c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_I2C3_Init+0x50>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <MX_I2C3_Init+0x50>)
 8001036:	2200      	movs	r2, #0
 8001038:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_I2C3_Init+0x50>)
 800103c:	2200      	movs	r2, #0
 800103e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001040:	4804      	ldr	r0, [pc, #16]	; (8001054 <MX_I2C3_Init+0x50>)
 8001042:	f001 fb8f 	bl	8002764 <HAL_I2C_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800104c:	f000 f8fe 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20004210 	.word	0x20004210
 8001058:	40005c00 	.word	0x40005c00
 800105c:	000186a0 	.word	0x000186a0

08001060 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001066:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <MX_USART2_UART_Init+0x50>)
 8001068:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 800106c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001070:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001086:	220c      	movs	r2, #12
 8001088:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001096:	4805      	ldr	r0, [pc, #20]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001098:	f002 fb28 	bl	80036ec <HAL_UART_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010a2:	f000 f8d3 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200042b0 	.word	0x200042b0
 80010b0:	40004400 	.word	0x40004400

080010b4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MX_DMA_Init+0x3c>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <MX_DMA_Init+0x3c>)
 80010c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_DMA_Init+0x3c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2105      	movs	r1, #5
 80010da:	2010      	movs	r0, #16
 80010dc:	f000 fe72 	bl	8001dc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80010e0:	2010      	movs	r0, #16
 80010e2:	f000 fe8b 	bl	8001dfc <HAL_NVIC_EnableIRQ>

}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800

080010f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	4b35      	ldr	r3, [pc, #212]	; (80011e4 <MX_GPIO_Init+0xf0>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a34      	ldr	r2, [pc, #208]	; (80011e4 <MX_GPIO_Init+0xf0>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b32      	ldr	r3, [pc, #200]	; (80011e4 <MX_GPIO_Init+0xf0>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	4b2e      	ldr	r3, [pc, #184]	; (80011e4 <MX_GPIO_Init+0xf0>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a2d      	ldr	r2, [pc, #180]	; (80011e4 <MX_GPIO_Init+0xf0>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <MX_GPIO_Init+0xf0>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <MX_GPIO_Init+0xf0>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a26      	ldr	r2, [pc, #152]	; (80011e4 <MX_GPIO_Init+0xf0>)
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <MX_GPIO_Init+0xf0>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	f641 4102 	movw	r1, #7170	; 0x1c02
 8001164:	4820      	ldr	r0, [pc, #128]	; (80011e8 <MX_GPIO_Init+0xf4>)
 8001166:	f001 fae3 	bl	8002730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	f240 4103 	movw	r1, #1027	; 0x403
 8001170:	481e      	ldr	r0, [pc, #120]	; (80011ec <MX_GPIO_Init+0xf8>)
 8001172:	f001 fadd 	bl	8002730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 800117c:	481c      	ldr	r0, [pc, #112]	; (80011f0 <MX_GPIO_Init+0xfc>)
 800117e:	f001 fad7 	bl	8002730 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC1 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001182:	f641 4302 	movw	r3, #7170	; 0x1c02
 8001186:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	2301      	movs	r3, #1
 800118a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	4619      	mov	r1, r3
 800119a:	4813      	ldr	r0, [pc, #76]	; (80011e8 <MX_GPIO_Init+0xf4>)
 800119c:	f001 f946 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10;
 80011a0:	f240 4303 	movw	r3, #1027	; 0x403
 80011a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a6:	2301      	movs	r3, #1
 80011a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	4619      	mov	r1, r3
 80011b8:	480c      	ldr	r0, [pc, #48]	; (80011ec <MX_GPIO_Init+0xf8>)
 80011ba:	f001 f937 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 PB7 PB8 
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 80011be:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80011c2:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	4619      	mov	r1, r3
 80011d6:	4806      	ldr	r0, [pc, #24]	; (80011f0 <MX_GPIO_Init+0xfc>)
 80011d8:	f001 f928 	bl	800242c <HAL_GPIO_Init>

}
 80011dc:	bf00      	nop
 80011de:	3720      	adds	r7, #32
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020800 	.word	0x40020800
 80011ec:	40020000 	.word	0x40020000
 80011f0:	40020400 	.word	0x40020400

080011f4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	UNUSED(huart);

	HAL_UART_Transmit(&huart2, &BT_Buf, 1, 10);
 80011fc:	230a      	movs	r3, #10
 80011fe:	2201      	movs	r2, #1
 8001200:	4903      	ldr	r1, [pc, #12]	; (8001210 <HAL_UART_RxCpltCallback+0x1c>)
 8001202:	4804      	ldr	r0, [pc, #16]	; (8001214 <HAL_UART_RxCpltCallback+0x20>)
 8001204:	f002 fabf 	bl	8003786 <HAL_UART_Transmit>
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000450 	.word	0x20000450
 8001214:	200042b0 	.word	0x200042b0

08001218 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001220:	2001      	movs	r0, #1
 8001222:	f003 f9b0 	bl	8004586 <osDelay>
 8001226:	e7fb      	b.n	8001220 <StartDefaultTask+0x8>

08001228 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a04      	ldr	r2, [pc, #16]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d101      	bne.n	800123e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800123a:	f000 fa89 	bl	8001750 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40010000 	.word	0x40010000

0800124c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_MspInit+0x54>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	4a11      	ldr	r2, [pc, #68]	; (80012b0 <HAL_MspInit+0x54>)
 800126c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001270:	6453      	str	r3, [r2, #68]	; 0x44
 8001272:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <HAL_MspInit+0x54>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_MspInit+0x54>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <HAL_MspInit+0x54>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128c:	6413      	str	r3, [r2, #64]	; 0x40
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_MspInit+0x54>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	210f      	movs	r1, #15
 800129e:	f06f 0001 	mvn.w	r0, #1
 80012a2:	f000 fd8f 	bl	8001dc4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800

080012b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a17      	ldr	r2, [pc, #92]	; (8001330 <HAL_ADC_MspInit+0x7c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d127      	bne.n	8001326 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b16      	ldr	r3, [pc, #88]	; (8001334 <HAL_ADC_MspInit+0x80>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	4a15      	ldr	r2, [pc, #84]	; (8001334 <HAL_ADC_MspInit+0x80>)
 80012e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e4:	6453      	str	r3, [r2, #68]	; 0x44
 80012e6:	4b13      	ldr	r3, [pc, #76]	; (8001334 <HAL_ADC_MspInit+0x80>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <HAL_ADC_MspInit+0x80>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a0e      	ldr	r2, [pc, #56]	; (8001334 <HAL_ADC_MspInit+0x80>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <HAL_ADC_MspInit+0x80>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA6     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800130e:	2340      	movs	r3, #64	; 0x40
 8001310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001312:	2303      	movs	r3, #3
 8001314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	4805      	ldr	r0, [pc, #20]	; (8001338 <HAL_ADC_MspInit+0x84>)
 8001322:	f001 f883 	bl	800242c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001326:	bf00      	nop
 8001328:	3728      	adds	r7, #40	; 0x28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40012000 	.word	0x40012000
 8001334:	40023800 	.word	0x40023800
 8001338:	40020000 	.word	0x40020000

0800133c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a29      	ldr	r2, [pc, #164]	; (8001400 <HAL_I2C_MspInit+0xc4>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d14b      	bne.n	80013f6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	4b28      	ldr	r3, [pc, #160]	; (8001404 <HAL_I2C_MspInit+0xc8>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a27      	ldr	r2, [pc, #156]	; (8001404 <HAL_I2C_MspInit+0xc8>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b25      	ldr	r3, [pc, #148]	; (8001404 <HAL_I2C_MspInit+0xc8>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b21      	ldr	r3, [pc, #132]	; (8001404 <HAL_I2C_MspInit+0xc8>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a20      	ldr	r2, [pc, #128]	; (8001404 <HAL_I2C_MspInit+0xc8>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <HAL_I2C_MspInit+0xc8>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001396:	f44f 7300 	mov.w	r3, #512	; 0x200
 800139a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800139c:	2312      	movs	r3, #18
 800139e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a0:	2301      	movs	r3, #1
 80013a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013a8:	2304      	movs	r3, #4
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	4619      	mov	r1, r3
 80013b2:	4815      	ldr	r0, [pc, #84]	; (8001408 <HAL_I2C_MspInit+0xcc>)
 80013b4:	f001 f83a 	bl	800242c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013be:	2312      	movs	r3, #18
 80013c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013ca:	2304      	movs	r3, #4
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	480d      	ldr	r0, [pc, #52]	; (800140c <HAL_I2C_MspInit+0xd0>)
 80013d6:	f001 f829 	bl	800242c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_I2C_MspInit+0xc8>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	4a08      	ldr	r2, [pc, #32]	; (8001404 <HAL_I2C_MspInit+0xc8>)
 80013e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013e8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_I2C_MspInit+0xc8>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80013f6:	bf00      	nop
 80013f8:	3728      	adds	r7, #40	; 0x28
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40005c00 	.word	0x40005c00
 8001404:	40023800 	.word	0x40023800
 8001408:	40020800 	.word	0x40020800
 800140c:	40020000 	.word	0x40020000

08001410 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a34      	ldr	r2, [pc, #208]	; (8001500 <HAL_UART_MspInit+0xf0>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d162      	bne.n	80014f8 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	4b33      	ldr	r3, [pc, #204]	; (8001504 <HAL_UART_MspInit+0xf4>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	4a32      	ldr	r2, [pc, #200]	; (8001504 <HAL_UART_MspInit+0xf4>)
 800143c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001440:	6413      	str	r3, [r2, #64]	; 0x40
 8001442:	4b30      	ldr	r3, [pc, #192]	; (8001504 <HAL_UART_MspInit+0xf4>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	4b2c      	ldr	r3, [pc, #176]	; (8001504 <HAL_UART_MspInit+0xf4>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a2b      	ldr	r2, [pc, #172]	; (8001504 <HAL_UART_MspInit+0xf4>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b29      	ldr	r3, [pc, #164]	; (8001504 <HAL_UART_MspInit+0xf4>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800146a:	230c      	movs	r3, #12
 800146c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800147a:	2307      	movs	r3, #7
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	4820      	ldr	r0, [pc, #128]	; (8001508 <HAL_UART_MspInit+0xf8>)
 8001486:	f000 ffd1 	bl	800242c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800148a:	4b20      	ldr	r3, [pc, #128]	; (800150c <HAL_UART_MspInit+0xfc>)
 800148c:	4a20      	ldr	r2, [pc, #128]	; (8001510 <HAL_UART_MspInit+0x100>)
 800148e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001490:	4b1e      	ldr	r3, [pc, #120]	; (800150c <HAL_UART_MspInit+0xfc>)
 8001492:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001496:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001498:	4b1c      	ldr	r3, [pc, #112]	; (800150c <HAL_UART_MspInit+0xfc>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800149e:	4b1b      	ldr	r3, [pc, #108]	; (800150c <HAL_UART_MspInit+0xfc>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014a4:	4b19      	ldr	r3, [pc, #100]	; (800150c <HAL_UART_MspInit+0xfc>)
 80014a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014aa:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014ac:	4b17      	ldr	r3, [pc, #92]	; (800150c <HAL_UART_MspInit+0xfc>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014b2:	4b16      	ldr	r3, [pc, #88]	; (800150c <HAL_UART_MspInit+0xfc>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80014b8:	4b14      	ldr	r3, [pc, #80]	; (800150c <HAL_UART_MspInit+0xfc>)
 80014ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014be:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <HAL_UART_MspInit+0xfc>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <HAL_UART_MspInit+0xfc>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80014cc:	480f      	ldr	r0, [pc, #60]	; (800150c <HAL_UART_MspInit+0xfc>)
 80014ce:	f000 fca3 	bl	8001e18 <HAL_DMA_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80014d8:	f7ff feb8 	bl	800124c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a0b      	ldr	r2, [pc, #44]	; (800150c <HAL_UART_MspInit+0xfc>)
 80014e0:	635a      	str	r2, [r3, #52]	; 0x34
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <HAL_UART_MspInit+0xfc>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80014e8:	2200      	movs	r2, #0
 80014ea:	2105      	movs	r1, #5
 80014ec:	2026      	movs	r0, #38	; 0x26
 80014ee:	f000 fc69 	bl	8001dc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014f2:	2026      	movs	r0, #38	; 0x26
 80014f4:	f000 fc82 	bl	8001dfc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014f8:	bf00      	nop
 80014fa:	3728      	adds	r7, #40	; 0x28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40004400 	.word	0x40004400
 8001504:	40023800 	.word	0x40023800
 8001508:	40020000 	.word	0x40020000
 800150c:	200041b0 	.word	0x200041b0
 8001510:	40026088 	.word	0x40026088

08001514 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08c      	sub	sp, #48	; 0x30
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8001524:	2200      	movs	r2, #0
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	2019      	movs	r0, #25
 800152a:	f000 fc4b 	bl	8001dc4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800152e:	2019      	movs	r0, #25
 8001530:	f000 fc64 	bl	8001dfc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <HAL_InitTick+0xa0>)
 800153a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153c:	4a1d      	ldr	r2, [pc, #116]	; (80015b4 <HAL_InitTick+0xa0>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6453      	str	r3, [r2, #68]	; 0x44
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <HAL_InitTick+0xa0>)
 8001546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001550:	f107 0210 	add.w	r2, r7, #16
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f001 fe76 	bl	800324c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001560:	f001 fe60 	bl	8003224 <HAL_RCC_GetPCLK2Freq>
 8001564:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001568:	4a13      	ldr	r2, [pc, #76]	; (80015b8 <HAL_InitTick+0xa4>)
 800156a:	fba2 2303 	umull	r2, r3, r2, r3
 800156e:	0c9b      	lsrs	r3, r3, #18
 8001570:	3b01      	subs	r3, #1
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <HAL_InitTick+0xa8>)
 8001576:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <HAL_InitTick+0xac>)
 8001578:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <HAL_InitTick+0xa8>)
 800157c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001580:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001582:	4a0e      	ldr	r2, [pc, #56]	; (80015bc <HAL_InitTick+0xa8>)
 8001584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001586:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <HAL_InitTick+0xa8>)
 800158a:	2200      	movs	r2, #0
 800158c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <HAL_InitTick+0xa8>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001594:	4809      	ldr	r0, [pc, #36]	; (80015bc <HAL_InitTick+0xa8>)
 8001596:	f001 fe8b 	bl	80032b0 <HAL_TIM_Base_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d104      	bne.n	80015aa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80015a0:	4806      	ldr	r0, [pc, #24]	; (80015bc <HAL_InitTick+0xa8>)
 80015a2:	f001 feba 	bl	800331a <HAL_TIM_Base_Start_IT>
 80015a6:	4603      	mov	r3, r0
 80015a8:	e000      	b.n	80015ac <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3730      	adds	r7, #48	; 0x30
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40023800 	.word	0x40023800
 80015b8:	431bde83 	.word	0x431bde83
 80015bc:	200042f0 	.word	0x200042f0
 80015c0:	40010000 	.word	0x40010000

080015c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <HardFault_Handler+0x4>

080015d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <MemManage_Handler+0x4>

080015de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <BusFault_Handler+0x4>

080015e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <UsageFault_Handler+0x4>

080015ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80015fc:	4802      	ldr	r0, [pc, #8]	; (8001608 <DMA1_Stream5_IRQHandler+0x10>)
 80015fe:	f000 fcdb 	bl	8001fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200041b0 	.word	0x200041b0

0800160c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001612:	f001 fea6 	bl	8003362 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200042f0 	.word	0x200042f0

08001620 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <USART2_IRQHandler+0x10>)
 8001626:	f002 f947 	bl	80038b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200042b0 	.word	0x200042b0

08001634 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <_sbrk+0x50>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d102      	bne.n	800164a <_sbrk+0x16>
		heap_end = &end;
 8001644:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <_sbrk+0x50>)
 8001646:	4a10      	ldr	r2, [pc, #64]	; (8001688 <_sbrk+0x54>)
 8001648:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <_sbrk+0x50>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <_sbrk+0x50>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4413      	add	r3, r2
 8001658:	466a      	mov	r2, sp
 800165a:	4293      	cmp	r3, r2
 800165c:	d907      	bls.n	800166e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800165e:	f004 f947 	bl	80058f0 <__errno>
 8001662:	4602      	mov	r2, r0
 8001664:	230c      	movs	r3, #12
 8001666:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001668:	f04f 33ff 	mov.w	r3, #4294967295
 800166c:	e006      	b.n	800167c <_sbrk+0x48>
	}

	heap_end += incr;
 800166e:	4b05      	ldr	r3, [pc, #20]	; (8001684 <_sbrk+0x50>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	4a03      	ldr	r2, [pc, #12]	; (8001684 <_sbrk+0x50>)
 8001678:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800167a:	68fb      	ldr	r3, [r7, #12]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000454 	.word	0x20000454
 8001688:	20004338 	.word	0x20004338

0800168c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <SystemInit+0x28>)
 8001692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001696:	4a07      	ldr	r2, [pc, #28]	; (80016b4 <SystemInit+0x28>)
 8001698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800169c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <SystemInit+0x28>)
 80016a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016a6:	609a      	str	r2, [r3, #8]
#endif
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016be:	e003      	b.n	80016c8 <LoopCopyDataInit>

080016c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016c6:	3104      	adds	r1, #4

080016c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016c8:	480b      	ldr	r0, [pc, #44]	; (80016f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016d0:	d3f6      	bcc.n	80016c0 <CopyDataInit>
  ldr  r2, =_sbss
 80016d2:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016d4:	e002      	b.n	80016dc <LoopFillZerobss>

080016d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016d8:	f842 3b04 	str.w	r3, [r2], #4

080016dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016e0:	d3f9      	bcc.n	80016d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016e2:	f7ff ffd3 	bl	800168c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016e6:	f004 f909 	bl	80058fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ea:	f7ff fbaf 	bl	8000e4c <main>
  bx  lr    
 80016ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016f0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80016f4:	08007640 	.word	0x08007640
  ldr  r0, =_sdata
 80016f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016fc:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8001700:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001704:	20004338 	.word	0x20004338

08001708 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001708:	e7fe      	b.n	8001708 <ADC_IRQHandler>
	...

0800170c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <HAL_Init+0x40>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0d      	ldr	r2, [pc, #52]	; (800174c <HAL_Init+0x40>)
 8001716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800171a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_Init+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0a      	ldr	r2, [pc, #40]	; (800174c <HAL_Init+0x40>)
 8001722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001726:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a07      	ldr	r2, [pc, #28]	; (800174c <HAL_Init+0x40>)
 800172e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001732:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001734:	2003      	movs	r0, #3
 8001736:	f000 fb3a 	bl	8001dae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800173a:	2000      	movs	r0, #0
 800173c:	f7ff feea 	bl	8001514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001740:	f7ff fd8c 	bl	800125c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023c00 	.word	0x40023c00

08001750 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_IncTick+0x20>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_IncTick+0x24>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4413      	add	r3, r2
 8001760:	4a04      	ldr	r2, [pc, #16]	; (8001774 <HAL_IncTick+0x24>)
 8001762:	6013      	str	r3, [r2, #0]
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000008 	.word	0x20000008
 8001774:	20004330 	.word	0x20004330

08001778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return uwTick;
 800177c:	4b03      	ldr	r3, [pc, #12]	; (800178c <HAL_GetTick+0x14>)
 800177e:	681b      	ldr	r3, [r3, #0]
}
 8001780:	4618      	mov	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	20004330 	.word	0x20004330

08001790 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e033      	b.n	800180e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d109      	bne.n	80017c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff fd80 	bl	80012b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f003 0310 	and.w	r3, r3, #16
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d118      	bne.n	8001800 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017d6:	f023 0302 	bic.w	r3, r3, #2
 80017da:	f043 0202 	orr.w	r2, r3, #2
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f93a 	bl	8001a5c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f023 0303 	bic.w	r3, r3, #3
 80017f6:	f043 0201 	orr.w	r2, r3, #1
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	641a      	str	r2, [r3, #64]	; 0x40
 80017fe:	e001      	b.n	8001804 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800180c:	7bfb      	ldrb	r3, [r7, #15]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800182c:	2b01      	cmp	r3, #1
 800182e:	d101      	bne.n	8001834 <HAL_ADC_ConfigChannel+0x1c>
 8001830:	2302      	movs	r3, #2
 8001832:	e105      	b.n	8001a40 <HAL_ADC_ConfigChannel+0x228>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b09      	cmp	r3, #9
 8001842:	d925      	bls.n	8001890 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68d9      	ldr	r1, [r3, #12]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	b29b      	uxth	r3, r3
 8001850:	461a      	mov	r2, r3
 8001852:	4613      	mov	r3, r2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	4413      	add	r3, r2
 8001858:	3b1e      	subs	r3, #30
 800185a:	2207      	movs	r2, #7
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43da      	mvns	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	400a      	ands	r2, r1
 8001868:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68d9      	ldr	r1, [r3, #12]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	b29b      	uxth	r3, r3
 800187a:	4618      	mov	r0, r3
 800187c:	4603      	mov	r3, r0
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4403      	add	r3, r0
 8001882:	3b1e      	subs	r3, #30
 8001884:	409a      	lsls	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	e022      	b.n	80018d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6919      	ldr	r1, [r3, #16]
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	b29b      	uxth	r3, r3
 800189c:	461a      	mov	r2, r3
 800189e:	4613      	mov	r3, r2
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4413      	add	r3, r2
 80018a4:	2207      	movs	r2, #7
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43da      	mvns	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	400a      	ands	r2, r1
 80018b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6919      	ldr	r1, [r3, #16]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	689a      	ldr	r2, [r3, #8]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	4618      	mov	r0, r3
 80018c6:	4603      	mov	r3, r0
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	4403      	add	r3, r0
 80018cc:	409a      	lsls	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d824      	bhi.n	8001928 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	3b05      	subs	r3, #5
 80018f0:	221f      	movs	r2, #31
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43da      	mvns	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	400a      	ands	r2, r1
 80018fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	b29b      	uxth	r3, r3
 800190c:	4618      	mov	r0, r3
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	3b05      	subs	r3, #5
 800191a:	fa00 f203 	lsl.w	r2, r0, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	430a      	orrs	r2, r1
 8001924:	635a      	str	r2, [r3, #52]	; 0x34
 8001926:	e04c      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b0c      	cmp	r3, #12
 800192e:	d824      	bhi.n	800197a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	3b23      	subs	r3, #35	; 0x23
 8001942:	221f      	movs	r2, #31
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43da      	mvns	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	400a      	ands	r2, r1
 8001950:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	b29b      	uxth	r3, r3
 800195e:	4618      	mov	r0, r3
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	3b23      	subs	r3, #35	; 0x23
 800196c:	fa00 f203 	lsl.w	r2, r0, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	631a      	str	r2, [r3, #48]	; 0x30
 8001978:	e023      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	3b41      	subs	r3, #65	; 0x41
 800198c:	221f      	movs	r2, #31
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43da      	mvns	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	400a      	ands	r2, r1
 800199a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	4618      	mov	r0, r3
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	3b41      	subs	r3, #65	; 0x41
 80019b6:	fa00 f203 	lsl.w	r2, r0, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019c2:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <HAL_ADC_ConfigChannel+0x234>)
 80019c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a21      	ldr	r2, [pc, #132]	; (8001a50 <HAL_ADC_ConfigChannel+0x238>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d109      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x1cc>
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b12      	cmp	r3, #18
 80019d6:	d105      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a19      	ldr	r2, [pc, #100]	; (8001a50 <HAL_ADC_ConfigChannel+0x238>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d123      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x21e>
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b10      	cmp	r3, #16
 80019f4:	d003      	beq.n	80019fe <HAL_ADC_ConfigChannel+0x1e6>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b11      	cmp	r3, #17
 80019fc:	d11b      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b10      	cmp	r3, #16
 8001a10:	d111      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <HAL_ADC_ConfigChannel+0x23c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a10      	ldr	r2, [pc, #64]	; (8001a58 <HAL_ADC_ConfigChannel+0x240>)
 8001a18:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1c:	0c9a      	lsrs	r2, r3, #18
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a28:	e002      	b.n	8001a30 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f9      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	40012300 	.word	0x40012300
 8001a50:	40012000 	.word	0x40012000
 8001a54:	20000000 	.word	0x20000000
 8001a58:	431bde83 	.word	0x431bde83

08001a5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a64:	4b79      	ldr	r3, [pc, #484]	; (8001c4c <ADC_Init+0x1f0>)
 8001a66:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6859      	ldr	r1, [r3, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	021a      	lsls	r2, r3, #8
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ab4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6859      	ldr	r1, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ad6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6899      	ldr	r1, [r3, #8]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aee:	4a58      	ldr	r2, [pc, #352]	; (8001c50 <ADC_Init+0x1f4>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d022      	beq.n	8001b3a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6899      	ldr	r1, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6899      	ldr	r1, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	e00f      	b.n	8001b5a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 0202 	bic.w	r2, r2, #2
 8001b68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6899      	ldr	r1, [r3, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	7e1b      	ldrb	r3, [r3, #24]
 8001b74:	005a      	lsls	r2, r3, #1
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d01b      	beq.n	8001bc0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ba6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6859      	ldr	r1, [r3, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	035a      	lsls	r2, r3, #13
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	e007      	b.n	8001bd0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	051a      	lsls	r2, r3, #20
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6899      	ldr	r1, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c12:	025a      	lsls	r2, r3, #9
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6899      	ldr	r1, [r3, #8]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	029a      	lsls	r2, r3, #10
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	609a      	str	r2, [r3, #8]
}
 8001c40:	bf00      	nop
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	40012300 	.word	0x40012300
 8001c50:	0f000001 	.word	0x0f000001

08001c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <__NVIC_SetPriorityGrouping+0x44>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c70:	4013      	ands	r3, r2
 8001c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c86:	4a04      	ldr	r2, [pc, #16]	; (8001c98 <__NVIC_SetPriorityGrouping+0x44>)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	60d3      	str	r3, [r2, #12]
}
 8001c8c:	bf00      	nop
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	0a1b      	lsrs	r3, r3, #8
 8001ca6:	f003 0307 	and.w	r3, r3, #7
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	db0b      	blt.n	8001ce2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	f003 021f 	and.w	r2, r3, #31
 8001cd0:	4907      	ldr	r1, [pc, #28]	; (8001cf0 <__NVIC_EnableIRQ+0x38>)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	095b      	lsrs	r3, r3, #5
 8001cd8:	2001      	movs	r0, #1
 8001cda:	fa00 f202 	lsl.w	r2, r0, r2
 8001cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000e100 	.word	0xe000e100

08001cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	6039      	str	r1, [r7, #0]
 8001cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	db0a      	blt.n	8001d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	490c      	ldr	r1, [pc, #48]	; (8001d40 <__NVIC_SetPriority+0x4c>)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	0112      	lsls	r2, r2, #4
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	440b      	add	r3, r1
 8001d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d1c:	e00a      	b.n	8001d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4908      	ldr	r1, [pc, #32]	; (8001d44 <__NVIC_SetPriority+0x50>)
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	3b04      	subs	r3, #4
 8001d2c:	0112      	lsls	r2, r2, #4
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	440b      	add	r3, r1
 8001d32:	761a      	strb	r2, [r3, #24]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000e100 	.word	0xe000e100
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	; 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f1c3 0307 	rsb	r3, r3, #7
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	bf28      	it	cs
 8001d66:	2304      	movcs	r3, #4
 8001d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	2b06      	cmp	r3, #6
 8001d70:	d902      	bls.n	8001d78 <NVIC_EncodePriority+0x30>
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3b03      	subs	r3, #3
 8001d76:	e000      	b.n	8001d7a <NVIC_EncodePriority+0x32>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43da      	mvns	r2, r3
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d90:	f04f 31ff 	mov.w	r1, #4294967295
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	43d9      	mvns	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	4313      	orrs	r3, r2
         );
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3724      	adds	r7, #36	; 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ff4c 	bl	8001c54 <__NVIC_SetPriorityGrouping>
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
 8001dd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd6:	f7ff ff61 	bl	8001c9c <__NVIC_GetPriorityGrouping>
 8001dda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	68b9      	ldr	r1, [r7, #8]
 8001de0:	6978      	ldr	r0, [r7, #20]
 8001de2:	f7ff ffb1 	bl	8001d48 <NVIC_EncodePriority>
 8001de6:	4602      	mov	r2, r0
 8001de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dec:	4611      	mov	r1, r2
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff ff80 	bl	8001cf4 <__NVIC_SetPriority>
}
 8001df4:	bf00      	nop
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff ff54 	bl	8001cb8 <__NVIC_EnableIRQ>
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e24:	f7ff fca8 	bl	8001778 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e099      	b.n	8001f68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0201 	bic.w	r2, r2, #1
 8001e52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e54:	e00f      	b.n	8001e76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e56:	f7ff fc8f 	bl	8001778 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b05      	cmp	r3, #5
 8001e62:	d908      	bls.n	8001e76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2220      	movs	r2, #32
 8001e68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e078      	b.n	8001f68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1e8      	bne.n	8001e56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	4b38      	ldr	r3, [pc, #224]	; (8001f70 <HAL_DMA_Init+0x158>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d107      	bne.n	8001ee0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f023 0307 	bic.w	r3, r3, #7
 8001ef6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d117      	bne.n	8001f3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00e      	beq.n	8001f3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 fa0b 	bl	8002338 <DMA_CheckFifoParam>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d008      	beq.n	8001f3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2240      	movs	r2, #64	; 0x40
 8001f2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f36:	2301      	movs	r3, #1
 8001f38:	e016      	b.n	8001f68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f9c2 	bl	80022cc <DMA_CalcBaseAndBitshift>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f50:	223f      	movs	r2, #63	; 0x3f
 8001f52:	409a      	lsls	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	f010803f 	.word	0xf010803f

08001f74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d004      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2280      	movs	r2, #128	; 0x80
 8001f8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00c      	b.n	8001fac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2205      	movs	r2, #5
 8001f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0201 	bic.w	r2, r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fc4:	4b92      	ldr	r3, [pc, #584]	; (8002210 <HAL_DMA_IRQHandler+0x258>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a92      	ldr	r2, [pc, #584]	; (8002214 <HAL_DMA_IRQHandler+0x25c>)
 8001fca:	fba2 2303 	umull	r2, r3, r2, r3
 8001fce:	0a9b      	lsrs	r3, r3, #10
 8001fd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe2:	2208      	movs	r2, #8
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d01a      	beq.n	8002024 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d013      	beq.n	8002024 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0204 	bic.w	r2, r2, #4
 800200a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002010:	2208      	movs	r2, #8
 8002012:	409a      	lsls	r2, r3
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201c:	f043 0201 	orr.w	r2, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002028:	2201      	movs	r2, #1
 800202a:	409a      	lsls	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4013      	ands	r3, r2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d012      	beq.n	800205a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00b      	beq.n	800205a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002046:	2201      	movs	r2, #1
 8002048:	409a      	lsls	r2, r3
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002052:	f043 0202 	orr.w	r2, r3, #2
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205e:	2204      	movs	r2, #4
 8002060:	409a      	lsls	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	4013      	ands	r3, r2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d012      	beq.n	8002090 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00b      	beq.n	8002090 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207c:	2204      	movs	r2, #4
 800207e:	409a      	lsls	r2, r3
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002088:	f043 0204 	orr.w	r2, r3, #4
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002094:	2210      	movs	r2, #16
 8002096:	409a      	lsls	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4013      	ands	r3, r2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d043      	beq.n	8002128 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d03c      	beq.n	8002128 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b2:	2210      	movs	r2, #16
 80020b4:	409a      	lsls	r2, r3
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d018      	beq.n	80020fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d108      	bne.n	80020e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d024      	beq.n	8002128 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	4798      	blx	r3
 80020e6:	e01f      	b.n	8002128 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d01b      	beq.n	8002128 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	4798      	blx	r3
 80020f8:	e016      	b.n	8002128 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002104:	2b00      	cmp	r3, #0
 8002106:	d107      	bne.n	8002118 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0208 	bic.w	r2, r2, #8
 8002116:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212c:	2220      	movs	r2, #32
 800212e:	409a      	lsls	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4013      	ands	r3, r2
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 808e 	beq.w	8002256 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0310 	and.w	r3, r3, #16
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 8086 	beq.w	8002256 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214e:	2220      	movs	r2, #32
 8002150:	409a      	lsls	r2, r3
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b05      	cmp	r3, #5
 8002160:	d136      	bne.n	80021d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0216 	bic.w	r2, r2, #22
 8002170:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	695a      	ldr	r2, [r3, #20]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002180:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	2b00      	cmp	r3, #0
 8002188:	d103      	bne.n	8002192 <HAL_DMA_IRQHandler+0x1da>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800218e:	2b00      	cmp	r3, #0
 8002190:	d007      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0208 	bic.w	r2, r2, #8
 80021a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a6:	223f      	movs	r2, #63	; 0x3f
 80021a8:	409a      	lsls	r2, r3
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d07d      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	4798      	blx	r3
        }
        return;
 80021ce:	e078      	b.n	80022c2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d01c      	beq.n	8002218 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d108      	bne.n	80021fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d030      	beq.n	8002256 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	4798      	blx	r3
 80021fc:	e02b      	b.n	8002256 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002202:	2b00      	cmp	r3, #0
 8002204:	d027      	beq.n	8002256 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	4798      	blx	r3
 800220e:	e022      	b.n	8002256 <HAL_DMA_IRQHandler+0x29e>
 8002210:	20000000 	.word	0x20000000
 8002214:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10f      	bne.n	8002246 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0210 	bic.w	r2, r2, #16
 8002234:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225a:	2b00      	cmp	r3, #0
 800225c:	d032      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d022      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2205      	movs	r2, #5
 800226e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0201 	bic.w	r2, r2, #1
 8002280:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	3301      	adds	r3, #1
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	429a      	cmp	r2, r3
 800228c:	d307      	bcc.n	800229e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1f2      	bne.n	8002282 <HAL_DMA_IRQHandler+0x2ca>
 800229c:	e000      	b.n	80022a0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800229e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d005      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	4798      	blx	r3
 80022c0:	e000      	b.n	80022c4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80022c2:	bf00      	nop
    }
  }
}
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop

080022cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	3b10      	subs	r3, #16
 80022dc:	4a14      	ldr	r2, [pc, #80]	; (8002330 <DMA_CalcBaseAndBitshift+0x64>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	091b      	lsrs	r3, r3, #4
 80022e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022e6:	4a13      	ldr	r2, [pc, #76]	; (8002334 <DMA_CalcBaseAndBitshift+0x68>)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4413      	add	r3, r2
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d909      	bls.n	800230e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002302:	f023 0303 	bic.w	r3, r3, #3
 8002306:	1d1a      	adds	r2, r3, #4
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	659a      	str	r2, [r3, #88]	; 0x58
 800230c:	e007      	b.n	800231e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002316:	f023 0303 	bic.w	r3, r3, #3
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	aaaaaaab 	.word	0xaaaaaaab
 8002334:	08007400 	.word	0x08007400

08002338 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002348:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d11f      	bne.n	8002392 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d855      	bhi.n	8002404 <DMA_CheckFifoParam+0xcc>
 8002358:	a201      	add	r2, pc, #4	; (adr r2, 8002360 <DMA_CheckFifoParam+0x28>)
 800235a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235e:	bf00      	nop
 8002360:	08002371 	.word	0x08002371
 8002364:	08002383 	.word	0x08002383
 8002368:	08002371 	.word	0x08002371
 800236c:	08002405 	.word	0x08002405
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d045      	beq.n	8002408 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002380:	e042      	b.n	8002408 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002386:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800238a:	d13f      	bne.n	800240c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002390:	e03c      	b.n	800240c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800239a:	d121      	bne.n	80023e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d836      	bhi.n	8002410 <DMA_CheckFifoParam+0xd8>
 80023a2:	a201      	add	r2, pc, #4	; (adr r2, 80023a8 <DMA_CheckFifoParam+0x70>)
 80023a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a8:	080023b9 	.word	0x080023b9
 80023ac:	080023bf 	.word	0x080023bf
 80023b0:	080023b9 	.word	0x080023b9
 80023b4:	080023d1 	.word	0x080023d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
      break;
 80023bc:	e02f      	b.n	800241e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d024      	beq.n	8002414 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ce:	e021      	b.n	8002414 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023d8:	d11e      	bne.n	8002418 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023de:	e01b      	b.n	8002418 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d902      	bls.n	80023ec <DMA_CheckFifoParam+0xb4>
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d003      	beq.n	80023f2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023ea:	e018      	b.n	800241e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
      break;
 80023f0:	e015      	b.n	800241e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00e      	beq.n	800241c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
      break;
 8002402:	e00b      	b.n	800241c <DMA_CheckFifoParam+0xe4>
      break;
 8002404:	bf00      	nop
 8002406:	e00a      	b.n	800241e <DMA_CheckFifoParam+0xe6>
      break;
 8002408:	bf00      	nop
 800240a:	e008      	b.n	800241e <DMA_CheckFifoParam+0xe6>
      break;
 800240c:	bf00      	nop
 800240e:	e006      	b.n	800241e <DMA_CheckFifoParam+0xe6>
      break;
 8002410:	bf00      	nop
 8002412:	e004      	b.n	800241e <DMA_CheckFifoParam+0xe6>
      break;
 8002414:	bf00      	nop
 8002416:	e002      	b.n	800241e <DMA_CheckFifoParam+0xe6>
      break;   
 8002418:	bf00      	nop
 800241a:	e000      	b.n	800241e <DMA_CheckFifoParam+0xe6>
      break;
 800241c:	bf00      	nop
    }
  } 
  
  return status; 
 800241e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	; 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800243e:	2300      	movs	r3, #0
 8002440:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	e159      	b.n	80026fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002448:	2201      	movs	r2, #1
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	429a      	cmp	r2, r3
 8002462:	f040 8148 	bne.w	80026f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d00b      	beq.n	8002486 <HAL_GPIO_Init+0x5a>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d007      	beq.n	8002486 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800247a:	2b11      	cmp	r3, #17
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b12      	cmp	r3, #18
 8002484:	d130      	bne.n	80024e8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	2203      	movs	r2, #3
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024bc:	2201      	movs	r2, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	091b      	lsrs	r3, r3, #4
 80024d2:	f003 0201 	and.w	r2, r3, #1
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	2203      	movs	r2, #3
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0xfc>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b12      	cmp	r3, #18
 8002526:	d123      	bne.n	8002570 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	08da      	lsrs	r2, r3, #3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3208      	adds	r2, #8
 8002530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	220f      	movs	r2, #15
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	08da      	lsrs	r2, r3, #3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3208      	adds	r2, #8
 800256a:	69b9      	ldr	r1, [r7, #24]
 800256c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	2203      	movs	r2, #3
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 0203 	and.w	r2, r3, #3
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 80a2 	beq.w	80026f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	4b56      	ldr	r3, [pc, #344]	; (8002710 <HAL_GPIO_Init+0x2e4>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	4a55      	ldr	r2, [pc, #340]	; (8002710 <HAL_GPIO_Init+0x2e4>)
 80025bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c0:	6453      	str	r3, [r2, #68]	; 0x44
 80025c2:	4b53      	ldr	r3, [pc, #332]	; (8002710 <HAL_GPIO_Init+0x2e4>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ce:	4a51      	ldr	r2, [pc, #324]	; (8002714 <HAL_GPIO_Init+0x2e8>)
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	089b      	lsrs	r3, r3, #2
 80025d4:	3302      	adds	r3, #2
 80025d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	220f      	movs	r2, #15
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a48      	ldr	r2, [pc, #288]	; (8002718 <HAL_GPIO_Init+0x2ec>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d019      	beq.n	800262e <HAL_GPIO_Init+0x202>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a47      	ldr	r2, [pc, #284]	; (800271c <HAL_GPIO_Init+0x2f0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d013      	beq.n	800262a <HAL_GPIO_Init+0x1fe>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a46      	ldr	r2, [pc, #280]	; (8002720 <HAL_GPIO_Init+0x2f4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d00d      	beq.n	8002626 <HAL_GPIO_Init+0x1fa>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a45      	ldr	r2, [pc, #276]	; (8002724 <HAL_GPIO_Init+0x2f8>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d007      	beq.n	8002622 <HAL_GPIO_Init+0x1f6>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a44      	ldr	r2, [pc, #272]	; (8002728 <HAL_GPIO_Init+0x2fc>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d101      	bne.n	800261e <HAL_GPIO_Init+0x1f2>
 800261a:	2304      	movs	r3, #4
 800261c:	e008      	b.n	8002630 <HAL_GPIO_Init+0x204>
 800261e:	2307      	movs	r3, #7
 8002620:	e006      	b.n	8002630 <HAL_GPIO_Init+0x204>
 8002622:	2303      	movs	r3, #3
 8002624:	e004      	b.n	8002630 <HAL_GPIO_Init+0x204>
 8002626:	2302      	movs	r3, #2
 8002628:	e002      	b.n	8002630 <HAL_GPIO_Init+0x204>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <HAL_GPIO_Init+0x204>
 800262e:	2300      	movs	r3, #0
 8002630:	69fa      	ldr	r2, [r7, #28]
 8002632:	f002 0203 	and.w	r2, r2, #3
 8002636:	0092      	lsls	r2, r2, #2
 8002638:	4093      	lsls	r3, r2
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002640:	4934      	ldr	r1, [pc, #208]	; (8002714 <HAL_GPIO_Init+0x2e8>)
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	089b      	lsrs	r3, r3, #2
 8002646:	3302      	adds	r3, #2
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800264e:	4b37      	ldr	r3, [pc, #220]	; (800272c <HAL_GPIO_Init+0x300>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002672:	4a2e      	ldr	r2, [pc, #184]	; (800272c <HAL_GPIO_Init+0x300>)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002678:	4b2c      	ldr	r3, [pc, #176]	; (800272c <HAL_GPIO_Init+0x300>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800269c:	4a23      	ldr	r2, [pc, #140]	; (800272c <HAL_GPIO_Init+0x300>)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026a2:	4b22      	ldr	r3, [pc, #136]	; (800272c <HAL_GPIO_Init+0x300>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026c6:	4a19      	ldr	r2, [pc, #100]	; (800272c <HAL_GPIO_Init+0x300>)
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026cc:	4b17      	ldr	r3, [pc, #92]	; (800272c <HAL_GPIO_Init+0x300>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026f0:	4a0e      	ldr	r2, [pc, #56]	; (800272c <HAL_GPIO_Init+0x300>)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3301      	adds	r3, #1
 80026fa:	61fb      	str	r3, [r7, #28]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	2b0f      	cmp	r3, #15
 8002700:	f67f aea2 	bls.w	8002448 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002704:	bf00      	nop
 8002706:	3724      	adds	r7, #36	; 0x24
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	40023800 	.word	0x40023800
 8002714:	40013800 	.word	0x40013800
 8002718:	40020000 	.word	0x40020000
 800271c:	40020400 	.word	0x40020400
 8002720:	40020800 	.word	0x40020800
 8002724:	40020c00 	.word	0x40020c00
 8002728:	40021000 	.word	0x40021000
 800272c:	40013c00 	.word	0x40013c00

08002730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	807b      	strh	r3, [r7, #2]
 800273c:	4613      	mov	r3, r2
 800273e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002740:	787b      	ldrb	r3, [r7, #1]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002746:	887a      	ldrh	r2, [r7, #2]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800274c:	e003      	b.n	8002756 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800274e:	887b      	ldrh	r3, [r7, #2]
 8002750:	041a      	lsls	r2, r3, #16
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	619a      	str	r2, [r3, #24]
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e11f      	b.n	80029b6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d106      	bne.n	8002790 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7fe fdd6 	bl	800133c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2224      	movs	r2, #36	; 0x24
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0201 	bic.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027c8:	f000 fd18 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 80027cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	4a7b      	ldr	r2, [pc, #492]	; (80029c0 <HAL_I2C_Init+0x25c>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d807      	bhi.n	80027e8 <HAL_I2C_Init+0x84>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4a7a      	ldr	r2, [pc, #488]	; (80029c4 <HAL_I2C_Init+0x260>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	bf94      	ite	ls
 80027e0:	2301      	movls	r3, #1
 80027e2:	2300      	movhi	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	e006      	b.n	80027f6 <HAL_I2C_Init+0x92>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4a77      	ldr	r2, [pc, #476]	; (80029c8 <HAL_I2C_Init+0x264>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	bf94      	ite	ls
 80027f0:	2301      	movls	r3, #1
 80027f2:	2300      	movhi	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e0db      	b.n	80029b6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4a72      	ldr	r2, [pc, #456]	; (80029cc <HAL_I2C_Init+0x268>)
 8002802:	fba2 2303 	umull	r2, r3, r2, r3
 8002806:	0c9b      	lsrs	r3, r3, #18
 8002808:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	430a      	orrs	r2, r1
 800281c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	4a64      	ldr	r2, [pc, #400]	; (80029c0 <HAL_I2C_Init+0x25c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d802      	bhi.n	8002838 <HAL_I2C_Init+0xd4>
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	3301      	adds	r3, #1
 8002836:	e009      	b.n	800284c <HAL_I2C_Init+0xe8>
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800283e:	fb02 f303 	mul.w	r3, r2, r3
 8002842:	4a63      	ldr	r2, [pc, #396]	; (80029d0 <HAL_I2C_Init+0x26c>)
 8002844:	fba2 2303 	umull	r2, r3, r2, r3
 8002848:	099b      	lsrs	r3, r3, #6
 800284a:	3301      	adds	r3, #1
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	430b      	orrs	r3, r1
 8002852:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800285e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	4956      	ldr	r1, [pc, #344]	; (80029c0 <HAL_I2C_Init+0x25c>)
 8002868:	428b      	cmp	r3, r1
 800286a:	d80d      	bhi.n	8002888 <HAL_I2C_Init+0x124>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	1e59      	subs	r1, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	fbb1 f3f3 	udiv	r3, r1, r3
 800287a:	3301      	adds	r3, #1
 800287c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002880:	2b04      	cmp	r3, #4
 8002882:	bf38      	it	cc
 8002884:	2304      	movcc	r3, #4
 8002886:	e04f      	b.n	8002928 <HAL_I2C_Init+0x1c4>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d111      	bne.n	80028b4 <HAL_I2C_Init+0x150>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	1e58      	subs	r0, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6859      	ldr	r1, [r3, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	440b      	add	r3, r1
 800289e:	fbb0 f3f3 	udiv	r3, r0, r3
 80028a2:	3301      	adds	r3, #1
 80028a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bf0c      	ite	eq
 80028ac:	2301      	moveq	r3, #1
 80028ae:	2300      	movne	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	e012      	b.n	80028da <HAL_I2C_Init+0x176>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	1e58      	subs	r0, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6859      	ldr	r1, [r3, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	0099      	lsls	r1, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ca:	3301      	adds	r3, #1
 80028cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf0c      	ite	eq
 80028d4:	2301      	moveq	r3, #1
 80028d6:	2300      	movne	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_I2C_Init+0x17e>
 80028de:	2301      	movs	r3, #1
 80028e0:	e022      	b.n	8002928 <HAL_I2C_Init+0x1c4>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10e      	bne.n	8002908 <HAL_I2C_Init+0x1a4>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	1e58      	subs	r0, r3, #1
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6859      	ldr	r1, [r3, #4]
 80028f2:	460b      	mov	r3, r1
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	440b      	add	r3, r1
 80028f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80028fc:	3301      	adds	r3, #1
 80028fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002906:	e00f      	b.n	8002928 <HAL_I2C_Init+0x1c4>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	1e58      	subs	r0, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6859      	ldr	r1, [r3, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	0099      	lsls	r1, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	fbb0 f3f3 	udiv	r3, r0, r3
 800291e:	3301      	adds	r3, #1
 8002920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002924:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	6809      	ldr	r1, [r1, #0]
 800292c:	4313      	orrs	r3, r2
 800292e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69da      	ldr	r2, [r3, #28]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002956:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6911      	ldr	r1, [r2, #16]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68d2      	ldr	r2, [r2, #12]
 8002962:	4311      	orrs	r1, r2
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	430b      	orrs	r3, r1
 800296a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695a      	ldr	r2, [r3, #20]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2220      	movs	r2, #32
 80029a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	000186a0 	.word	0x000186a0
 80029c4:	001e847f 	.word	0x001e847f
 80029c8:	003d08ff 	.word	0x003d08ff
 80029cc:	431bde83 	.word	0x431bde83
 80029d0:	10624dd3 	.word	0x10624dd3

080029d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e25b      	b.n	8002e9e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d075      	beq.n	8002ade <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029f2:	4ba3      	ldr	r3, [pc, #652]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d00c      	beq.n	8002a18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029fe:	4ba0      	ldr	r3, [pc, #640]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d112      	bne.n	8002a30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a0a:	4b9d      	ldr	r3, [pc, #628]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a16:	d10b      	bne.n	8002a30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a18:	4b99      	ldr	r3, [pc, #612]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d05b      	beq.n	8002adc <HAL_RCC_OscConfig+0x108>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d157      	bne.n	8002adc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e236      	b.n	8002e9e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a38:	d106      	bne.n	8002a48 <HAL_RCC_OscConfig+0x74>
 8002a3a:	4b91      	ldr	r3, [pc, #580]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a90      	ldr	r2, [pc, #576]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	e01d      	b.n	8002a84 <HAL_RCC_OscConfig+0xb0>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCC_OscConfig+0x98>
 8002a52:	4b8b      	ldr	r3, [pc, #556]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a8a      	ldr	r2, [pc, #552]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	4b88      	ldr	r3, [pc, #544]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a87      	ldr	r2, [pc, #540]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	e00b      	b.n	8002a84 <HAL_RCC_OscConfig+0xb0>
 8002a6c:	4b84      	ldr	r3, [pc, #528]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a83      	ldr	r2, [pc, #524]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	4b81      	ldr	r3, [pc, #516]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a80      	ldr	r2, [pc, #512]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d013      	beq.n	8002ab4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8c:	f7fe fe74 	bl	8001778 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a94:	f7fe fe70 	bl	8001778 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b64      	cmp	r3, #100	; 0x64
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e1fb      	b.n	8002e9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa6:	4b76      	ldr	r3, [pc, #472]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f0      	beq.n	8002a94 <HAL_RCC_OscConfig+0xc0>
 8002ab2:	e014      	b.n	8002ade <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7fe fe60 	bl	8001778 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002abc:	f7fe fe5c 	bl	8001778 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b64      	cmp	r3, #100	; 0x64
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e1e7      	b.n	8002e9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ace:	4b6c      	ldr	r3, [pc, #432]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f0      	bne.n	8002abc <HAL_RCC_OscConfig+0xe8>
 8002ada:	e000      	b.n	8002ade <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d063      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aea:	4b65      	ldr	r3, [pc, #404]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 030c 	and.w	r3, r3, #12
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00b      	beq.n	8002b0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002af6:	4b62      	ldr	r3, [pc, #392]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d11c      	bne.n	8002b3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b02:	4b5f      	ldr	r3, [pc, #380]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d116      	bne.n	8002b3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0e:	4b5c      	ldr	r3, [pc, #368]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d005      	beq.n	8002b26 <HAL_RCC_OscConfig+0x152>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d001      	beq.n	8002b26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e1bb      	b.n	8002e9e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b26:	4b56      	ldr	r3, [pc, #344]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4952      	ldr	r1, [pc, #328]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3a:	e03a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d020      	beq.n	8002b86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b44:	4b4f      	ldr	r3, [pc, #316]	; (8002c84 <HAL_RCC_OscConfig+0x2b0>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4a:	f7fe fe15 	bl	8001778 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b52:	f7fe fe11 	bl	8001778 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e19c      	b.n	8002e9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b64:	4b46      	ldr	r3, [pc, #280]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0f0      	beq.n	8002b52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b70:	4b43      	ldr	r3, [pc, #268]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	4940      	ldr	r1, [pc, #256]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	600b      	str	r3, [r1, #0]
 8002b84:	e015      	b.n	8002bb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b86:	4b3f      	ldr	r3, [pc, #252]	; (8002c84 <HAL_RCC_OscConfig+0x2b0>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8c:	f7fe fdf4 	bl	8001778 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b94:	f7fe fdf0 	bl	8001778 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e17b      	b.n	8002e9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba6:	4b36      	ldr	r3, [pc, #216]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d030      	beq.n	8002c20 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d016      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc6:	4b30      	ldr	r3, [pc, #192]	; (8002c88 <HAL_RCC_OscConfig+0x2b4>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bcc:	f7fe fdd4 	bl	8001778 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd4:	f7fe fdd0 	bl	8001778 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e15b      	b.n	8002e9e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be6:	4b26      	ldr	r3, [pc, #152]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x200>
 8002bf2:	e015      	b.n	8002c20 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bf4:	4b24      	ldr	r3, [pc, #144]	; (8002c88 <HAL_RCC_OscConfig+0x2b4>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bfa:	f7fe fdbd 	bl	8001778 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c02:	f7fe fdb9 	bl	8001778 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e144      	b.n	8002e9e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c14:	4b1a      	ldr	r3, [pc, #104]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f0      	bne.n	8002c02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 80a0 	beq.w	8002d6e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c32:	4b13      	ldr	r3, [pc, #76]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10f      	bne.n	8002c5e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	4a0e      	ldr	r2, [pc, #56]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4e:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <HAL_RCC_OscConfig+0x2ac>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5e:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_RCC_OscConfig+0x2b8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d121      	bne.n	8002cae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c6a:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <HAL_RCC_OscConfig+0x2b8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a07      	ldr	r2, [pc, #28]	; (8002c8c <HAL_RCC_OscConfig+0x2b8>)
 8002c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c76:	f7fe fd7f 	bl	8001778 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7c:	e011      	b.n	8002ca2 <HAL_RCC_OscConfig+0x2ce>
 8002c7e:	bf00      	nop
 8002c80:	40023800 	.word	0x40023800
 8002c84:	42470000 	.word	0x42470000
 8002c88:	42470e80 	.word	0x42470e80
 8002c8c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c90:	f7fe fd72 	bl	8001778 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e0fd      	b.n	8002e9e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca2:	4b81      	ldr	r3, [pc, #516]	; (8002ea8 <HAL_RCC_OscConfig+0x4d4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d106      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x2f0>
 8002cb6:	4b7d      	ldr	r3, [pc, #500]	; (8002eac <HAL_RCC_OscConfig+0x4d8>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cba:	4a7c      	ldr	r2, [pc, #496]	; (8002eac <HAL_RCC_OscConfig+0x4d8>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc2:	e01c      	b.n	8002cfe <HAL_RCC_OscConfig+0x32a>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	2b05      	cmp	r3, #5
 8002cca:	d10c      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x312>
 8002ccc:	4b77      	ldr	r3, [pc, #476]	; (8002eac <HAL_RCC_OscConfig+0x4d8>)
 8002cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd0:	4a76      	ldr	r2, [pc, #472]	; (8002eac <HAL_RCC_OscConfig+0x4d8>)
 8002cd2:	f043 0304 	orr.w	r3, r3, #4
 8002cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd8:	4b74      	ldr	r3, [pc, #464]	; (8002eac <HAL_RCC_OscConfig+0x4d8>)
 8002cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cdc:	4a73      	ldr	r2, [pc, #460]	; (8002eac <HAL_RCC_OscConfig+0x4d8>)
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce4:	e00b      	b.n	8002cfe <HAL_RCC_OscConfig+0x32a>
 8002ce6:	4b71      	ldr	r3, [pc, #452]	; (8002eac <HAL_RCC_OscConfig+0x4d8>)
 8002ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cea:	4a70      	ldr	r2, [pc, #448]	; (8002eac <HAL_RCC_OscConfig+0x4d8>)
 8002cec:	f023 0301 	bic.w	r3, r3, #1
 8002cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf2:	4b6e      	ldr	r3, [pc, #440]	; (8002eac <HAL_RCC_OscConfig+0x4d8>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf6:	4a6d      	ldr	r2, [pc, #436]	; (8002eac <HAL_RCC_OscConfig+0x4d8>)
 8002cf8:	f023 0304 	bic.w	r3, r3, #4
 8002cfc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d015      	beq.n	8002d32 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d06:	f7fe fd37 	bl	8001778 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d0c:	e00a      	b.n	8002d24 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d0e:	f7fe fd33 	bl	8001778 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e0bc      	b.n	8002e9e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d24:	4b61      	ldr	r3, [pc, #388]	; (8002eac <HAL_RCC_OscConfig+0x4d8>)
 8002d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0ee      	beq.n	8002d0e <HAL_RCC_OscConfig+0x33a>
 8002d30:	e014      	b.n	8002d5c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d32:	f7fe fd21 	bl	8001778 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d38:	e00a      	b.n	8002d50 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d3a:	f7fe fd1d 	bl	8001778 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e0a6      	b.n	8002e9e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d50:	4b56      	ldr	r3, [pc, #344]	; (8002eac <HAL_RCC_OscConfig+0x4d8>)
 8002d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1ee      	bne.n	8002d3a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d5c:	7dfb      	ldrb	r3, [r7, #23]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d105      	bne.n	8002d6e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d62:	4b52      	ldr	r3, [pc, #328]	; (8002eac <HAL_RCC_OscConfig+0x4d8>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	4a51      	ldr	r2, [pc, #324]	; (8002eac <HAL_RCC_OscConfig+0x4d8>)
 8002d68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 8092 	beq.w	8002e9c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d78:	4b4c      	ldr	r3, [pc, #304]	; (8002eac <HAL_RCC_OscConfig+0x4d8>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 030c 	and.w	r3, r3, #12
 8002d80:	2b08      	cmp	r3, #8
 8002d82:	d05c      	beq.n	8002e3e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d141      	bne.n	8002e10 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d8c:	4b48      	ldr	r3, [pc, #288]	; (8002eb0 <HAL_RCC_OscConfig+0x4dc>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d92:	f7fe fcf1 	bl	8001778 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d9a:	f7fe fced 	bl	8001778 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e078      	b.n	8002e9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dac:	4b3f      	ldr	r3, [pc, #252]	; (8002eac <HAL_RCC_OscConfig+0x4d8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f0      	bne.n	8002d9a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69da      	ldr	r2, [r3, #28]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	019b      	lsls	r3, r3, #6
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dce:	085b      	lsrs	r3, r3, #1
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	041b      	lsls	r3, r3, #16
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dda:	061b      	lsls	r3, r3, #24
 8002ddc:	4933      	ldr	r1, [pc, #204]	; (8002eac <HAL_RCC_OscConfig+0x4d8>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002de2:	4b33      	ldr	r3, [pc, #204]	; (8002eb0 <HAL_RCC_OscConfig+0x4dc>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de8:	f7fe fcc6 	bl	8001778 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df0:	f7fe fcc2 	bl	8001778 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e04d      	b.n	8002e9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e02:	4b2a      	ldr	r3, [pc, #168]	; (8002eac <HAL_RCC_OscConfig+0x4d8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0f0      	beq.n	8002df0 <HAL_RCC_OscConfig+0x41c>
 8002e0e:	e045      	b.n	8002e9c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e10:	4b27      	ldr	r3, [pc, #156]	; (8002eb0 <HAL_RCC_OscConfig+0x4dc>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e16:	f7fe fcaf 	bl	8001778 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e1e:	f7fe fcab 	bl	8001778 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e036      	b.n	8002e9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e30:	4b1e      	ldr	r3, [pc, #120]	; (8002eac <HAL_RCC_OscConfig+0x4d8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1f0      	bne.n	8002e1e <HAL_RCC_OscConfig+0x44a>
 8002e3c:	e02e      	b.n	8002e9c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e029      	b.n	8002e9e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e4a:	4b18      	ldr	r3, [pc, #96]	; (8002eac <HAL_RCC_OscConfig+0x4d8>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d11c      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d115      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e72:	4013      	ands	r3, r2
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d10d      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d106      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d001      	beq.n	8002e9c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e000      	b.n	8002e9e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40007000 	.word	0x40007000
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	42470060 	.word	0x42470060

08002eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0cc      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b68      	ldr	r3, [pc, #416]	; (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d90c      	bls.n	8002ef0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	4b65      	ldr	r3, [pc, #404]	; (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	4b63      	ldr	r3, [pc, #396]	; (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e0b8      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d020      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f08:	4b59      	ldr	r3, [pc, #356]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	4a58      	ldr	r2, [pc, #352]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f20:	4b53      	ldr	r3, [pc, #332]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	4a52      	ldr	r2, [pc, #328]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f2c:	4b50      	ldr	r3, [pc, #320]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	494d      	ldr	r1, [pc, #308]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d044      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d107      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f52:	4b47      	ldr	r3, [pc, #284]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d119      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e07f      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d003      	beq.n	8002f72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d107      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f72:	4b3f      	ldr	r3, [pc, #252]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d109      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e06f      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f82:	4b3b      	ldr	r3, [pc, #236]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e067      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f92:	4b37      	ldr	r3, [pc, #220]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f023 0203 	bic.w	r2, r3, #3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	4934      	ldr	r1, [pc, #208]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fa4:	f7fe fbe8 	bl	8001778 <HAL_GetTick>
 8002fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002faa:	e00a      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fac:	f7fe fbe4 	bl	8001778 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e04f      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc2:	4b2b      	ldr	r3, [pc, #172]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 020c 	and.w	r2, r3, #12
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d1eb      	bne.n	8002fac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd4:	4b25      	ldr	r3, [pc, #148]	; (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 030f 	and.w	r3, r3, #15
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d20c      	bcs.n	8002ffc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe2:	4b22      	ldr	r3, [pc, #136]	; (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fea:	4b20      	ldr	r3, [pc, #128]	; (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e032      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	d008      	beq.n	800301a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003008:	4b19      	ldr	r3, [pc, #100]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4916      	ldr	r1, [pc, #88]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	4313      	orrs	r3, r2
 8003018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	2b00      	cmp	r3, #0
 8003024:	d009      	beq.n	800303a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003026:	4b12      	ldr	r3, [pc, #72]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	490e      	ldr	r1, [pc, #56]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	4313      	orrs	r3, r2
 8003038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800303a:	f000 f821 	bl	8003080 <HAL_RCC_GetSysClockFreq>
 800303e:	4601      	mov	r1, r0
 8003040:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	091b      	lsrs	r3, r3, #4
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	4a0a      	ldr	r2, [pc, #40]	; (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 800304c:	5cd3      	ldrb	r3, [r2, r3]
 800304e:	fa21 f303 	lsr.w	r3, r1, r3
 8003052:	4a09      	ldr	r2, [pc, #36]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003056:	4b09      	ldr	r3, [pc, #36]	; (800307c <HAL_RCC_ClockConfig+0x1c8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f7fe fa5a 	bl	8001514 <HAL_InitTick>

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40023c00 	.word	0x40023c00
 8003070:	40023800 	.word	0x40023800
 8003074:	080073e8 	.word	0x080073e8
 8003078:	20000000 	.word	0x20000000
 800307c:	20000004 	.word	0x20000004

08003080 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	607b      	str	r3, [r7, #4]
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	2300      	movs	r3, #0
 8003090:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003092:	2300      	movs	r3, #0
 8003094:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003096:	4b50      	ldr	r3, [pc, #320]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 030c 	and.w	r3, r3, #12
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d007      	beq.n	80030b2 <HAL_RCC_GetSysClockFreq+0x32>
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d008      	beq.n	80030b8 <HAL_RCC_GetSysClockFreq+0x38>
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f040 808d 	bne.w	80031c6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030ac:	4b4b      	ldr	r3, [pc, #300]	; (80031dc <HAL_RCC_GetSysClockFreq+0x15c>)
 80030ae:	60bb      	str	r3, [r7, #8]
       break;
 80030b0:	e08c      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030b2:	4b4b      	ldr	r3, [pc, #300]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80030b4:	60bb      	str	r3, [r7, #8]
      break;
 80030b6:	e089      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030b8:	4b47      	ldr	r3, [pc, #284]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030c2:	4b45      	ldr	r3, [pc, #276]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d023      	beq.n	8003116 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ce:	4b42      	ldr	r3, [pc, #264]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	099b      	lsrs	r3, r3, #6
 80030d4:	f04f 0400 	mov.w	r4, #0
 80030d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	ea03 0501 	and.w	r5, r3, r1
 80030e4:	ea04 0602 	and.w	r6, r4, r2
 80030e8:	4a3d      	ldr	r2, [pc, #244]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80030ea:	fb02 f106 	mul.w	r1, r2, r6
 80030ee:	2200      	movs	r2, #0
 80030f0:	fb02 f205 	mul.w	r2, r2, r5
 80030f4:	440a      	add	r2, r1
 80030f6:	493a      	ldr	r1, [pc, #232]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80030f8:	fba5 0101 	umull	r0, r1, r5, r1
 80030fc:	1853      	adds	r3, r2, r1
 80030fe:	4619      	mov	r1, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f04f 0400 	mov.w	r4, #0
 8003106:	461a      	mov	r2, r3
 8003108:	4623      	mov	r3, r4
 800310a:	f7fd fd05 	bl	8000b18 <__aeabi_uldivmod>
 800310e:	4603      	mov	r3, r0
 8003110:	460c      	mov	r4, r1
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	e049      	b.n	80031aa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003116:	4b30      	ldr	r3, [pc, #192]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	099b      	lsrs	r3, r3, #6
 800311c:	f04f 0400 	mov.w	r4, #0
 8003120:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	ea03 0501 	and.w	r5, r3, r1
 800312c:	ea04 0602 	and.w	r6, r4, r2
 8003130:	4629      	mov	r1, r5
 8003132:	4632      	mov	r2, r6
 8003134:	f04f 0300 	mov.w	r3, #0
 8003138:	f04f 0400 	mov.w	r4, #0
 800313c:	0154      	lsls	r4, r2, #5
 800313e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003142:	014b      	lsls	r3, r1, #5
 8003144:	4619      	mov	r1, r3
 8003146:	4622      	mov	r2, r4
 8003148:	1b49      	subs	r1, r1, r5
 800314a:	eb62 0206 	sbc.w	r2, r2, r6
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	f04f 0400 	mov.w	r4, #0
 8003156:	0194      	lsls	r4, r2, #6
 8003158:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800315c:	018b      	lsls	r3, r1, #6
 800315e:	1a5b      	subs	r3, r3, r1
 8003160:	eb64 0402 	sbc.w	r4, r4, r2
 8003164:	f04f 0100 	mov.w	r1, #0
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	00e2      	lsls	r2, r4, #3
 800316e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003172:	00d9      	lsls	r1, r3, #3
 8003174:	460b      	mov	r3, r1
 8003176:	4614      	mov	r4, r2
 8003178:	195b      	adds	r3, r3, r5
 800317a:	eb44 0406 	adc.w	r4, r4, r6
 800317e:	f04f 0100 	mov.w	r1, #0
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	02a2      	lsls	r2, r4, #10
 8003188:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800318c:	0299      	lsls	r1, r3, #10
 800318e:	460b      	mov	r3, r1
 8003190:	4614      	mov	r4, r2
 8003192:	4618      	mov	r0, r3
 8003194:	4621      	mov	r1, r4
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f04f 0400 	mov.w	r4, #0
 800319c:	461a      	mov	r2, r3
 800319e:	4623      	mov	r3, r4
 80031a0:	f7fd fcba 	bl	8000b18 <__aeabi_uldivmod>
 80031a4:	4603      	mov	r3, r0
 80031a6:	460c      	mov	r4, r1
 80031a8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031aa:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	0c1b      	lsrs	r3, r3, #16
 80031b0:	f003 0303 	and.w	r3, r3, #3
 80031b4:	3301      	adds	r3, #1
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c2:	60bb      	str	r3, [r7, #8]
      break;
 80031c4:	e002      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031c6:	4b05      	ldr	r3, [pc, #20]	; (80031dc <HAL_RCC_GetSysClockFreq+0x15c>)
 80031c8:	60bb      	str	r3, [r7, #8]
      break;
 80031ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031cc:	68bb      	ldr	r3, [r7, #8]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40023800 	.word	0x40023800
 80031dc:	00f42400 	.word	0x00f42400
 80031e0:	017d7840 	.word	0x017d7840

080031e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e8:	4b03      	ldr	r3, [pc, #12]	; (80031f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031ea:	681b      	ldr	r3, [r3, #0]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	20000000 	.word	0x20000000

080031fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003200:	f7ff fff0 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 8003204:	4601      	mov	r1, r0
 8003206:	4b05      	ldr	r3, [pc, #20]	; (800321c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	0a9b      	lsrs	r3, r3, #10
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	4a03      	ldr	r2, [pc, #12]	; (8003220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003212:	5cd3      	ldrb	r3, [r2, r3]
 8003214:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003218:	4618      	mov	r0, r3
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40023800 	.word	0x40023800
 8003220:	080073f8 	.word	0x080073f8

08003224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003228:	f7ff ffdc 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 800322c:	4601      	mov	r1, r0
 800322e:	4b05      	ldr	r3, [pc, #20]	; (8003244 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	0b5b      	lsrs	r3, r3, #13
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	4a03      	ldr	r2, [pc, #12]	; (8003248 <HAL_RCC_GetPCLK2Freq+0x24>)
 800323a:	5cd3      	ldrb	r3, [r2, r3]
 800323c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003240:	4618      	mov	r0, r3
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40023800 	.word	0x40023800
 8003248:	080073f8 	.word	0x080073f8

0800324c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	220f      	movs	r2, #15
 800325a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800325c:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <HAL_RCC_GetClockConfig+0x5c>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f003 0203 	and.w	r2, r3, #3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003268:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <HAL_RCC_GetClockConfig+0x5c>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003274:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <HAL_RCC_GetClockConfig+0x5c>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003280:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <HAL_RCC_GetClockConfig+0x5c>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	08db      	lsrs	r3, r3, #3
 8003286:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800328e:	4b07      	ldr	r3, [pc, #28]	; (80032ac <HAL_RCC_GetClockConfig+0x60>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 020f 	and.w	r2, r3, #15
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	601a      	str	r2, [r3, #0]
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40023800 	.word	0x40023800
 80032ac:	40023c00 	.word	0x40023c00

080032b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e01d      	b.n	80032fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d106      	bne.n	80032dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f815 	bl	8003306 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3304      	adds	r3, #4
 80032ec:	4619      	mov	r1, r3
 80032ee:	4610      	mov	r0, r2
 80032f0:	f000 f968 	bl	80035c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800331a:	b480      	push	{r7}
 800331c:	b085      	sub	sp, #20
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f042 0201 	orr.w	r2, r2, #1
 8003330:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2b06      	cmp	r3, #6
 8003342:	d007      	beq.n	8003354 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b082      	sub	sp, #8
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b02      	cmp	r3, #2
 8003376:	d122      	bne.n	80033be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b02      	cmp	r3, #2
 8003384:	d11b      	bne.n	80033be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f06f 0202 	mvn.w	r2, #2
 800338e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	f003 0303 	and.w	r3, r3, #3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 f8ee 	bl	8003586 <HAL_TIM_IC_CaptureCallback>
 80033aa:	e005      	b.n	80033b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f8e0 	bl	8003572 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f8f1 	bl	800359a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d122      	bne.n	8003412 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d11b      	bne.n	8003412 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f06f 0204 	mvn.w	r2, #4
 80033e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f8c4 	bl	8003586 <HAL_TIM_IC_CaptureCallback>
 80033fe:	e005      	b.n	800340c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f8b6 	bl	8003572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f8c7 	bl	800359a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b08      	cmp	r3, #8
 800341e:	d122      	bne.n	8003466 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b08      	cmp	r3, #8
 800342c:	d11b      	bne.n	8003466 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f06f 0208 	mvn.w	r2, #8
 8003436:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2204      	movs	r2, #4
 800343c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f89a 	bl	8003586 <HAL_TIM_IC_CaptureCallback>
 8003452:	e005      	b.n	8003460 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f88c 	bl	8003572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f89d 	bl	800359a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	f003 0310 	and.w	r3, r3, #16
 8003470:	2b10      	cmp	r3, #16
 8003472:	d122      	bne.n	80034ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b10      	cmp	r3, #16
 8003480:	d11b      	bne.n	80034ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f06f 0210 	mvn.w	r2, #16
 800348a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2208      	movs	r2, #8
 8003490:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f870 	bl	8003586 <HAL_TIM_IC_CaptureCallback>
 80034a6:	e005      	b.n	80034b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f862 	bl	8003572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f873 	bl	800359a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d10e      	bne.n	80034e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d107      	bne.n	80034e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f06f 0201 	mvn.w	r2, #1
 80034de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7fd fea1 	bl	8001228 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f0:	2b80      	cmp	r3, #128	; 0x80
 80034f2:	d10e      	bne.n	8003512 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fe:	2b80      	cmp	r3, #128	; 0x80
 8003500:	d107      	bne.n	8003512 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800350a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f8e3 	bl	80036d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351c:	2b40      	cmp	r3, #64	; 0x40
 800351e:	d10e      	bne.n	800353e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352a:	2b40      	cmp	r3, #64	; 0x40
 800352c:	d107      	bne.n	800353e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f838 	bl	80035ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	2b20      	cmp	r3, #32
 800354a:	d10e      	bne.n	800356a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f003 0320 	and.w	r3, r3, #32
 8003556:	2b20      	cmp	r3, #32
 8003558:	d107      	bne.n	800356a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f06f 0220 	mvn.w	r2, #32
 8003562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f8ad 	bl	80036c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800356a:	bf00      	nop
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
	...

080035c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a34      	ldr	r2, [pc, #208]	; (80036a8 <TIM_Base_SetConfig+0xe4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d00f      	beq.n	80035fc <TIM_Base_SetConfig+0x38>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e2:	d00b      	beq.n	80035fc <TIM_Base_SetConfig+0x38>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a31      	ldr	r2, [pc, #196]	; (80036ac <TIM_Base_SetConfig+0xe8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d007      	beq.n	80035fc <TIM_Base_SetConfig+0x38>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a30      	ldr	r2, [pc, #192]	; (80036b0 <TIM_Base_SetConfig+0xec>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d003      	beq.n	80035fc <TIM_Base_SetConfig+0x38>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a2f      	ldr	r2, [pc, #188]	; (80036b4 <TIM_Base_SetConfig+0xf0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d108      	bne.n	800360e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	4313      	orrs	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a25      	ldr	r2, [pc, #148]	; (80036a8 <TIM_Base_SetConfig+0xe4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d01b      	beq.n	800364e <TIM_Base_SetConfig+0x8a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800361c:	d017      	beq.n	800364e <TIM_Base_SetConfig+0x8a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a22      	ldr	r2, [pc, #136]	; (80036ac <TIM_Base_SetConfig+0xe8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d013      	beq.n	800364e <TIM_Base_SetConfig+0x8a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a21      	ldr	r2, [pc, #132]	; (80036b0 <TIM_Base_SetConfig+0xec>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d00f      	beq.n	800364e <TIM_Base_SetConfig+0x8a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a20      	ldr	r2, [pc, #128]	; (80036b4 <TIM_Base_SetConfig+0xf0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00b      	beq.n	800364e <TIM_Base_SetConfig+0x8a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a1f      	ldr	r2, [pc, #124]	; (80036b8 <TIM_Base_SetConfig+0xf4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d007      	beq.n	800364e <TIM_Base_SetConfig+0x8a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a1e      	ldr	r2, [pc, #120]	; (80036bc <TIM_Base_SetConfig+0xf8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d003      	beq.n	800364e <TIM_Base_SetConfig+0x8a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a1d      	ldr	r2, [pc, #116]	; (80036c0 <TIM_Base_SetConfig+0xfc>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d108      	bne.n	8003660 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	4313      	orrs	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a08      	ldr	r2, [pc, #32]	; (80036a8 <TIM_Base_SetConfig+0xe4>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d103      	bne.n	8003694 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	615a      	str	r2, [r3, #20]
}
 800369a:	bf00      	nop
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40010000 	.word	0x40010000
 80036ac:	40000400 	.word	0x40000400
 80036b0:	40000800 	.word	0x40000800
 80036b4:	40000c00 	.word	0x40000c00
 80036b8:	40014000 	.word	0x40014000
 80036bc:	40014400 	.word	0x40014400
 80036c0:	40014800 	.word	0x40014800

080036c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e03f      	b.n	800377e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d106      	bne.n	8003718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fd fe7c 	bl	8001410 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2224      	movs	r2, #36	; 0x24
 800371c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800372e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 fb41 	bl	8003db8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003744:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695a      	ldr	r2, [r3, #20]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003754:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003764:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b088      	sub	sp, #32
 800378a:	af02      	add	r7, sp, #8
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	603b      	str	r3, [r7, #0]
 8003792:	4613      	mov	r3, r2
 8003794:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	f040 8083 	bne.w	80038ae <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <HAL_UART_Transmit+0x2e>
 80037ae:	88fb      	ldrh	r3, [r7, #6]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e07b      	b.n	80038b0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_UART_Transmit+0x40>
 80037c2:	2302      	movs	r3, #2
 80037c4:	e074      	b.n	80038b0 <HAL_UART_Transmit+0x12a>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2221      	movs	r2, #33	; 0x21
 80037d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80037dc:	f7fd ffcc 	bl	8001778 <HAL_GetTick>
 80037e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	88fa      	ldrh	r2, [r7, #6]
 80037e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	88fa      	ldrh	r2, [r7, #6]
 80037ec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80037f6:	e042      	b.n	800387e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	3b01      	subs	r3, #1
 8003800:	b29a      	uxth	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800380e:	d122      	bne.n	8003856 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	2200      	movs	r2, #0
 8003818:	2180      	movs	r1, #128	; 0x80
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f960 	bl	8003ae0 <UART_WaitOnFlagUntilTimeout>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e042      	b.n	80038b0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800383c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d103      	bne.n	800384e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	3302      	adds	r3, #2
 800384a:	60bb      	str	r3, [r7, #8]
 800384c:	e017      	b.n	800387e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	3301      	adds	r3, #1
 8003852:	60bb      	str	r3, [r7, #8]
 8003854:	e013      	b.n	800387e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2200      	movs	r2, #0
 800385e:	2180      	movs	r1, #128	; 0x80
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 f93d 	bl	8003ae0 <UART_WaitOnFlagUntilTimeout>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e01f      	b.n	80038b0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	60ba      	str	r2, [r7, #8]
 8003876:	781a      	ldrb	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003882:	b29b      	uxth	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1b7      	bne.n	80037f8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	2200      	movs	r2, #0
 8003890:	2140      	movs	r1, #64	; 0x40
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 f924 	bl	8003ae0 <UART_WaitOnFlagUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e006      	b.n	80038b0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2220      	movs	r2, #32
 80038a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	e000      	b.n	80038b0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80038ae:	2302      	movs	r3, #2
  }
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b088      	sub	sp, #32
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80038d8:	2300      	movs	r3, #0
 80038da:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80038dc:	2300      	movs	r3, #0
 80038de:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10d      	bne.n	800390a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d008      	beq.n	800390a <HAL_UART_IRQHandler+0x52>
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f9d6 	bl	8003cb4 <UART_Receive_IT>
      return;
 8003908:	e0d1      	b.n	8003aae <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 80b0 	beq.w	8003a72 <HAL_UART_IRQHandler+0x1ba>
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b00      	cmp	r3, #0
 800391a:	d105      	bne.n	8003928 <HAL_UART_IRQHandler+0x70>
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 80a5 	beq.w	8003a72 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_UART_IRQHandler+0x90>
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003940:	f043 0201 	orr.w	r2, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f003 0304 	and.w	r3, r3, #4
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <HAL_UART_IRQHandler+0xb0>
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003960:	f043 0202 	orr.w	r2, r3, #2
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <HAL_UART_IRQHandler+0xd0>
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003980:	f043 0204 	orr.w	r2, r3, #4
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00f      	beq.n	80039b2 <HAL_UART_IRQHandler+0xfa>
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b00      	cmp	r3, #0
 800399a:	d104      	bne.n	80039a6 <HAL_UART_IRQHandler+0xee>
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d005      	beq.n	80039b2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039aa:	f043 0208 	orr.w	r2, r3, #8
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d078      	beq.n	8003aac <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	f003 0320 	and.w	r3, r3, #32
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d007      	beq.n	80039d4 <HAL_UART_IRQHandler+0x11c>
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	f003 0320 	and.w	r3, r3, #32
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f970 	bl	8003cb4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039de:	2b40      	cmp	r3, #64	; 0x40
 80039e0:	bf0c      	ite	eq
 80039e2:	2301      	moveq	r3, #1
 80039e4:	2300      	movne	r3, #0
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d102      	bne.n	80039fc <HAL_UART_IRQHandler+0x144>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d031      	beq.n	8003a60 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f8b9 	bl	8003b74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0c:	2b40      	cmp	r3, #64	; 0x40
 8003a0e:	d123      	bne.n	8003a58 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695a      	ldr	r2, [r3, #20]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a1e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d013      	beq.n	8003a50 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2c:	4a21      	ldr	r2, [pc, #132]	; (8003ab4 <HAL_UART_IRQHandler+0x1fc>)
 8003a2e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fe fa9d 	bl	8001f74 <HAL_DMA_Abort_IT>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d016      	beq.n	8003a6e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a4e:	e00e      	b.n	8003a6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f83b 	bl	8003acc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a56:	e00a      	b.n	8003a6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f837 	bl	8003acc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a5e:	e006      	b.n	8003a6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 f833 	bl	8003acc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003a6c:	e01e      	b.n	8003aac <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a6e:	bf00      	nop
    return;
 8003a70:	e01c      	b.n	8003aac <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d008      	beq.n	8003a8e <HAL_UART_IRQHandler+0x1d6>
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f8a6 	bl	8003bd8 <UART_Transmit_IT>
    return;
 8003a8c:	e00f      	b.n	8003aae <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <HAL_UART_IRQHandler+0x1f6>
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d005      	beq.n	8003aae <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f8ee 	bl	8003c84 <UART_EndTransmit_IT>
    return;
 8003aa8:	bf00      	nop
 8003aaa:	e000      	b.n	8003aae <HAL_UART_IRQHandler+0x1f6>
    return;
 8003aac:	bf00      	nop
  }
}
 8003aae:	3720      	adds	r7, #32
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	08003bb1 	.word	0x08003bb1

08003ab8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	4613      	mov	r3, r2
 8003aee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003af0:	e02c      	b.n	8003b4c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af8:	d028      	beq.n	8003b4c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d007      	beq.n	8003b10 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b00:	f7fd fe3a 	bl	8001778 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d21d      	bcs.n	8003b4c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b1e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695a      	ldr	r2, [r3, #20]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0201 	bic.w	r2, r2, #1
 8003b2e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e00f      	b.n	8003b6c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	4013      	ands	r3, r2
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	bf0c      	ite	eq
 8003b5c:	2301      	moveq	r3, #1
 8003b5e:	2300      	movne	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	461a      	mov	r2, r3
 8003b64:	79fb      	ldrb	r3, [r7, #7]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d0c3      	beq.n	8003af2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b8a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695a      	ldr	r2, [r3, #20]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f7ff ff7e 	bl	8003acc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bd0:	bf00      	nop
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b21      	cmp	r3, #33	; 0x21
 8003bea:	d144      	bne.n	8003c76 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf4:	d11a      	bne.n	8003c2c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	461a      	mov	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c0a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d105      	bne.n	8003c20 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	1c9a      	adds	r2, r3, #2
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	621a      	str	r2, [r3, #32]
 8003c1e:	e00e      	b.n	8003c3e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	621a      	str	r2, [r3, #32]
 8003c2a:	e008      	b.n	8003c3e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	1c59      	adds	r1, r3, #1
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6211      	str	r1, [r2, #32]
 8003c36:	781a      	ldrb	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10f      	bne.n	8003c72 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c60:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c70:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	e000      	b.n	8003c78 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003c76:	2302      	movs	r3, #2
  }
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68da      	ldr	r2, [r3, #12]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c9a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7ff ff07 	bl	8003ab8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b22      	cmp	r3, #34	; 0x22
 8003cc6:	d171      	bne.n	8003dac <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd0:	d123      	bne.n	8003d1a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10e      	bne.n	8003cfe <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf6:	1c9a      	adds	r2, r3, #2
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	629a      	str	r2, [r3, #40]	; 0x28
 8003cfc:	e029      	b.n	8003d52 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	629a      	str	r2, [r3, #40]	; 0x28
 8003d18:	e01b      	b.n	8003d52 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10a      	bne.n	8003d38 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6858      	ldr	r0, [r3, #4]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2c:	1c59      	adds	r1, r3, #1
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6291      	str	r1, [r2, #40]	; 0x28
 8003d32:	b2c2      	uxtb	r2, r0
 8003d34:	701a      	strb	r2, [r3, #0]
 8003d36:	e00c      	b.n	8003d52 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d44:	1c58      	adds	r0, r3, #1
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	6288      	str	r0, [r1, #40]	; 0x28
 8003d4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	4619      	mov	r1, r3
 8003d60:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d120      	bne.n	8003da8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0220 	bic.w	r2, r2, #32
 8003d74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68da      	ldr	r2, [r3, #12]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695a      	ldr	r2, [r3, #20]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0201 	bic.w	r2, r2, #1
 8003d94:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7fd fa28 	bl	80011f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003da4:	2300      	movs	r3, #0
 8003da6:	e002      	b.n	8003dae <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003da8:	2300      	movs	r3, #0
 8003daa:	e000      	b.n	8003dae <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003dac:	2302      	movs	r3, #2
  }
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
	...

08003db8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dbc:	b085      	sub	sp, #20
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	431a      	orrs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003dfa:	f023 030c 	bic.w	r3, r3, #12
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6812      	ldr	r2, [r2, #0]
 8003e02:	68f9      	ldr	r1, [r7, #12]
 8003e04:	430b      	orrs	r3, r1
 8003e06:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699a      	ldr	r2, [r3, #24]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e26:	f040 818b 	bne.w	8004140 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4ac1      	ldr	r2, [pc, #772]	; (8004134 <UART_SetConfig+0x37c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d005      	beq.n	8003e40 <UART_SetConfig+0x88>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4abf      	ldr	r2, [pc, #764]	; (8004138 <UART_SetConfig+0x380>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	f040 80bd 	bne.w	8003fba <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e40:	f7ff f9f0 	bl	8003224 <HAL_RCC_GetPCLK2Freq>
 8003e44:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	461d      	mov	r5, r3
 8003e4a:	f04f 0600 	mov.w	r6, #0
 8003e4e:	46a8      	mov	r8, r5
 8003e50:	46b1      	mov	r9, r6
 8003e52:	eb18 0308 	adds.w	r3, r8, r8
 8003e56:	eb49 0409 	adc.w	r4, r9, r9
 8003e5a:	4698      	mov	r8, r3
 8003e5c:	46a1      	mov	r9, r4
 8003e5e:	eb18 0805 	adds.w	r8, r8, r5
 8003e62:	eb49 0906 	adc.w	r9, r9, r6
 8003e66:	f04f 0100 	mov.w	r1, #0
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e72:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e76:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e7a:	4688      	mov	r8, r1
 8003e7c:	4691      	mov	r9, r2
 8003e7e:	eb18 0005 	adds.w	r0, r8, r5
 8003e82:	eb49 0106 	adc.w	r1, r9, r6
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	461d      	mov	r5, r3
 8003e8c:	f04f 0600 	mov.w	r6, #0
 8003e90:	196b      	adds	r3, r5, r5
 8003e92:	eb46 0406 	adc.w	r4, r6, r6
 8003e96:	461a      	mov	r2, r3
 8003e98:	4623      	mov	r3, r4
 8003e9a:	f7fc fe3d 	bl	8000b18 <__aeabi_uldivmod>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	460c      	mov	r4, r1
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	4ba5      	ldr	r3, [pc, #660]	; (800413c <UART_SetConfig+0x384>)
 8003ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8003eaa:	095b      	lsrs	r3, r3, #5
 8003eac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	461d      	mov	r5, r3
 8003eb4:	f04f 0600 	mov.w	r6, #0
 8003eb8:	46a9      	mov	r9, r5
 8003eba:	46b2      	mov	sl, r6
 8003ebc:	eb19 0309 	adds.w	r3, r9, r9
 8003ec0:	eb4a 040a 	adc.w	r4, sl, sl
 8003ec4:	4699      	mov	r9, r3
 8003ec6:	46a2      	mov	sl, r4
 8003ec8:	eb19 0905 	adds.w	r9, r9, r5
 8003ecc:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ed0:	f04f 0100 	mov.w	r1, #0
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003edc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ee0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ee4:	4689      	mov	r9, r1
 8003ee6:	4692      	mov	sl, r2
 8003ee8:	eb19 0005 	adds.w	r0, r9, r5
 8003eec:	eb4a 0106 	adc.w	r1, sl, r6
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	461d      	mov	r5, r3
 8003ef6:	f04f 0600 	mov.w	r6, #0
 8003efa:	196b      	adds	r3, r5, r5
 8003efc:	eb46 0406 	adc.w	r4, r6, r6
 8003f00:	461a      	mov	r2, r3
 8003f02:	4623      	mov	r3, r4
 8003f04:	f7fc fe08 	bl	8000b18 <__aeabi_uldivmod>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	460c      	mov	r4, r1
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4b8b      	ldr	r3, [pc, #556]	; (800413c <UART_SetConfig+0x384>)
 8003f10:	fba3 1302 	umull	r1, r3, r3, r2
 8003f14:	095b      	lsrs	r3, r3, #5
 8003f16:	2164      	movs	r1, #100	; 0x64
 8003f18:	fb01 f303 	mul.w	r3, r1, r3
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	3332      	adds	r3, #50	; 0x32
 8003f22:	4a86      	ldr	r2, [pc, #536]	; (800413c <UART_SetConfig+0x384>)
 8003f24:	fba2 2303 	umull	r2, r3, r2, r3
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f30:	4498      	add	r8, r3
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	461d      	mov	r5, r3
 8003f36:	f04f 0600 	mov.w	r6, #0
 8003f3a:	46a9      	mov	r9, r5
 8003f3c:	46b2      	mov	sl, r6
 8003f3e:	eb19 0309 	adds.w	r3, r9, r9
 8003f42:	eb4a 040a 	adc.w	r4, sl, sl
 8003f46:	4699      	mov	r9, r3
 8003f48:	46a2      	mov	sl, r4
 8003f4a:	eb19 0905 	adds.w	r9, r9, r5
 8003f4e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f52:	f04f 0100 	mov.w	r1, #0
 8003f56:	f04f 0200 	mov.w	r2, #0
 8003f5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f66:	4689      	mov	r9, r1
 8003f68:	4692      	mov	sl, r2
 8003f6a:	eb19 0005 	adds.w	r0, r9, r5
 8003f6e:	eb4a 0106 	adc.w	r1, sl, r6
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	461d      	mov	r5, r3
 8003f78:	f04f 0600 	mov.w	r6, #0
 8003f7c:	196b      	adds	r3, r5, r5
 8003f7e:	eb46 0406 	adc.w	r4, r6, r6
 8003f82:	461a      	mov	r2, r3
 8003f84:	4623      	mov	r3, r4
 8003f86:	f7fc fdc7 	bl	8000b18 <__aeabi_uldivmod>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	460c      	mov	r4, r1
 8003f8e:	461a      	mov	r2, r3
 8003f90:	4b6a      	ldr	r3, [pc, #424]	; (800413c <UART_SetConfig+0x384>)
 8003f92:	fba3 1302 	umull	r1, r3, r3, r2
 8003f96:	095b      	lsrs	r3, r3, #5
 8003f98:	2164      	movs	r1, #100	; 0x64
 8003f9a:	fb01 f303 	mul.w	r3, r1, r3
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	3332      	adds	r3, #50	; 0x32
 8003fa4:	4a65      	ldr	r2, [pc, #404]	; (800413c <UART_SetConfig+0x384>)
 8003fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003faa:	095b      	lsrs	r3, r3, #5
 8003fac:	f003 0207 	and.w	r2, r3, #7
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4442      	add	r2, r8
 8003fb6:	609a      	str	r2, [r3, #8]
 8003fb8:	e26f      	b.n	800449a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fba:	f7ff f91f 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 8003fbe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	461d      	mov	r5, r3
 8003fc4:	f04f 0600 	mov.w	r6, #0
 8003fc8:	46a8      	mov	r8, r5
 8003fca:	46b1      	mov	r9, r6
 8003fcc:	eb18 0308 	adds.w	r3, r8, r8
 8003fd0:	eb49 0409 	adc.w	r4, r9, r9
 8003fd4:	4698      	mov	r8, r3
 8003fd6:	46a1      	mov	r9, r4
 8003fd8:	eb18 0805 	adds.w	r8, r8, r5
 8003fdc:	eb49 0906 	adc.w	r9, r9, r6
 8003fe0:	f04f 0100 	mov.w	r1, #0
 8003fe4:	f04f 0200 	mov.w	r2, #0
 8003fe8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003fec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ff0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ff4:	4688      	mov	r8, r1
 8003ff6:	4691      	mov	r9, r2
 8003ff8:	eb18 0005 	adds.w	r0, r8, r5
 8003ffc:	eb49 0106 	adc.w	r1, r9, r6
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	461d      	mov	r5, r3
 8004006:	f04f 0600 	mov.w	r6, #0
 800400a:	196b      	adds	r3, r5, r5
 800400c:	eb46 0406 	adc.w	r4, r6, r6
 8004010:	461a      	mov	r2, r3
 8004012:	4623      	mov	r3, r4
 8004014:	f7fc fd80 	bl	8000b18 <__aeabi_uldivmod>
 8004018:	4603      	mov	r3, r0
 800401a:	460c      	mov	r4, r1
 800401c:	461a      	mov	r2, r3
 800401e:	4b47      	ldr	r3, [pc, #284]	; (800413c <UART_SetConfig+0x384>)
 8004020:	fba3 2302 	umull	r2, r3, r3, r2
 8004024:	095b      	lsrs	r3, r3, #5
 8004026:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	461d      	mov	r5, r3
 800402e:	f04f 0600 	mov.w	r6, #0
 8004032:	46a9      	mov	r9, r5
 8004034:	46b2      	mov	sl, r6
 8004036:	eb19 0309 	adds.w	r3, r9, r9
 800403a:	eb4a 040a 	adc.w	r4, sl, sl
 800403e:	4699      	mov	r9, r3
 8004040:	46a2      	mov	sl, r4
 8004042:	eb19 0905 	adds.w	r9, r9, r5
 8004046:	eb4a 0a06 	adc.w	sl, sl, r6
 800404a:	f04f 0100 	mov.w	r1, #0
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004056:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800405a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800405e:	4689      	mov	r9, r1
 8004060:	4692      	mov	sl, r2
 8004062:	eb19 0005 	adds.w	r0, r9, r5
 8004066:	eb4a 0106 	adc.w	r1, sl, r6
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	461d      	mov	r5, r3
 8004070:	f04f 0600 	mov.w	r6, #0
 8004074:	196b      	adds	r3, r5, r5
 8004076:	eb46 0406 	adc.w	r4, r6, r6
 800407a:	461a      	mov	r2, r3
 800407c:	4623      	mov	r3, r4
 800407e:	f7fc fd4b 	bl	8000b18 <__aeabi_uldivmod>
 8004082:	4603      	mov	r3, r0
 8004084:	460c      	mov	r4, r1
 8004086:	461a      	mov	r2, r3
 8004088:	4b2c      	ldr	r3, [pc, #176]	; (800413c <UART_SetConfig+0x384>)
 800408a:	fba3 1302 	umull	r1, r3, r3, r2
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	2164      	movs	r1, #100	; 0x64
 8004092:	fb01 f303 	mul.w	r3, r1, r3
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	3332      	adds	r3, #50	; 0x32
 800409c:	4a27      	ldr	r2, [pc, #156]	; (800413c <UART_SetConfig+0x384>)
 800409e:	fba2 2303 	umull	r2, r3, r2, r3
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040aa:	4498      	add	r8, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	461d      	mov	r5, r3
 80040b0:	f04f 0600 	mov.w	r6, #0
 80040b4:	46a9      	mov	r9, r5
 80040b6:	46b2      	mov	sl, r6
 80040b8:	eb19 0309 	adds.w	r3, r9, r9
 80040bc:	eb4a 040a 	adc.w	r4, sl, sl
 80040c0:	4699      	mov	r9, r3
 80040c2:	46a2      	mov	sl, r4
 80040c4:	eb19 0905 	adds.w	r9, r9, r5
 80040c8:	eb4a 0a06 	adc.w	sl, sl, r6
 80040cc:	f04f 0100 	mov.w	r1, #0
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040e0:	4689      	mov	r9, r1
 80040e2:	4692      	mov	sl, r2
 80040e4:	eb19 0005 	adds.w	r0, r9, r5
 80040e8:	eb4a 0106 	adc.w	r1, sl, r6
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	461d      	mov	r5, r3
 80040f2:	f04f 0600 	mov.w	r6, #0
 80040f6:	196b      	adds	r3, r5, r5
 80040f8:	eb46 0406 	adc.w	r4, r6, r6
 80040fc:	461a      	mov	r2, r3
 80040fe:	4623      	mov	r3, r4
 8004100:	f7fc fd0a 	bl	8000b18 <__aeabi_uldivmod>
 8004104:	4603      	mov	r3, r0
 8004106:	460c      	mov	r4, r1
 8004108:	461a      	mov	r2, r3
 800410a:	4b0c      	ldr	r3, [pc, #48]	; (800413c <UART_SetConfig+0x384>)
 800410c:	fba3 1302 	umull	r1, r3, r3, r2
 8004110:	095b      	lsrs	r3, r3, #5
 8004112:	2164      	movs	r1, #100	; 0x64
 8004114:	fb01 f303 	mul.w	r3, r1, r3
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	3332      	adds	r3, #50	; 0x32
 800411e:	4a07      	ldr	r2, [pc, #28]	; (800413c <UART_SetConfig+0x384>)
 8004120:	fba2 2303 	umull	r2, r3, r2, r3
 8004124:	095b      	lsrs	r3, r3, #5
 8004126:	f003 0207 	and.w	r2, r3, #7
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4442      	add	r2, r8
 8004130:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004132:	e1b2      	b.n	800449a <UART_SetConfig+0x6e2>
 8004134:	40011000 	.word	0x40011000
 8004138:	40011400 	.word	0x40011400
 800413c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4ad7      	ldr	r2, [pc, #860]	; (80044a4 <UART_SetConfig+0x6ec>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d005      	beq.n	8004156 <UART_SetConfig+0x39e>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4ad6      	ldr	r2, [pc, #856]	; (80044a8 <UART_SetConfig+0x6f0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	f040 80d1 	bne.w	80042f8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004156:	f7ff f865 	bl	8003224 <HAL_RCC_GetPCLK2Freq>
 800415a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	469a      	mov	sl, r3
 8004160:	f04f 0b00 	mov.w	fp, #0
 8004164:	46d0      	mov	r8, sl
 8004166:	46d9      	mov	r9, fp
 8004168:	eb18 0308 	adds.w	r3, r8, r8
 800416c:	eb49 0409 	adc.w	r4, r9, r9
 8004170:	4698      	mov	r8, r3
 8004172:	46a1      	mov	r9, r4
 8004174:	eb18 080a 	adds.w	r8, r8, sl
 8004178:	eb49 090b 	adc.w	r9, r9, fp
 800417c:	f04f 0100 	mov.w	r1, #0
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004188:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800418c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004190:	4688      	mov	r8, r1
 8004192:	4691      	mov	r9, r2
 8004194:	eb1a 0508 	adds.w	r5, sl, r8
 8004198:	eb4b 0609 	adc.w	r6, fp, r9
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	4619      	mov	r1, r3
 80041a2:	f04f 0200 	mov.w	r2, #0
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	f04f 0400 	mov.w	r4, #0
 80041ae:	0094      	lsls	r4, r2, #2
 80041b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041b4:	008b      	lsls	r3, r1, #2
 80041b6:	461a      	mov	r2, r3
 80041b8:	4623      	mov	r3, r4
 80041ba:	4628      	mov	r0, r5
 80041bc:	4631      	mov	r1, r6
 80041be:	f7fc fcab 	bl	8000b18 <__aeabi_uldivmod>
 80041c2:	4603      	mov	r3, r0
 80041c4:	460c      	mov	r4, r1
 80041c6:	461a      	mov	r2, r3
 80041c8:	4bb8      	ldr	r3, [pc, #736]	; (80044ac <UART_SetConfig+0x6f4>)
 80041ca:	fba3 2302 	umull	r2, r3, r3, r2
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	469b      	mov	fp, r3
 80041d8:	f04f 0c00 	mov.w	ip, #0
 80041dc:	46d9      	mov	r9, fp
 80041de:	46e2      	mov	sl, ip
 80041e0:	eb19 0309 	adds.w	r3, r9, r9
 80041e4:	eb4a 040a 	adc.w	r4, sl, sl
 80041e8:	4699      	mov	r9, r3
 80041ea:	46a2      	mov	sl, r4
 80041ec:	eb19 090b 	adds.w	r9, r9, fp
 80041f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041f4:	f04f 0100 	mov.w	r1, #0
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004200:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004204:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004208:	4689      	mov	r9, r1
 800420a:	4692      	mov	sl, r2
 800420c:	eb1b 0509 	adds.w	r5, fp, r9
 8004210:	eb4c 060a 	adc.w	r6, ip, sl
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	4619      	mov	r1, r3
 800421a:	f04f 0200 	mov.w	r2, #0
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	f04f 0400 	mov.w	r4, #0
 8004226:	0094      	lsls	r4, r2, #2
 8004228:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800422c:	008b      	lsls	r3, r1, #2
 800422e:	461a      	mov	r2, r3
 8004230:	4623      	mov	r3, r4
 8004232:	4628      	mov	r0, r5
 8004234:	4631      	mov	r1, r6
 8004236:	f7fc fc6f 	bl	8000b18 <__aeabi_uldivmod>
 800423a:	4603      	mov	r3, r0
 800423c:	460c      	mov	r4, r1
 800423e:	461a      	mov	r2, r3
 8004240:	4b9a      	ldr	r3, [pc, #616]	; (80044ac <UART_SetConfig+0x6f4>)
 8004242:	fba3 1302 	umull	r1, r3, r3, r2
 8004246:	095b      	lsrs	r3, r3, #5
 8004248:	2164      	movs	r1, #100	; 0x64
 800424a:	fb01 f303 	mul.w	r3, r1, r3
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	3332      	adds	r3, #50	; 0x32
 8004254:	4a95      	ldr	r2, [pc, #596]	; (80044ac <UART_SetConfig+0x6f4>)
 8004256:	fba2 2303 	umull	r2, r3, r2, r3
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004260:	4498      	add	r8, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	469b      	mov	fp, r3
 8004266:	f04f 0c00 	mov.w	ip, #0
 800426a:	46d9      	mov	r9, fp
 800426c:	46e2      	mov	sl, ip
 800426e:	eb19 0309 	adds.w	r3, r9, r9
 8004272:	eb4a 040a 	adc.w	r4, sl, sl
 8004276:	4699      	mov	r9, r3
 8004278:	46a2      	mov	sl, r4
 800427a:	eb19 090b 	adds.w	r9, r9, fp
 800427e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004282:	f04f 0100 	mov.w	r1, #0
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800428e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004292:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004296:	4689      	mov	r9, r1
 8004298:	4692      	mov	sl, r2
 800429a:	eb1b 0509 	adds.w	r5, fp, r9
 800429e:	eb4c 060a 	adc.w	r6, ip, sl
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	4619      	mov	r1, r3
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	f04f 0400 	mov.w	r4, #0
 80042b4:	0094      	lsls	r4, r2, #2
 80042b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042ba:	008b      	lsls	r3, r1, #2
 80042bc:	461a      	mov	r2, r3
 80042be:	4623      	mov	r3, r4
 80042c0:	4628      	mov	r0, r5
 80042c2:	4631      	mov	r1, r6
 80042c4:	f7fc fc28 	bl	8000b18 <__aeabi_uldivmod>
 80042c8:	4603      	mov	r3, r0
 80042ca:	460c      	mov	r4, r1
 80042cc:	461a      	mov	r2, r3
 80042ce:	4b77      	ldr	r3, [pc, #476]	; (80044ac <UART_SetConfig+0x6f4>)
 80042d0:	fba3 1302 	umull	r1, r3, r3, r2
 80042d4:	095b      	lsrs	r3, r3, #5
 80042d6:	2164      	movs	r1, #100	; 0x64
 80042d8:	fb01 f303 	mul.w	r3, r1, r3
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	3332      	adds	r3, #50	; 0x32
 80042e2:	4a72      	ldr	r2, [pc, #456]	; (80044ac <UART_SetConfig+0x6f4>)
 80042e4:	fba2 2303 	umull	r2, r3, r2, r3
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	f003 020f 	and.w	r2, r3, #15
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4442      	add	r2, r8
 80042f4:	609a      	str	r2, [r3, #8]
 80042f6:	e0d0      	b.n	800449a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80042f8:	f7fe ff80 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 80042fc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	469a      	mov	sl, r3
 8004302:	f04f 0b00 	mov.w	fp, #0
 8004306:	46d0      	mov	r8, sl
 8004308:	46d9      	mov	r9, fp
 800430a:	eb18 0308 	adds.w	r3, r8, r8
 800430e:	eb49 0409 	adc.w	r4, r9, r9
 8004312:	4698      	mov	r8, r3
 8004314:	46a1      	mov	r9, r4
 8004316:	eb18 080a 	adds.w	r8, r8, sl
 800431a:	eb49 090b 	adc.w	r9, r9, fp
 800431e:	f04f 0100 	mov.w	r1, #0
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800432a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800432e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004332:	4688      	mov	r8, r1
 8004334:	4691      	mov	r9, r2
 8004336:	eb1a 0508 	adds.w	r5, sl, r8
 800433a:	eb4b 0609 	adc.w	r6, fp, r9
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	4619      	mov	r1, r3
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	f04f 0300 	mov.w	r3, #0
 800434c:	f04f 0400 	mov.w	r4, #0
 8004350:	0094      	lsls	r4, r2, #2
 8004352:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004356:	008b      	lsls	r3, r1, #2
 8004358:	461a      	mov	r2, r3
 800435a:	4623      	mov	r3, r4
 800435c:	4628      	mov	r0, r5
 800435e:	4631      	mov	r1, r6
 8004360:	f7fc fbda 	bl	8000b18 <__aeabi_uldivmod>
 8004364:	4603      	mov	r3, r0
 8004366:	460c      	mov	r4, r1
 8004368:	461a      	mov	r2, r3
 800436a:	4b50      	ldr	r3, [pc, #320]	; (80044ac <UART_SetConfig+0x6f4>)
 800436c:	fba3 2302 	umull	r2, r3, r3, r2
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	469b      	mov	fp, r3
 800437a:	f04f 0c00 	mov.w	ip, #0
 800437e:	46d9      	mov	r9, fp
 8004380:	46e2      	mov	sl, ip
 8004382:	eb19 0309 	adds.w	r3, r9, r9
 8004386:	eb4a 040a 	adc.w	r4, sl, sl
 800438a:	4699      	mov	r9, r3
 800438c:	46a2      	mov	sl, r4
 800438e:	eb19 090b 	adds.w	r9, r9, fp
 8004392:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004396:	f04f 0100 	mov.w	r1, #0
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043aa:	4689      	mov	r9, r1
 80043ac:	4692      	mov	sl, r2
 80043ae:	eb1b 0509 	adds.w	r5, fp, r9
 80043b2:	eb4c 060a 	adc.w	r6, ip, sl
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	4619      	mov	r1, r3
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	f04f 0400 	mov.w	r4, #0
 80043c8:	0094      	lsls	r4, r2, #2
 80043ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043ce:	008b      	lsls	r3, r1, #2
 80043d0:	461a      	mov	r2, r3
 80043d2:	4623      	mov	r3, r4
 80043d4:	4628      	mov	r0, r5
 80043d6:	4631      	mov	r1, r6
 80043d8:	f7fc fb9e 	bl	8000b18 <__aeabi_uldivmod>
 80043dc:	4603      	mov	r3, r0
 80043de:	460c      	mov	r4, r1
 80043e0:	461a      	mov	r2, r3
 80043e2:	4b32      	ldr	r3, [pc, #200]	; (80044ac <UART_SetConfig+0x6f4>)
 80043e4:	fba3 1302 	umull	r1, r3, r3, r2
 80043e8:	095b      	lsrs	r3, r3, #5
 80043ea:	2164      	movs	r1, #100	; 0x64
 80043ec:	fb01 f303 	mul.w	r3, r1, r3
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	3332      	adds	r3, #50	; 0x32
 80043f6:	4a2d      	ldr	r2, [pc, #180]	; (80044ac <UART_SetConfig+0x6f4>)
 80043f8:	fba2 2303 	umull	r2, r3, r2, r3
 80043fc:	095b      	lsrs	r3, r3, #5
 80043fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004402:	4498      	add	r8, r3
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	469b      	mov	fp, r3
 8004408:	f04f 0c00 	mov.w	ip, #0
 800440c:	46d9      	mov	r9, fp
 800440e:	46e2      	mov	sl, ip
 8004410:	eb19 0309 	adds.w	r3, r9, r9
 8004414:	eb4a 040a 	adc.w	r4, sl, sl
 8004418:	4699      	mov	r9, r3
 800441a:	46a2      	mov	sl, r4
 800441c:	eb19 090b 	adds.w	r9, r9, fp
 8004420:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004424:	f04f 0100 	mov.w	r1, #0
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004430:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004434:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004438:	4689      	mov	r9, r1
 800443a:	4692      	mov	sl, r2
 800443c:	eb1b 0509 	adds.w	r5, fp, r9
 8004440:	eb4c 060a 	adc.w	r6, ip, sl
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4619      	mov	r1, r3
 800444a:	f04f 0200 	mov.w	r2, #0
 800444e:	f04f 0300 	mov.w	r3, #0
 8004452:	f04f 0400 	mov.w	r4, #0
 8004456:	0094      	lsls	r4, r2, #2
 8004458:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800445c:	008b      	lsls	r3, r1, #2
 800445e:	461a      	mov	r2, r3
 8004460:	4623      	mov	r3, r4
 8004462:	4628      	mov	r0, r5
 8004464:	4631      	mov	r1, r6
 8004466:	f7fc fb57 	bl	8000b18 <__aeabi_uldivmod>
 800446a:	4603      	mov	r3, r0
 800446c:	460c      	mov	r4, r1
 800446e:	461a      	mov	r2, r3
 8004470:	4b0e      	ldr	r3, [pc, #56]	; (80044ac <UART_SetConfig+0x6f4>)
 8004472:	fba3 1302 	umull	r1, r3, r3, r2
 8004476:	095b      	lsrs	r3, r3, #5
 8004478:	2164      	movs	r1, #100	; 0x64
 800447a:	fb01 f303 	mul.w	r3, r1, r3
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	3332      	adds	r3, #50	; 0x32
 8004484:	4a09      	ldr	r2, [pc, #36]	; (80044ac <UART_SetConfig+0x6f4>)
 8004486:	fba2 2303 	umull	r2, r3, r2, r3
 800448a:	095b      	lsrs	r3, r3, #5
 800448c:	f003 020f 	and.w	r2, r3, #15
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4442      	add	r2, r8
 8004496:	609a      	str	r2, [r3, #8]
}
 8004498:	e7ff      	b.n	800449a <UART_SetConfig+0x6e2>
 800449a:	bf00      	nop
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044a4:	40011000 	.word	0x40011000
 80044a8:	40011400 	.word	0x40011400
 80044ac:	51eb851f 	.word	0x51eb851f

080044b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	4603      	mov	r3, r0
 80044b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80044be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044c2:	2b84      	cmp	r3, #132	; 0x84
 80044c4:	d005      	beq.n	80044d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80044c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4413      	add	r3, r2
 80044ce:	3303      	adds	r3, #3
 80044d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80044d2:	68fb      	ldr	r3, [r7, #12]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80044e4:	f000 fada 	bl	8004a9c <vTaskStartScheduler>
  
  return osOK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	bd80      	pop	{r7, pc}

080044ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80044ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044f0:	b089      	sub	sp, #36	; 0x24
 80044f2:	af04      	add	r7, sp, #16
 80044f4:	6078      	str	r0, [r7, #4]
 80044f6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d020      	beq.n	8004542 <osThreadCreate+0x54>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d01c      	beq.n	8004542 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685c      	ldr	r4, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681d      	ldr	r5, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691e      	ldr	r6, [r3, #16]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff ffc8 	bl	80044b0 <makeFreeRtosPriority>
 8004520:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800452a:	9202      	str	r2, [sp, #8]
 800452c:	9301      	str	r3, [sp, #4]
 800452e:	9100      	str	r1, [sp, #0]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	4632      	mov	r2, r6
 8004534:	4629      	mov	r1, r5
 8004536:	4620      	mov	r0, r4
 8004538:	f000 f8ed 	bl	8004716 <xTaskCreateStatic>
 800453c:	4603      	mov	r3, r0
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	e01c      	b.n	800457c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685c      	ldr	r4, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800454e:	b29e      	uxth	r6, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff ffaa 	bl	80044b0 <makeFreeRtosPriority>
 800455c:	4602      	mov	r2, r0
 800455e:	f107 030c 	add.w	r3, r7, #12
 8004562:	9301      	str	r3, [sp, #4]
 8004564:	9200      	str	r2, [sp, #0]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	4632      	mov	r2, r6
 800456a:	4629      	mov	r1, r5
 800456c:	4620      	mov	r0, r4
 800456e:	f000 f92c 	bl	80047ca <xTaskCreate>
 8004572:	4603      	mov	r3, r0
 8004574:	2b01      	cmp	r3, #1
 8004576:	d001      	beq.n	800457c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004578:	2300      	movs	r3, #0
 800457a:	e000      	b.n	800457e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800457c:	68fb      	ldr	r3, [r7, #12]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004586 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b084      	sub	sp, #16
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <osDelay+0x16>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	e000      	b.n	800459e <osDelay+0x18>
 800459c:	2301      	movs	r3, #1
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 fa48 	bl	8004a34 <vTaskDelay>
  
  return osOK;
 80045a4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f103 0208 	add.w	r2, r3, #8
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f04f 32ff 	mov.w	r2, #4294967295
 80045c6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f103 0208 	add.w	r2, r3, #8
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f103 0208 	add.w	r2, r3, #8
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	601a      	str	r2, [r3, #0]
}
 8004644:	bf00      	nop
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004666:	d103      	bne.n	8004670 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	e00c      	b.n	800468a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3308      	adds	r3, #8
 8004674:	60fb      	str	r3, [r7, #12]
 8004676:	e002      	b.n	800467e <vListInsert+0x2e>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	429a      	cmp	r2, r3
 8004688:	d2f6      	bcs.n	8004678 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	601a      	str	r2, [r3, #0]
}
 80046b6:	bf00      	nop
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80046c2:	b480      	push	{r7}
 80046c4:	b085      	sub	sp, #20
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6892      	ldr	r2, [r2, #8]
 80046d8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6852      	ldr	r2, [r2, #4]
 80046e2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d103      	bne.n	80046f6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	1e5a      	subs	r2, r3, #1
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004716:	b580      	push	{r7, lr}
 8004718:	b08e      	sub	sp, #56	; 0x38
 800471a:	af04      	add	r7, sp, #16
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	607a      	str	r2, [r7, #4]
 8004722:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004726:	2b00      	cmp	r3, #0
 8004728:	d109      	bne.n	800473e <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800472a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	623b      	str	r3, [r7, #32]
 800473c:	e7fe      	b.n	800473c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800473e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004740:	2b00      	cmp	r3, #0
 8004742:	d109      	bne.n	8004758 <xTaskCreateStatic+0x42>
 8004744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	61fb      	str	r3, [r7, #28]
 8004756:	e7fe      	b.n	8004756 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004758:	2354      	movs	r3, #84	; 0x54
 800475a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	2b54      	cmp	r3, #84	; 0x54
 8004760:	d009      	beq.n	8004776 <xTaskCreateStatic+0x60>
 8004762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004766:	f383 8811 	msr	BASEPRI, r3
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	61bb      	str	r3, [r7, #24]
 8004774:	e7fe      	b.n	8004774 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004776:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477a:	2b00      	cmp	r3, #0
 800477c:	d01e      	beq.n	80047bc <xTaskCreateStatic+0xa6>
 800477e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004780:	2b00      	cmp	r3, #0
 8004782:	d01b      	beq.n	80047bc <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004786:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800478c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	2202      	movs	r2, #2
 8004792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004796:	2300      	movs	r3, #0
 8004798:	9303      	str	r3, [sp, #12]
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	9302      	str	r3, [sp, #8]
 800479e:	f107 0314 	add.w	r3, r7, #20
 80047a2:	9301      	str	r3, [sp, #4]
 80047a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	68b9      	ldr	r1, [r7, #8]
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 f850 	bl	8004854 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047b6:	f000 f8d3 	bl	8004960 <prvAddNewTaskToReadyList>
 80047ba:	e001      	b.n	80047c0 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80047bc:	2300      	movs	r3, #0
 80047be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80047c0:	697b      	ldr	r3, [r7, #20]
	}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3728      	adds	r7, #40	; 0x28
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b08c      	sub	sp, #48	; 0x30
 80047ce:	af04      	add	r7, sp, #16
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	603b      	str	r3, [r7, #0]
 80047d6:	4613      	mov	r3, r2
 80047d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80047da:	88fb      	ldrh	r3, [r7, #6]
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 feb0 	bl	8005544 <pvPortMalloc>
 80047e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00e      	beq.n	800480a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80047ec:	2054      	movs	r0, #84	; 0x54
 80047ee:	f000 fea9 	bl	8005544 <pvPortMalloc>
 80047f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	631a      	str	r2, [r3, #48]	; 0x30
 8004800:	e005      	b.n	800480e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004802:	6978      	ldr	r0, [r7, #20]
 8004804:	f000 ff60 	bl	80056c8 <vPortFree>
 8004808:	e001      	b.n	800480e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800480a:	2300      	movs	r3, #0
 800480c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d017      	beq.n	8004844 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800481c:	88fa      	ldrh	r2, [r7, #6]
 800481e:	2300      	movs	r3, #0
 8004820:	9303      	str	r3, [sp, #12]
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	9302      	str	r3, [sp, #8]
 8004826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004828:	9301      	str	r3, [sp, #4]
 800482a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68b9      	ldr	r1, [r7, #8]
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 f80e 	bl	8004854 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004838:	69f8      	ldr	r0, [r7, #28]
 800483a:	f000 f891 	bl	8004960 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800483e:	2301      	movs	r3, #1
 8004840:	61bb      	str	r3, [r7, #24]
 8004842:	e002      	b.n	800484a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004844:	f04f 33ff 	mov.w	r3, #4294967295
 8004848:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800484a:	69bb      	ldr	r3, [r7, #24]
	}
 800484c:	4618      	mov	r0, r3
 800484e:	3720      	adds	r7, #32
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b088      	sub	sp, #32
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
 8004860:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004864:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800486c:	3b01      	subs	r3, #1
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	f023 0307 	bic.w	r3, r3, #7
 800487a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	2b00      	cmp	r3, #0
 8004884:	d009      	beq.n	800489a <prvInitialiseNewTask+0x46>
 8004886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488a:	f383 8811 	msr	BASEPRI, r3
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	e7fe      	b.n	8004898 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d01f      	beq.n	80048e0 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048a0:	2300      	movs	r3, #0
 80048a2:	61fb      	str	r3, [r7, #28]
 80048a4:	e012      	b.n	80048cc <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	4413      	add	r3, r2
 80048ac:	7819      	ldrb	r1, [r3, #0]
 80048ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	4413      	add	r3, r2
 80048b4:	3334      	adds	r3, #52	; 0x34
 80048b6:	460a      	mov	r2, r1
 80048b8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	4413      	add	r3, r2
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d006      	beq.n	80048d4 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	3301      	adds	r3, #1
 80048ca:	61fb      	str	r3, [r7, #28]
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	2b0f      	cmp	r3, #15
 80048d0:	d9e9      	bls.n	80048a6 <prvInitialiseNewTask+0x52>
 80048d2:	e000      	b.n	80048d6 <prvInitialiseNewTask+0x82>
			{
				break;
 80048d4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048de:	e003      	b.n	80048e8 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80048e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	2b06      	cmp	r3, #6
 80048ec:	d901      	bls.n	80048f2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80048ee:	2306      	movs	r3, #6
 80048f0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80048f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048f6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80048f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048fc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	2200      	movs	r2, #0
 8004902:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004906:	3304      	adds	r3, #4
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff fe70 	bl	80045ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800490e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004910:	3318      	adds	r3, #24
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff fe6b 	bl	80045ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800491c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800491e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004920:	f1c3 0207 	rsb	r2, r3, #7
 8004924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004926:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800492c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004930:	2200      	movs	r2, #0
 8004932:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	68f9      	ldr	r1, [r7, #12]
 8004940:	69b8      	ldr	r0, [r7, #24]
 8004942:	f000 fbfd 	bl	8005140 <pxPortInitialiseStack>
 8004946:	4602      	mov	r2, r0
 8004948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800494c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004956:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004958:	bf00      	nop
 800495a:	3720      	adds	r7, #32
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004968:	f000 fd10 	bl	800538c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800496c:	4b2a      	ldr	r3, [pc, #168]	; (8004a18 <prvAddNewTaskToReadyList+0xb8>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3301      	adds	r3, #1
 8004972:	4a29      	ldr	r2, [pc, #164]	; (8004a18 <prvAddNewTaskToReadyList+0xb8>)
 8004974:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004976:	4b29      	ldr	r3, [pc, #164]	; (8004a1c <prvAddNewTaskToReadyList+0xbc>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d109      	bne.n	8004992 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800497e:	4a27      	ldr	r2, [pc, #156]	; (8004a1c <prvAddNewTaskToReadyList+0xbc>)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004984:	4b24      	ldr	r3, [pc, #144]	; (8004a18 <prvAddNewTaskToReadyList+0xb8>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d110      	bne.n	80049ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800498c:	f000 fab8 	bl	8004f00 <prvInitialiseTaskLists>
 8004990:	e00d      	b.n	80049ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004992:	4b23      	ldr	r3, [pc, #140]	; (8004a20 <prvAddNewTaskToReadyList+0xc0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d109      	bne.n	80049ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800499a:	4b20      	ldr	r3, [pc, #128]	; (8004a1c <prvAddNewTaskToReadyList+0xbc>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d802      	bhi.n	80049ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049a8:	4a1c      	ldr	r2, [pc, #112]	; (8004a1c <prvAddNewTaskToReadyList+0xbc>)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80049ae:	4b1d      	ldr	r3, [pc, #116]	; (8004a24 <prvAddNewTaskToReadyList+0xc4>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3301      	adds	r3, #1
 80049b4:	4a1b      	ldr	r2, [pc, #108]	; (8004a24 <prvAddNewTaskToReadyList+0xc4>)
 80049b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	2201      	movs	r2, #1
 80049be:	409a      	lsls	r2, r3
 80049c0:	4b19      	ldr	r3, [pc, #100]	; (8004a28 <prvAddNewTaskToReadyList+0xc8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	4a18      	ldr	r2, [pc, #96]	; (8004a28 <prvAddNewTaskToReadyList+0xc8>)
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ce:	4613      	mov	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4a15      	ldr	r2, [pc, #84]	; (8004a2c <prvAddNewTaskToReadyList+0xcc>)
 80049d8:	441a      	add	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	3304      	adds	r3, #4
 80049de:	4619      	mov	r1, r3
 80049e0:	4610      	mov	r0, r2
 80049e2:	f7ff fe11 	bl	8004608 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80049e6:	f000 fcff 	bl	80053e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80049ea:	4b0d      	ldr	r3, [pc, #52]	; (8004a20 <prvAddNewTaskToReadyList+0xc0>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00e      	beq.n	8004a10 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80049f2:	4b0a      	ldr	r3, [pc, #40]	; (8004a1c <prvAddNewTaskToReadyList+0xbc>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d207      	bcs.n	8004a10 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a00:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <prvAddNewTaskToReadyList+0xd0>)
 8004a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a10:	bf00      	nop
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	20000558 	.word	0x20000558
 8004a1c:	20000458 	.word	0x20000458
 8004a20:	20000564 	.word	0x20000564
 8004a24:	20000574 	.word	0x20000574
 8004a28:	20000560 	.word	0x20000560
 8004a2c:	2000045c 	.word	0x2000045c
 8004a30:	e000ed04 	.word	0xe000ed04

08004a34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d016      	beq.n	8004a74 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a46:	4b13      	ldr	r3, [pc, #76]	; (8004a94 <vTaskDelay+0x60>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d009      	beq.n	8004a62 <vTaskDelay+0x2e>
 8004a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a52:	f383 8811 	msr	BASEPRI, r3
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	60bb      	str	r3, [r7, #8]
 8004a60:	e7fe      	b.n	8004a60 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004a62:	f000 f879 	bl	8004b58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a66:	2100      	movs	r1, #0
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fb03 	bl	8005074 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a6e:	f000 f881 	bl	8004b74 <xTaskResumeAll>
 8004a72:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d107      	bne.n	8004a8a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004a7a:	4b07      	ldr	r3, [pc, #28]	; (8004a98 <vTaskDelay+0x64>)
 8004a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a8a:	bf00      	nop
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	20000580 	.word	0x20000580
 8004a98:	e000ed04 	.word	0xe000ed04

08004a9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b08a      	sub	sp, #40	; 0x28
 8004aa0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004aaa:	463a      	mov	r2, r7
 8004aac:	1d39      	adds	r1, r7, #4
 8004aae:	f107 0308 	add.w	r3, r7, #8
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fc f9b0 	bl	8000e18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ab8:	6839      	ldr	r1, [r7, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	9202      	str	r2, [sp, #8]
 8004ac0:	9301      	str	r3, [sp, #4]
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	460a      	mov	r2, r1
 8004aca:	491d      	ldr	r1, [pc, #116]	; (8004b40 <vTaskStartScheduler+0xa4>)
 8004acc:	481d      	ldr	r0, [pc, #116]	; (8004b44 <vTaskStartScheduler+0xa8>)
 8004ace:	f7ff fe22 	bl	8004716 <xTaskCreateStatic>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	4b1c      	ldr	r3, [pc, #112]	; (8004b48 <vTaskStartScheduler+0xac>)
 8004ad6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ad8:	4b1b      	ldr	r3, [pc, #108]	; (8004b48 <vTaskStartScheduler+0xac>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	e001      	b.n	8004aea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d115      	bne.n	8004b1c <vTaskStartScheduler+0x80>
 8004af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b02:	4b12      	ldr	r3, [pc, #72]	; (8004b4c <vTaskStartScheduler+0xb0>)
 8004b04:	f04f 32ff 	mov.w	r2, #4294967295
 8004b08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b0a:	4b11      	ldr	r3, [pc, #68]	; (8004b50 <vTaskStartScheduler+0xb4>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b10:	4b10      	ldr	r3, [pc, #64]	; (8004b54 <vTaskStartScheduler+0xb8>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b16:	f000 fb9b 	bl	8005250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b1a:	e00d      	b.n	8004b38 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b22:	d109      	bne.n	8004b38 <vTaskStartScheduler+0x9c>
 8004b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b28:	f383 8811 	msr	BASEPRI, r3
 8004b2c:	f3bf 8f6f 	isb	sy
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	e7fe      	b.n	8004b36 <vTaskStartScheduler+0x9a>
}
 8004b38:	bf00      	nop
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	080073e0 	.word	0x080073e0
 8004b44:	08004ed1 	.word	0x08004ed1
 8004b48:	2000057c 	.word	0x2000057c
 8004b4c:	20000578 	.word	0x20000578
 8004b50:	20000564 	.word	0x20000564
 8004b54:	2000055c 	.word	0x2000055c

08004b58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004b5c:	4b04      	ldr	r3, [pc, #16]	; (8004b70 <vTaskSuspendAll+0x18>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3301      	adds	r3, #1
 8004b62:	4a03      	ldr	r2, [pc, #12]	; (8004b70 <vTaskSuspendAll+0x18>)
 8004b64:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004b66:	bf00      	nop
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	20000580 	.word	0x20000580

08004b74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b82:	4b41      	ldr	r3, [pc, #260]	; (8004c88 <xTaskResumeAll+0x114>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d109      	bne.n	8004b9e <xTaskResumeAll+0x2a>
 8004b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8e:	f383 8811 	msr	BASEPRI, r3
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	f3bf 8f4f 	dsb	sy
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	e7fe      	b.n	8004b9c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b9e:	f000 fbf5 	bl	800538c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ba2:	4b39      	ldr	r3, [pc, #228]	; (8004c88 <xTaskResumeAll+0x114>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	4a37      	ldr	r2, [pc, #220]	; (8004c88 <xTaskResumeAll+0x114>)
 8004baa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bac:	4b36      	ldr	r3, [pc, #216]	; (8004c88 <xTaskResumeAll+0x114>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d161      	bne.n	8004c78 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004bb4:	4b35      	ldr	r3, [pc, #212]	; (8004c8c <xTaskResumeAll+0x118>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d05d      	beq.n	8004c78 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bbc:	e02e      	b.n	8004c1c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bbe:	4b34      	ldr	r3, [pc, #208]	; (8004c90 <xTaskResumeAll+0x11c>)
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	3318      	adds	r3, #24
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7ff fd79 	bl	80046c2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff fd74 	bl	80046c2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bde:	2201      	movs	r2, #1
 8004be0:	409a      	lsls	r2, r3
 8004be2:	4b2c      	ldr	r3, [pc, #176]	; (8004c94 <xTaskResumeAll+0x120>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	4a2a      	ldr	r2, [pc, #168]	; (8004c94 <xTaskResumeAll+0x120>)
 8004bea:	6013      	str	r3, [r2, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4a27      	ldr	r2, [pc, #156]	; (8004c98 <xTaskResumeAll+0x124>)
 8004bfa:	441a      	add	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	3304      	adds	r3, #4
 8004c00:	4619      	mov	r1, r3
 8004c02:	4610      	mov	r0, r2
 8004c04:	f7ff fd00 	bl	8004608 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0c:	4b23      	ldr	r3, [pc, #140]	; (8004c9c <xTaskResumeAll+0x128>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d302      	bcc.n	8004c1c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004c16:	4b22      	ldr	r3, [pc, #136]	; (8004ca0 <xTaskResumeAll+0x12c>)
 8004c18:	2201      	movs	r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c1c:	4b1c      	ldr	r3, [pc, #112]	; (8004c90 <xTaskResumeAll+0x11c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1cc      	bne.n	8004bbe <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c2a:	f000 fa03 	bl	8005034 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004c2e:	4b1d      	ldr	r3, [pc, #116]	; (8004ca4 <xTaskResumeAll+0x130>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d010      	beq.n	8004c5c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c3a:	f000 f837 	bl	8004cac <xTaskIncrementTick>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d002      	beq.n	8004c4a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004c44:	4b16      	ldr	r3, [pc, #88]	; (8004ca0 <xTaskResumeAll+0x12c>)
 8004c46:	2201      	movs	r2, #1
 8004c48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1f1      	bne.n	8004c3a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004c56:	4b13      	ldr	r3, [pc, #76]	; (8004ca4 <xTaskResumeAll+0x130>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c5c:	4b10      	ldr	r3, [pc, #64]	; (8004ca0 <xTaskResumeAll+0x12c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d009      	beq.n	8004c78 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c64:	2301      	movs	r3, #1
 8004c66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c68:	4b0f      	ldr	r3, [pc, #60]	; (8004ca8 <xTaskResumeAll+0x134>)
 8004c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	f3bf 8f4f 	dsb	sy
 8004c74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c78:	f000 fbb6 	bl	80053e8 <vPortExitCritical>

	return xAlreadyYielded;
 8004c7c:	68bb      	ldr	r3, [r7, #8]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	20000580 	.word	0x20000580
 8004c8c:	20000558 	.word	0x20000558
 8004c90:	20000518 	.word	0x20000518
 8004c94:	20000560 	.word	0x20000560
 8004c98:	2000045c 	.word	0x2000045c
 8004c9c:	20000458 	.word	0x20000458
 8004ca0:	2000056c 	.word	0x2000056c
 8004ca4:	20000568 	.word	0x20000568
 8004ca8:	e000ed04 	.word	0xe000ed04

08004cac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cb6:	4b4e      	ldr	r3, [pc, #312]	; (8004df0 <xTaskIncrementTick+0x144>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f040 8087 	bne.w	8004dce <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004cc0:	4b4c      	ldr	r3, [pc, #304]	; (8004df4 <xTaskIncrementTick+0x148>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004cc8:	4a4a      	ldr	r2, [pc, #296]	; (8004df4 <xTaskIncrementTick+0x148>)
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d11f      	bne.n	8004d14 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004cd4:	4b48      	ldr	r3, [pc, #288]	; (8004df8 <xTaskIncrementTick+0x14c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d009      	beq.n	8004cf2 <xTaskIncrementTick+0x46>
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	603b      	str	r3, [r7, #0]
 8004cf0:	e7fe      	b.n	8004cf0 <xTaskIncrementTick+0x44>
 8004cf2:	4b41      	ldr	r3, [pc, #260]	; (8004df8 <xTaskIncrementTick+0x14c>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	4b40      	ldr	r3, [pc, #256]	; (8004dfc <xTaskIncrementTick+0x150>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a3e      	ldr	r2, [pc, #248]	; (8004df8 <xTaskIncrementTick+0x14c>)
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	4a3e      	ldr	r2, [pc, #248]	; (8004dfc <xTaskIncrementTick+0x150>)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	4b3e      	ldr	r3, [pc, #248]	; (8004e00 <xTaskIncrementTick+0x154>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	4a3c      	ldr	r2, [pc, #240]	; (8004e00 <xTaskIncrementTick+0x154>)
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	f000 f990 	bl	8005034 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d14:	4b3b      	ldr	r3, [pc, #236]	; (8004e04 <xTaskIncrementTick+0x158>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d348      	bcc.n	8004db0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d1e:	4b36      	ldr	r3, [pc, #216]	; (8004df8 <xTaskIncrementTick+0x14c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d104      	bne.n	8004d32 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d28:	4b36      	ldr	r3, [pc, #216]	; (8004e04 <xTaskIncrementTick+0x158>)
 8004d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d2e:	601a      	str	r2, [r3, #0]
					break;
 8004d30:	e03e      	b.n	8004db0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d32:	4b31      	ldr	r3, [pc, #196]	; (8004df8 <xTaskIncrementTick+0x14c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d203      	bcs.n	8004d52 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d4a:	4a2e      	ldr	r2, [pc, #184]	; (8004e04 <xTaskIncrementTick+0x158>)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d50:	e02e      	b.n	8004db0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	3304      	adds	r3, #4
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff fcb3 	bl	80046c2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d004      	beq.n	8004d6e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	3318      	adds	r3, #24
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7ff fcaa 	bl	80046c2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d72:	2201      	movs	r2, #1
 8004d74:	409a      	lsls	r2, r3
 8004d76:	4b24      	ldr	r3, [pc, #144]	; (8004e08 <xTaskIncrementTick+0x15c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	4a22      	ldr	r2, [pc, #136]	; (8004e08 <xTaskIncrementTick+0x15c>)
 8004d7e:	6013      	str	r3, [r2, #0]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d84:	4613      	mov	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4a1f      	ldr	r2, [pc, #124]	; (8004e0c <xTaskIncrementTick+0x160>)
 8004d8e:	441a      	add	r2, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	3304      	adds	r3, #4
 8004d94:	4619      	mov	r1, r3
 8004d96:	4610      	mov	r0, r2
 8004d98:	f7ff fc36 	bl	8004608 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da0:	4b1b      	ldr	r3, [pc, #108]	; (8004e10 <xTaskIncrementTick+0x164>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d3b9      	bcc.n	8004d1e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004daa:	2301      	movs	r3, #1
 8004dac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dae:	e7b6      	b.n	8004d1e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004db0:	4b17      	ldr	r3, [pc, #92]	; (8004e10 <xTaskIncrementTick+0x164>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db6:	4915      	ldr	r1, [pc, #84]	; (8004e0c <xTaskIncrementTick+0x160>)
 8004db8:	4613      	mov	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	440b      	add	r3, r1
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d907      	bls.n	8004dd8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	617b      	str	r3, [r7, #20]
 8004dcc:	e004      	b.n	8004dd8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004dce:	4b11      	ldr	r3, [pc, #68]	; (8004e14 <xTaskIncrementTick+0x168>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	4a0f      	ldr	r2, [pc, #60]	; (8004e14 <xTaskIncrementTick+0x168>)
 8004dd6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004dd8:	4b0f      	ldr	r3, [pc, #60]	; (8004e18 <xTaskIncrementTick+0x16c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004de0:	2301      	movs	r3, #1
 8004de2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004de4:	697b      	ldr	r3, [r7, #20]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3718      	adds	r7, #24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	20000580 	.word	0x20000580
 8004df4:	2000055c 	.word	0x2000055c
 8004df8:	20000510 	.word	0x20000510
 8004dfc:	20000514 	.word	0x20000514
 8004e00:	20000570 	.word	0x20000570
 8004e04:	20000578 	.word	0x20000578
 8004e08:	20000560 	.word	0x20000560
 8004e0c:	2000045c 	.word	0x2000045c
 8004e10:	20000458 	.word	0x20000458
 8004e14:	20000568 	.word	0x20000568
 8004e18:	2000056c 	.word	0x2000056c

08004e1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e22:	4b26      	ldr	r3, [pc, #152]	; (8004ebc <vTaskSwitchContext+0xa0>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e2a:	4b25      	ldr	r3, [pc, #148]	; (8004ec0 <vTaskSwitchContext+0xa4>)
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e30:	e03e      	b.n	8004eb0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004e32:	4b23      	ldr	r3, [pc, #140]	; (8004ec0 <vTaskSwitchContext+0xa4>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e38:	4b22      	ldr	r3, [pc, #136]	; (8004ec4 <vTaskSwitchContext+0xa8>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	fab3 f383 	clz	r3, r3
 8004e44:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004e46:	7afb      	ldrb	r3, [r7, #11]
 8004e48:	f1c3 031f 	rsb	r3, r3, #31
 8004e4c:	617b      	str	r3, [r7, #20]
 8004e4e:	491e      	ldr	r1, [pc, #120]	; (8004ec8 <vTaskSwitchContext+0xac>)
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	4613      	mov	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d109      	bne.n	8004e76 <vTaskSwitchContext+0x5a>
	__asm volatile
 8004e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	607b      	str	r3, [r7, #4]
 8004e74:	e7fe      	b.n	8004e74 <vTaskSwitchContext+0x58>
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4a11      	ldr	r2, [pc, #68]	; (8004ec8 <vTaskSwitchContext+0xac>)
 8004e82:	4413      	add	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	605a      	str	r2, [r3, #4]
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	3308      	adds	r3, #8
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d104      	bne.n	8004ea6 <vTaskSwitchContext+0x8a>
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	605a      	str	r2, [r3, #4]
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	4a07      	ldr	r2, [pc, #28]	; (8004ecc <vTaskSwitchContext+0xb0>)
 8004eae:	6013      	str	r3, [r2, #0]
}
 8004eb0:	bf00      	nop
 8004eb2:	371c      	adds	r7, #28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	20000580 	.word	0x20000580
 8004ec0:	2000056c 	.word	0x2000056c
 8004ec4:	20000560 	.word	0x20000560
 8004ec8:	2000045c 	.word	0x2000045c
 8004ecc:	20000458 	.word	0x20000458

08004ed0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ed8:	f000 f852 	bl	8004f80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004edc:	4b06      	ldr	r3, [pc, #24]	; (8004ef8 <prvIdleTask+0x28>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d9f9      	bls.n	8004ed8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ee4:	4b05      	ldr	r3, [pc, #20]	; (8004efc <prvIdleTask+0x2c>)
 8004ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ef4:	e7f0      	b.n	8004ed8 <prvIdleTask+0x8>
 8004ef6:	bf00      	nop
 8004ef8:	2000045c 	.word	0x2000045c
 8004efc:	e000ed04 	.word	0xe000ed04

08004f00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f06:	2300      	movs	r3, #0
 8004f08:	607b      	str	r3, [r7, #4]
 8004f0a:	e00c      	b.n	8004f26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4a12      	ldr	r2, [pc, #72]	; (8004f60 <prvInitialiseTaskLists+0x60>)
 8004f18:	4413      	add	r3, r2
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff fb47 	bl	80045ae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3301      	adds	r3, #1
 8004f24:	607b      	str	r3, [r7, #4]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b06      	cmp	r3, #6
 8004f2a:	d9ef      	bls.n	8004f0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f2c:	480d      	ldr	r0, [pc, #52]	; (8004f64 <prvInitialiseTaskLists+0x64>)
 8004f2e:	f7ff fb3e 	bl	80045ae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f32:	480d      	ldr	r0, [pc, #52]	; (8004f68 <prvInitialiseTaskLists+0x68>)
 8004f34:	f7ff fb3b 	bl	80045ae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f38:	480c      	ldr	r0, [pc, #48]	; (8004f6c <prvInitialiseTaskLists+0x6c>)
 8004f3a:	f7ff fb38 	bl	80045ae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f3e:	480c      	ldr	r0, [pc, #48]	; (8004f70 <prvInitialiseTaskLists+0x70>)
 8004f40:	f7ff fb35 	bl	80045ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f44:	480b      	ldr	r0, [pc, #44]	; (8004f74 <prvInitialiseTaskLists+0x74>)
 8004f46:	f7ff fb32 	bl	80045ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f4a:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <prvInitialiseTaskLists+0x78>)
 8004f4c:	4a05      	ldr	r2, [pc, #20]	; (8004f64 <prvInitialiseTaskLists+0x64>)
 8004f4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f50:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <prvInitialiseTaskLists+0x7c>)
 8004f52:	4a05      	ldr	r2, [pc, #20]	; (8004f68 <prvInitialiseTaskLists+0x68>)
 8004f54:	601a      	str	r2, [r3, #0]
}
 8004f56:	bf00      	nop
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	2000045c 	.word	0x2000045c
 8004f64:	200004e8 	.word	0x200004e8
 8004f68:	200004fc 	.word	0x200004fc
 8004f6c:	20000518 	.word	0x20000518
 8004f70:	2000052c 	.word	0x2000052c
 8004f74:	20000544 	.word	0x20000544
 8004f78:	20000510 	.word	0x20000510
 8004f7c:	20000514 	.word	0x20000514

08004f80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f86:	e019      	b.n	8004fbc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f88:	f000 fa00 	bl	800538c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f8c:	4b0f      	ldr	r3, [pc, #60]	; (8004fcc <prvCheckTasksWaitingTermination+0x4c>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3304      	adds	r3, #4
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff fb92 	bl	80046c2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f9e:	4b0c      	ldr	r3, [pc, #48]	; (8004fd0 <prvCheckTasksWaitingTermination+0x50>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	4a0a      	ldr	r2, [pc, #40]	; (8004fd0 <prvCheckTasksWaitingTermination+0x50>)
 8004fa6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004fa8:	4b0a      	ldr	r3, [pc, #40]	; (8004fd4 <prvCheckTasksWaitingTermination+0x54>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	4a09      	ldr	r2, [pc, #36]	; (8004fd4 <prvCheckTasksWaitingTermination+0x54>)
 8004fb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004fb2:	f000 fa19 	bl	80053e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f80e 	bl	8004fd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fbc:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <prvCheckTasksWaitingTermination+0x54>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e1      	bne.n	8004f88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004fc4:	bf00      	nop
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	2000052c 	.word	0x2000052c
 8004fd0:	20000558 	.word	0x20000558
 8004fd4:	20000540 	.word	0x20000540

08004fd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d108      	bne.n	8004ffc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fb6a 	bl	80056c8 <vPortFree>
				vPortFree( pxTCB );
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 fb67 	bl	80056c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ffa:	e017      	b.n	800502c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005002:	2b01      	cmp	r3, #1
 8005004:	d103      	bne.n	800500e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fb5e 	bl	80056c8 <vPortFree>
	}
 800500c:	e00e      	b.n	800502c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005014:	2b02      	cmp	r3, #2
 8005016:	d009      	beq.n	800502c <prvDeleteTCB+0x54>
 8005018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	60fb      	str	r3, [r7, #12]
 800502a:	e7fe      	b.n	800502a <prvDeleteTCB+0x52>
	}
 800502c:	bf00      	nop
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800503a:	4b0c      	ldr	r3, [pc, #48]	; (800506c <prvResetNextTaskUnblockTime+0x38>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d104      	bne.n	800504e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005044:	4b0a      	ldr	r3, [pc, #40]	; (8005070 <prvResetNextTaskUnblockTime+0x3c>)
 8005046:	f04f 32ff 	mov.w	r2, #4294967295
 800504a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800504c:	e008      	b.n	8005060 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800504e:	4b07      	ldr	r3, [pc, #28]	; (800506c <prvResetNextTaskUnblockTime+0x38>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	4a04      	ldr	r2, [pc, #16]	; (8005070 <prvResetNextTaskUnblockTime+0x3c>)
 800505e:	6013      	str	r3, [r2, #0]
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	20000510 	.word	0x20000510
 8005070:	20000578 	.word	0x20000578

08005074 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800507e:	4b29      	ldr	r3, [pc, #164]	; (8005124 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005084:	4b28      	ldr	r3, [pc, #160]	; (8005128 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	3304      	adds	r3, #4
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff fb19 	bl	80046c2 <uxListRemove>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10b      	bne.n	80050ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005096:	4b24      	ldr	r3, [pc, #144]	; (8005128 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509c:	2201      	movs	r2, #1
 800509e:	fa02 f303 	lsl.w	r3, r2, r3
 80050a2:	43da      	mvns	r2, r3
 80050a4:	4b21      	ldr	r3, [pc, #132]	; (800512c <prvAddCurrentTaskToDelayedList+0xb8>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4013      	ands	r3, r2
 80050aa:	4a20      	ldr	r2, [pc, #128]	; (800512c <prvAddCurrentTaskToDelayedList+0xb8>)
 80050ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b4:	d10a      	bne.n	80050cc <prvAddCurrentTaskToDelayedList+0x58>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d007      	beq.n	80050cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050bc:	4b1a      	ldr	r3, [pc, #104]	; (8005128 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3304      	adds	r3, #4
 80050c2:	4619      	mov	r1, r3
 80050c4:	481a      	ldr	r0, [pc, #104]	; (8005130 <prvAddCurrentTaskToDelayedList+0xbc>)
 80050c6:	f7ff fa9f 	bl	8004608 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050ca:	e026      	b.n	800511a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4413      	add	r3, r2
 80050d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050d4:	4b14      	ldr	r3, [pc, #80]	; (8005128 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d209      	bcs.n	80050f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050e4:	4b13      	ldr	r3, [pc, #76]	; (8005134 <prvAddCurrentTaskToDelayedList+0xc0>)
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	4b0f      	ldr	r3, [pc, #60]	; (8005128 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3304      	adds	r3, #4
 80050ee:	4619      	mov	r1, r3
 80050f0:	4610      	mov	r0, r2
 80050f2:	f7ff faad 	bl	8004650 <vListInsert>
}
 80050f6:	e010      	b.n	800511a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050f8:	4b0f      	ldr	r3, [pc, #60]	; (8005138 <prvAddCurrentTaskToDelayedList+0xc4>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	4b0a      	ldr	r3, [pc, #40]	; (8005128 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3304      	adds	r3, #4
 8005102:	4619      	mov	r1, r3
 8005104:	4610      	mov	r0, r2
 8005106:	f7ff faa3 	bl	8004650 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800510a:	4b0c      	ldr	r3, [pc, #48]	; (800513c <prvAddCurrentTaskToDelayedList+0xc8>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	429a      	cmp	r2, r3
 8005112:	d202      	bcs.n	800511a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005114:	4a09      	ldr	r2, [pc, #36]	; (800513c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	6013      	str	r3, [r2, #0]
}
 800511a:	bf00      	nop
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	2000055c 	.word	0x2000055c
 8005128:	20000458 	.word	0x20000458
 800512c:	20000560 	.word	0x20000560
 8005130:	20000544 	.word	0x20000544
 8005134:	20000514 	.word	0x20000514
 8005138:	20000510 	.word	0x20000510
 800513c:	20000578 	.word	0x20000578

08005140 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	3b04      	subs	r3, #4
 8005150:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	3b04      	subs	r3, #4
 800515e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f023 0201 	bic.w	r2, r3, #1
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	3b04      	subs	r3, #4
 800516e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005170:	4a0c      	ldr	r2, [pc, #48]	; (80051a4 <pxPortInitialiseStack+0x64>)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	3b14      	subs	r3, #20
 800517a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	3b04      	subs	r3, #4
 8005186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f06f 0202 	mvn.w	r2, #2
 800518e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	3b20      	subs	r3, #32
 8005194:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005196:	68fb      	ldr	r3, [r7, #12]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	080051a9 	.word	0x080051a9

080051a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80051ae:	2300      	movs	r3, #0
 80051b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051b2:	4b11      	ldr	r3, [pc, #68]	; (80051f8 <prvTaskExitError+0x50>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ba:	d009      	beq.n	80051d0 <prvTaskExitError+0x28>
 80051bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c0:	f383 8811 	msr	BASEPRI, r3
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	60fb      	str	r3, [r7, #12]
 80051ce:	e7fe      	b.n	80051ce <prvTaskExitError+0x26>
 80051d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80051e2:	bf00      	nop
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0fc      	beq.n	80051e4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80051ea:	bf00      	nop
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	2000000c 	.word	0x2000000c
 80051fc:	00000000 	.word	0x00000000

08005200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005200:	4b07      	ldr	r3, [pc, #28]	; (8005220 <pxCurrentTCBConst2>)
 8005202:	6819      	ldr	r1, [r3, #0]
 8005204:	6808      	ldr	r0, [r1, #0]
 8005206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800520a:	f380 8809 	msr	PSP, r0
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f04f 0000 	mov.w	r0, #0
 8005216:	f380 8811 	msr	BASEPRI, r0
 800521a:	4770      	bx	lr
 800521c:	f3af 8000 	nop.w

08005220 <pxCurrentTCBConst2>:
 8005220:	20000458 	.word	0x20000458
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005224:	bf00      	nop
 8005226:	bf00      	nop

08005228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005228:	4808      	ldr	r0, [pc, #32]	; (800524c <prvPortStartFirstTask+0x24>)
 800522a:	6800      	ldr	r0, [r0, #0]
 800522c:	6800      	ldr	r0, [r0, #0]
 800522e:	f380 8808 	msr	MSP, r0
 8005232:	f04f 0000 	mov.w	r0, #0
 8005236:	f380 8814 	msr	CONTROL, r0
 800523a:	b662      	cpsie	i
 800523c:	b661      	cpsie	f
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	df00      	svc	0
 8005248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800524a:	bf00      	nop
 800524c:	e000ed08 	.word	0xe000ed08

08005250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005256:	4b44      	ldr	r3, [pc, #272]	; (8005368 <xPortStartScheduler+0x118>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a44      	ldr	r2, [pc, #272]	; (800536c <xPortStartScheduler+0x11c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d109      	bne.n	8005274 <xPortStartScheduler+0x24>
 8005260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	613b      	str	r3, [r7, #16]
 8005272:	e7fe      	b.n	8005272 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005274:	4b3c      	ldr	r3, [pc, #240]	; (8005368 <xPortStartScheduler+0x118>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a3d      	ldr	r2, [pc, #244]	; (8005370 <xPortStartScheduler+0x120>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d109      	bne.n	8005292 <xPortStartScheduler+0x42>
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	e7fe      	b.n	8005290 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005292:	4b38      	ldr	r3, [pc, #224]	; (8005374 <xPortStartScheduler+0x124>)
 8005294:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	b2db      	uxtb	r3, r3
 800529c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	22ff      	movs	r2, #255	; 0xff
 80052a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052ac:	78fb      	ldrb	r3, [r7, #3]
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80052b4:	b2da      	uxtb	r2, r3
 80052b6:	4b30      	ldr	r3, [pc, #192]	; (8005378 <xPortStartScheduler+0x128>)
 80052b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052ba:	4b30      	ldr	r3, [pc, #192]	; (800537c <xPortStartScheduler+0x12c>)
 80052bc:	2207      	movs	r2, #7
 80052be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052c0:	e009      	b.n	80052d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80052c2:	4b2e      	ldr	r3, [pc, #184]	; (800537c <xPortStartScheduler+0x12c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	4a2c      	ldr	r2, [pc, #176]	; (800537c <xPortStartScheduler+0x12c>)
 80052ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052cc:	78fb      	ldrb	r3, [r7, #3]
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052d6:	78fb      	ldrb	r3, [r7, #3]
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052de:	2b80      	cmp	r3, #128	; 0x80
 80052e0:	d0ef      	beq.n	80052c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052e2:	4b26      	ldr	r3, [pc, #152]	; (800537c <xPortStartScheduler+0x12c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f1c3 0307 	rsb	r3, r3, #7
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	d009      	beq.n	8005302 <xPortStartScheduler+0xb2>
 80052ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	60bb      	str	r3, [r7, #8]
 8005300:	e7fe      	b.n	8005300 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005302:	4b1e      	ldr	r3, [pc, #120]	; (800537c <xPortStartScheduler+0x12c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	021b      	lsls	r3, r3, #8
 8005308:	4a1c      	ldr	r2, [pc, #112]	; (800537c <xPortStartScheduler+0x12c>)
 800530a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800530c:	4b1b      	ldr	r3, [pc, #108]	; (800537c <xPortStartScheduler+0x12c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005314:	4a19      	ldr	r2, [pc, #100]	; (800537c <xPortStartScheduler+0x12c>)
 8005316:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	b2da      	uxtb	r2, r3
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005320:	4b17      	ldr	r3, [pc, #92]	; (8005380 <xPortStartScheduler+0x130>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a16      	ldr	r2, [pc, #88]	; (8005380 <xPortStartScheduler+0x130>)
 8005326:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800532a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800532c:	4b14      	ldr	r3, [pc, #80]	; (8005380 <xPortStartScheduler+0x130>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a13      	ldr	r2, [pc, #76]	; (8005380 <xPortStartScheduler+0x130>)
 8005332:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005336:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005338:	f000 f8d6 	bl	80054e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800533c:	4b11      	ldr	r3, [pc, #68]	; (8005384 <xPortStartScheduler+0x134>)
 800533e:	2200      	movs	r2, #0
 8005340:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005342:	f000 f8f5 	bl	8005530 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005346:	4b10      	ldr	r3, [pc, #64]	; (8005388 <xPortStartScheduler+0x138>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a0f      	ldr	r2, [pc, #60]	; (8005388 <xPortStartScheduler+0x138>)
 800534c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005350:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005352:	f7ff ff69 	bl	8005228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005356:	f7ff fd61 	bl	8004e1c <vTaskSwitchContext>
	prvTaskExitError();
 800535a:	f7ff ff25 	bl	80051a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3718      	adds	r7, #24
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	e000ed00 	.word	0xe000ed00
 800536c:	410fc271 	.word	0x410fc271
 8005370:	410fc270 	.word	0x410fc270
 8005374:	e000e400 	.word	0xe000e400
 8005378:	20000584 	.word	0x20000584
 800537c:	20000588 	.word	0x20000588
 8005380:	e000ed20 	.word	0xe000ed20
 8005384:	2000000c 	.word	0x2000000c
 8005388:	e000ef34 	.word	0xe000ef34

0800538c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005396:	f383 8811 	msr	BASEPRI, r3
 800539a:	f3bf 8f6f 	isb	sy
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80053a4:	4b0e      	ldr	r3, [pc, #56]	; (80053e0 <vPortEnterCritical+0x54>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3301      	adds	r3, #1
 80053aa:	4a0d      	ldr	r2, [pc, #52]	; (80053e0 <vPortEnterCritical+0x54>)
 80053ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80053ae:	4b0c      	ldr	r3, [pc, #48]	; (80053e0 <vPortEnterCritical+0x54>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d10e      	bne.n	80053d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053b6:	4b0b      	ldr	r3, [pc, #44]	; (80053e4 <vPortEnterCritical+0x58>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d009      	beq.n	80053d4 <vPortEnterCritical+0x48>
 80053c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	603b      	str	r3, [r7, #0]
 80053d2:	e7fe      	b.n	80053d2 <vPortEnterCritical+0x46>
	}
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	2000000c 	.word	0x2000000c
 80053e4:	e000ed04 	.word	0xe000ed04

080053e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80053ee:	4b11      	ldr	r3, [pc, #68]	; (8005434 <vPortExitCritical+0x4c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d109      	bne.n	800540a <vPortExitCritical+0x22>
 80053f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fa:	f383 8811 	msr	BASEPRI, r3
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	607b      	str	r3, [r7, #4]
 8005408:	e7fe      	b.n	8005408 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800540a:	4b0a      	ldr	r3, [pc, #40]	; (8005434 <vPortExitCritical+0x4c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3b01      	subs	r3, #1
 8005410:	4a08      	ldr	r2, [pc, #32]	; (8005434 <vPortExitCritical+0x4c>)
 8005412:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005414:	4b07      	ldr	r3, [pc, #28]	; (8005434 <vPortExitCritical+0x4c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d104      	bne.n	8005426 <vPortExitCritical+0x3e>
 800541c:	2300      	movs	r3, #0
 800541e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	2000000c 	.word	0x2000000c
	...

08005440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005440:	f3ef 8009 	mrs	r0, PSP
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	4b15      	ldr	r3, [pc, #84]	; (80054a0 <pxCurrentTCBConst>)
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	f01e 0f10 	tst.w	lr, #16
 8005450:	bf08      	it	eq
 8005452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800545a:	6010      	str	r0, [r2, #0]
 800545c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005464:	f380 8811 	msr	BASEPRI, r0
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f7ff fcd4 	bl	8004e1c <vTaskSwitchContext>
 8005474:	f04f 0000 	mov.w	r0, #0
 8005478:	f380 8811 	msr	BASEPRI, r0
 800547c:	bc09      	pop	{r0, r3}
 800547e:	6819      	ldr	r1, [r3, #0]
 8005480:	6808      	ldr	r0, [r1, #0]
 8005482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005486:	f01e 0f10 	tst.w	lr, #16
 800548a:	bf08      	it	eq
 800548c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005490:	f380 8809 	msr	PSP, r0
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	f3af 8000 	nop.w

080054a0 <pxCurrentTCBConst>:
 80054a0:	20000458 	.word	0x20000458
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop

080054a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
	__asm volatile
 80054ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80054c0:	f7ff fbf4 	bl	8004cac <xTaskIncrementTick>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054ca:	4b06      	ldr	r3, [pc, #24]	; (80054e4 <SysTick_Handler+0x3c>)
 80054cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	2300      	movs	r3, #0
 80054d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80054dc:	bf00      	nop
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	e000ed04 	.word	0xe000ed04

080054e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80054ec:	4b0b      	ldr	r3, [pc, #44]	; (800551c <vPortSetupTimerInterrupt+0x34>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80054f2:	4b0b      	ldr	r3, [pc, #44]	; (8005520 <vPortSetupTimerInterrupt+0x38>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054f8:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <vPortSetupTimerInterrupt+0x3c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a0a      	ldr	r2, [pc, #40]	; (8005528 <vPortSetupTimerInterrupt+0x40>)
 80054fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005502:	099b      	lsrs	r3, r3, #6
 8005504:	4a09      	ldr	r2, [pc, #36]	; (800552c <vPortSetupTimerInterrupt+0x44>)
 8005506:	3b01      	subs	r3, #1
 8005508:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800550a:	4b04      	ldr	r3, [pc, #16]	; (800551c <vPortSetupTimerInterrupt+0x34>)
 800550c:	2207      	movs	r2, #7
 800550e:	601a      	str	r2, [r3, #0]
}
 8005510:	bf00      	nop
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	e000e010 	.word	0xe000e010
 8005520:	e000e018 	.word	0xe000e018
 8005524:	20000000 	.word	0x20000000
 8005528:	10624dd3 	.word	0x10624dd3
 800552c:	e000e014 	.word	0xe000e014

08005530 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005530:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005540 <vPortEnableVFP+0x10>
 8005534:	6801      	ldr	r1, [r0, #0]
 8005536:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800553a:	6001      	str	r1, [r0, #0]
 800553c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800553e:	bf00      	nop
 8005540:	e000ed88 	.word	0xe000ed88

08005544 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b08a      	sub	sp, #40	; 0x28
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800554c:	2300      	movs	r3, #0
 800554e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005550:	f7ff fb02 	bl	8004b58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005554:	4b57      	ldr	r3, [pc, #348]	; (80056b4 <pvPortMalloc+0x170>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800555c:	f000 f90c 	bl	8005778 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005560:	4b55      	ldr	r3, [pc, #340]	; (80056b8 <pvPortMalloc+0x174>)
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4013      	ands	r3, r2
 8005568:	2b00      	cmp	r3, #0
 800556a:	f040 808c 	bne.w	8005686 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d01c      	beq.n	80055ae <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005574:	2208      	movs	r2, #8
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4413      	add	r3, r2
 800557a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f003 0307 	and.w	r3, r3, #7
 8005582:	2b00      	cmp	r3, #0
 8005584:	d013      	beq.n	80055ae <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f023 0307 	bic.w	r3, r3, #7
 800558c:	3308      	adds	r3, #8
 800558e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f003 0307 	and.w	r3, r3, #7
 8005596:	2b00      	cmp	r3, #0
 8005598:	d009      	beq.n	80055ae <pvPortMalloc+0x6a>
	__asm volatile
 800559a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559e:	f383 8811 	msr	BASEPRI, r3
 80055a2:	f3bf 8f6f 	isb	sy
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	e7fe      	b.n	80055ac <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d068      	beq.n	8005686 <pvPortMalloc+0x142>
 80055b4:	4b41      	ldr	r3, [pc, #260]	; (80056bc <pvPortMalloc+0x178>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d863      	bhi.n	8005686 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80055be:	4b40      	ldr	r3, [pc, #256]	; (80056c0 <pvPortMalloc+0x17c>)
 80055c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80055c2:	4b3f      	ldr	r3, [pc, #252]	; (80056c0 <pvPortMalloc+0x17c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055c8:	e004      	b.n	80055d4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d903      	bls.n	80055e6 <pvPortMalloc+0xa2>
 80055de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1f1      	bne.n	80055ca <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80055e6:	4b33      	ldr	r3, [pc, #204]	; (80056b4 <pvPortMalloc+0x170>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d04a      	beq.n	8005686 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2208      	movs	r2, #8
 80055f6:	4413      	add	r3, r2
 80055f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	1ad2      	subs	r2, r2, r3
 800560a:	2308      	movs	r3, #8
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	429a      	cmp	r2, r3
 8005610:	d91e      	bls.n	8005650 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4413      	add	r3, r2
 8005618:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	f003 0307 	and.w	r3, r3, #7
 8005620:	2b00      	cmp	r3, #0
 8005622:	d009      	beq.n	8005638 <pvPortMalloc+0xf4>
 8005624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	613b      	str	r3, [r7, #16]
 8005636:	e7fe      	b.n	8005636 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	1ad2      	subs	r2, r2, r3
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800564a:	69b8      	ldr	r0, [r7, #24]
 800564c:	f000 f8f6 	bl	800583c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005650:	4b1a      	ldr	r3, [pc, #104]	; (80056bc <pvPortMalloc+0x178>)
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	4a18      	ldr	r2, [pc, #96]	; (80056bc <pvPortMalloc+0x178>)
 800565c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800565e:	4b17      	ldr	r3, [pc, #92]	; (80056bc <pvPortMalloc+0x178>)
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	4b18      	ldr	r3, [pc, #96]	; (80056c4 <pvPortMalloc+0x180>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	429a      	cmp	r2, r3
 8005668:	d203      	bcs.n	8005672 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800566a:	4b14      	ldr	r3, [pc, #80]	; (80056bc <pvPortMalloc+0x178>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a15      	ldr	r2, [pc, #84]	; (80056c4 <pvPortMalloc+0x180>)
 8005670:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	4b10      	ldr	r3, [pc, #64]	; (80056b8 <pvPortMalloc+0x174>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	431a      	orrs	r2, r3
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	2200      	movs	r2, #0
 8005684:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005686:	f7ff fa75 	bl	8004b74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	2b00      	cmp	r3, #0
 8005692:	d009      	beq.n	80056a8 <pvPortMalloc+0x164>
 8005694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	60fb      	str	r3, [r7, #12]
 80056a6:	e7fe      	b.n	80056a6 <pvPortMalloc+0x162>
	return pvReturn;
 80056a8:	69fb      	ldr	r3, [r7, #28]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3728      	adds	r7, #40	; 0x28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	20004194 	.word	0x20004194
 80056b8:	200041a0 	.word	0x200041a0
 80056bc:	20004198 	.word	0x20004198
 80056c0:	2000418c 	.word	0x2000418c
 80056c4:	2000419c 	.word	0x2000419c

080056c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d046      	beq.n	8005768 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80056da:	2308      	movs	r3, #8
 80056dc:	425b      	negs	r3, r3
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	4413      	add	r3, r2
 80056e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	4b20      	ldr	r3, [pc, #128]	; (8005770 <vPortFree+0xa8>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4013      	ands	r3, r2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d109      	bne.n	800570a <vPortFree+0x42>
 80056f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	e7fe      	b.n	8005708 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d009      	beq.n	8005726 <vPortFree+0x5e>
 8005712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005716:	f383 8811 	msr	BASEPRI, r3
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	60bb      	str	r3, [r7, #8]
 8005724:	e7fe      	b.n	8005724 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	4b11      	ldr	r3, [pc, #68]	; (8005770 <vPortFree+0xa8>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4013      	ands	r3, r2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d019      	beq.n	8005768 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d115      	bne.n	8005768 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	4b0b      	ldr	r3, [pc, #44]	; (8005770 <vPortFree+0xa8>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	43db      	mvns	r3, r3
 8005746:	401a      	ands	r2, r3
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800574c:	f7ff fa04 	bl	8004b58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	4b07      	ldr	r3, [pc, #28]	; (8005774 <vPortFree+0xac>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4413      	add	r3, r2
 800575a:	4a06      	ldr	r2, [pc, #24]	; (8005774 <vPortFree+0xac>)
 800575c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800575e:	6938      	ldr	r0, [r7, #16]
 8005760:	f000 f86c 	bl	800583c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005764:	f7ff fa06 	bl	8004b74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005768:	bf00      	nop
 800576a:	3718      	adds	r7, #24
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	200041a0 	.word	0x200041a0
 8005774:	20004198 	.word	0x20004198

08005778 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800577e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005782:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005784:	4b27      	ldr	r3, [pc, #156]	; (8005824 <prvHeapInit+0xac>)
 8005786:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f003 0307 	and.w	r3, r3, #7
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00c      	beq.n	80057ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	3307      	adds	r3, #7
 8005796:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 0307 	bic.w	r3, r3, #7
 800579e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	4a1f      	ldr	r2, [pc, #124]	; (8005824 <prvHeapInit+0xac>)
 80057a8:	4413      	add	r3, r2
 80057aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057b0:	4a1d      	ldr	r2, [pc, #116]	; (8005828 <prvHeapInit+0xb0>)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80057b6:	4b1c      	ldr	r3, [pc, #112]	; (8005828 <prvHeapInit+0xb0>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	4413      	add	r3, r2
 80057c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80057c4:	2208      	movs	r2, #8
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	1a9b      	subs	r3, r3, r2
 80057ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f023 0307 	bic.w	r3, r3, #7
 80057d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4a15      	ldr	r2, [pc, #84]	; (800582c <prvHeapInit+0xb4>)
 80057d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80057da:	4b14      	ldr	r3, [pc, #80]	; (800582c <prvHeapInit+0xb4>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2200      	movs	r2, #0
 80057e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057e2:	4b12      	ldr	r3, [pc, #72]	; (800582c <prvHeapInit+0xb4>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2200      	movs	r2, #0
 80057e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	1ad2      	subs	r2, r2, r3
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057f8:	4b0c      	ldr	r3, [pc, #48]	; (800582c <prvHeapInit+0xb4>)
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	4a0a      	ldr	r2, [pc, #40]	; (8005830 <prvHeapInit+0xb8>)
 8005806:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	4a09      	ldr	r2, [pc, #36]	; (8005834 <prvHeapInit+0xbc>)
 800580e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005810:	4b09      	ldr	r3, [pc, #36]	; (8005838 <prvHeapInit+0xc0>)
 8005812:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005816:	601a      	str	r2, [r3, #0]
}
 8005818:	bf00      	nop
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	2000058c 	.word	0x2000058c
 8005828:	2000418c 	.word	0x2000418c
 800582c:	20004194 	.word	0x20004194
 8005830:	2000419c 	.word	0x2000419c
 8005834:	20004198 	.word	0x20004198
 8005838:	200041a0 	.word	0x200041a0

0800583c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005844:	4b28      	ldr	r3, [pc, #160]	; (80058e8 <prvInsertBlockIntoFreeList+0xac>)
 8005846:	60fb      	str	r3, [r7, #12]
 8005848:	e002      	b.n	8005850 <prvInsertBlockIntoFreeList+0x14>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	429a      	cmp	r2, r3
 8005858:	d8f7      	bhi.n	800584a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	4413      	add	r3, r2
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	429a      	cmp	r2, r3
 800586a:	d108      	bne.n	800587e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	441a      	add	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	441a      	add	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	429a      	cmp	r2, r3
 8005890:	d118      	bne.n	80058c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	4b15      	ldr	r3, [pc, #84]	; (80058ec <prvInsertBlockIntoFreeList+0xb0>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	429a      	cmp	r2, r3
 800589c:	d00d      	beq.n	80058ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685a      	ldr	r2, [r3, #4]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	441a      	add	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	e008      	b.n	80058cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80058ba:	4b0c      	ldr	r3, [pc, #48]	; (80058ec <prvInsertBlockIntoFreeList+0xb0>)
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	e003      	b.n	80058cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d002      	beq.n	80058da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058da:	bf00      	nop
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	2000418c 	.word	0x2000418c
 80058ec:	20004194 	.word	0x20004194

080058f0 <__errno>:
 80058f0:	4b01      	ldr	r3, [pc, #4]	; (80058f8 <__errno+0x8>)
 80058f2:	6818      	ldr	r0, [r3, #0]
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	20000010 	.word	0x20000010

080058fc <__libc_init_array>:
 80058fc:	b570      	push	{r4, r5, r6, lr}
 80058fe:	4e0d      	ldr	r6, [pc, #52]	; (8005934 <__libc_init_array+0x38>)
 8005900:	4c0d      	ldr	r4, [pc, #52]	; (8005938 <__libc_init_array+0x3c>)
 8005902:	1ba4      	subs	r4, r4, r6
 8005904:	10a4      	asrs	r4, r4, #2
 8005906:	2500      	movs	r5, #0
 8005908:	42a5      	cmp	r5, r4
 800590a:	d109      	bne.n	8005920 <__libc_init_array+0x24>
 800590c:	4e0b      	ldr	r6, [pc, #44]	; (800593c <__libc_init_array+0x40>)
 800590e:	4c0c      	ldr	r4, [pc, #48]	; (8005940 <__libc_init_array+0x44>)
 8005910:	f001 fd46 	bl	80073a0 <_init>
 8005914:	1ba4      	subs	r4, r4, r6
 8005916:	10a4      	asrs	r4, r4, #2
 8005918:	2500      	movs	r5, #0
 800591a:	42a5      	cmp	r5, r4
 800591c:	d105      	bne.n	800592a <__libc_init_array+0x2e>
 800591e:	bd70      	pop	{r4, r5, r6, pc}
 8005920:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005924:	4798      	blx	r3
 8005926:	3501      	adds	r5, #1
 8005928:	e7ee      	b.n	8005908 <__libc_init_array+0xc>
 800592a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800592e:	4798      	blx	r3
 8005930:	3501      	adds	r5, #1
 8005932:	e7f2      	b.n	800591a <__libc_init_array+0x1e>
 8005934:	08007638 	.word	0x08007638
 8005938:	08007638 	.word	0x08007638
 800593c:	08007638 	.word	0x08007638
 8005940:	0800763c 	.word	0x0800763c

08005944 <memcpy>:
 8005944:	b510      	push	{r4, lr}
 8005946:	1e43      	subs	r3, r0, #1
 8005948:	440a      	add	r2, r1
 800594a:	4291      	cmp	r1, r2
 800594c:	d100      	bne.n	8005950 <memcpy+0xc>
 800594e:	bd10      	pop	{r4, pc}
 8005950:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005954:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005958:	e7f7      	b.n	800594a <memcpy+0x6>

0800595a <memset>:
 800595a:	4402      	add	r2, r0
 800595c:	4603      	mov	r3, r0
 800595e:	4293      	cmp	r3, r2
 8005960:	d100      	bne.n	8005964 <memset+0xa>
 8005962:	4770      	bx	lr
 8005964:	f803 1b01 	strb.w	r1, [r3], #1
 8005968:	e7f9      	b.n	800595e <memset+0x4>

0800596a <__cvt>:
 800596a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800596e:	ec55 4b10 	vmov	r4, r5, d0
 8005972:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005974:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005978:	2d00      	cmp	r5, #0
 800597a:	460e      	mov	r6, r1
 800597c:	4691      	mov	r9, r2
 800597e:	4619      	mov	r1, r3
 8005980:	bfb8      	it	lt
 8005982:	4622      	movlt	r2, r4
 8005984:	462b      	mov	r3, r5
 8005986:	f027 0720 	bic.w	r7, r7, #32
 800598a:	bfbb      	ittet	lt
 800598c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005990:	461d      	movlt	r5, r3
 8005992:	2300      	movge	r3, #0
 8005994:	232d      	movlt	r3, #45	; 0x2d
 8005996:	bfb8      	it	lt
 8005998:	4614      	movlt	r4, r2
 800599a:	2f46      	cmp	r7, #70	; 0x46
 800599c:	700b      	strb	r3, [r1, #0]
 800599e:	d004      	beq.n	80059aa <__cvt+0x40>
 80059a0:	2f45      	cmp	r7, #69	; 0x45
 80059a2:	d100      	bne.n	80059a6 <__cvt+0x3c>
 80059a4:	3601      	adds	r6, #1
 80059a6:	2102      	movs	r1, #2
 80059a8:	e000      	b.n	80059ac <__cvt+0x42>
 80059aa:	2103      	movs	r1, #3
 80059ac:	ab03      	add	r3, sp, #12
 80059ae:	9301      	str	r3, [sp, #4]
 80059b0:	ab02      	add	r3, sp, #8
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	4632      	mov	r2, r6
 80059b6:	4653      	mov	r3, sl
 80059b8:	ec45 4b10 	vmov	d0, r4, r5
 80059bc:	f000 fbac 	bl	8006118 <_dtoa_r>
 80059c0:	2f47      	cmp	r7, #71	; 0x47
 80059c2:	4680      	mov	r8, r0
 80059c4:	d102      	bne.n	80059cc <__cvt+0x62>
 80059c6:	f019 0f01 	tst.w	r9, #1
 80059ca:	d026      	beq.n	8005a1a <__cvt+0xb0>
 80059cc:	2f46      	cmp	r7, #70	; 0x46
 80059ce:	eb08 0906 	add.w	r9, r8, r6
 80059d2:	d111      	bne.n	80059f8 <__cvt+0x8e>
 80059d4:	f898 3000 	ldrb.w	r3, [r8]
 80059d8:	2b30      	cmp	r3, #48	; 0x30
 80059da:	d10a      	bne.n	80059f2 <__cvt+0x88>
 80059dc:	2200      	movs	r2, #0
 80059de:	2300      	movs	r3, #0
 80059e0:	4620      	mov	r0, r4
 80059e2:	4629      	mov	r1, r5
 80059e4:	f7fb f828 	bl	8000a38 <__aeabi_dcmpeq>
 80059e8:	b918      	cbnz	r0, 80059f2 <__cvt+0x88>
 80059ea:	f1c6 0601 	rsb	r6, r6, #1
 80059ee:	f8ca 6000 	str.w	r6, [sl]
 80059f2:	f8da 3000 	ldr.w	r3, [sl]
 80059f6:	4499      	add	r9, r3
 80059f8:	2200      	movs	r2, #0
 80059fa:	2300      	movs	r3, #0
 80059fc:	4620      	mov	r0, r4
 80059fe:	4629      	mov	r1, r5
 8005a00:	f7fb f81a 	bl	8000a38 <__aeabi_dcmpeq>
 8005a04:	b938      	cbnz	r0, 8005a16 <__cvt+0xac>
 8005a06:	2230      	movs	r2, #48	; 0x30
 8005a08:	9b03      	ldr	r3, [sp, #12]
 8005a0a:	454b      	cmp	r3, r9
 8005a0c:	d205      	bcs.n	8005a1a <__cvt+0xb0>
 8005a0e:	1c59      	adds	r1, r3, #1
 8005a10:	9103      	str	r1, [sp, #12]
 8005a12:	701a      	strb	r2, [r3, #0]
 8005a14:	e7f8      	b.n	8005a08 <__cvt+0x9e>
 8005a16:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a1a:	9b03      	ldr	r3, [sp, #12]
 8005a1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a1e:	eba3 0308 	sub.w	r3, r3, r8
 8005a22:	4640      	mov	r0, r8
 8005a24:	6013      	str	r3, [r2, #0]
 8005a26:	b004      	add	sp, #16
 8005a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005a2c <__exponent>:
 8005a2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a2e:	2900      	cmp	r1, #0
 8005a30:	4604      	mov	r4, r0
 8005a32:	bfba      	itte	lt
 8005a34:	4249      	neglt	r1, r1
 8005a36:	232d      	movlt	r3, #45	; 0x2d
 8005a38:	232b      	movge	r3, #43	; 0x2b
 8005a3a:	2909      	cmp	r1, #9
 8005a3c:	f804 2b02 	strb.w	r2, [r4], #2
 8005a40:	7043      	strb	r3, [r0, #1]
 8005a42:	dd20      	ble.n	8005a86 <__exponent+0x5a>
 8005a44:	f10d 0307 	add.w	r3, sp, #7
 8005a48:	461f      	mov	r7, r3
 8005a4a:	260a      	movs	r6, #10
 8005a4c:	fb91 f5f6 	sdiv	r5, r1, r6
 8005a50:	fb06 1115 	mls	r1, r6, r5, r1
 8005a54:	3130      	adds	r1, #48	; 0x30
 8005a56:	2d09      	cmp	r5, #9
 8005a58:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005a5c:	f103 32ff 	add.w	r2, r3, #4294967295
 8005a60:	4629      	mov	r1, r5
 8005a62:	dc09      	bgt.n	8005a78 <__exponent+0x4c>
 8005a64:	3130      	adds	r1, #48	; 0x30
 8005a66:	3b02      	subs	r3, #2
 8005a68:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005a6c:	42bb      	cmp	r3, r7
 8005a6e:	4622      	mov	r2, r4
 8005a70:	d304      	bcc.n	8005a7c <__exponent+0x50>
 8005a72:	1a10      	subs	r0, r2, r0
 8005a74:	b003      	add	sp, #12
 8005a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a78:	4613      	mov	r3, r2
 8005a7a:	e7e7      	b.n	8005a4c <__exponent+0x20>
 8005a7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a80:	f804 2b01 	strb.w	r2, [r4], #1
 8005a84:	e7f2      	b.n	8005a6c <__exponent+0x40>
 8005a86:	2330      	movs	r3, #48	; 0x30
 8005a88:	4419      	add	r1, r3
 8005a8a:	7083      	strb	r3, [r0, #2]
 8005a8c:	1d02      	adds	r2, r0, #4
 8005a8e:	70c1      	strb	r1, [r0, #3]
 8005a90:	e7ef      	b.n	8005a72 <__exponent+0x46>
	...

08005a94 <_printf_float>:
 8005a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a98:	b08d      	sub	sp, #52	; 0x34
 8005a9a:	460c      	mov	r4, r1
 8005a9c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005aa0:	4616      	mov	r6, r2
 8005aa2:	461f      	mov	r7, r3
 8005aa4:	4605      	mov	r5, r0
 8005aa6:	f001 f8ef 	bl	8006c88 <_localeconv_r>
 8005aaa:	6803      	ldr	r3, [r0, #0]
 8005aac:	9304      	str	r3, [sp, #16]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fa fb96 	bl	80001e0 <strlen>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	930a      	str	r3, [sp, #40]	; 0x28
 8005ab8:	f8d8 3000 	ldr.w	r3, [r8]
 8005abc:	9005      	str	r0, [sp, #20]
 8005abe:	3307      	adds	r3, #7
 8005ac0:	f023 0307 	bic.w	r3, r3, #7
 8005ac4:	f103 0208 	add.w	r2, r3, #8
 8005ac8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005acc:	f8d4 b000 	ldr.w	fp, [r4]
 8005ad0:	f8c8 2000 	str.w	r2, [r8]
 8005ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005adc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005ae0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005ae4:	9307      	str	r3, [sp, #28]
 8005ae6:	f8cd 8018 	str.w	r8, [sp, #24]
 8005aea:	f04f 32ff 	mov.w	r2, #4294967295
 8005aee:	4ba7      	ldr	r3, [pc, #668]	; (8005d8c <_printf_float+0x2f8>)
 8005af0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005af4:	f7fa ffd2 	bl	8000a9c <__aeabi_dcmpun>
 8005af8:	bb70      	cbnz	r0, 8005b58 <_printf_float+0xc4>
 8005afa:	f04f 32ff 	mov.w	r2, #4294967295
 8005afe:	4ba3      	ldr	r3, [pc, #652]	; (8005d8c <_printf_float+0x2f8>)
 8005b00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b04:	f7fa ffac 	bl	8000a60 <__aeabi_dcmple>
 8005b08:	bb30      	cbnz	r0, 8005b58 <_printf_float+0xc4>
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	4640      	mov	r0, r8
 8005b10:	4649      	mov	r1, r9
 8005b12:	f7fa ff9b 	bl	8000a4c <__aeabi_dcmplt>
 8005b16:	b110      	cbz	r0, 8005b1e <_printf_float+0x8a>
 8005b18:	232d      	movs	r3, #45	; 0x2d
 8005b1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b1e:	4a9c      	ldr	r2, [pc, #624]	; (8005d90 <_printf_float+0x2fc>)
 8005b20:	4b9c      	ldr	r3, [pc, #624]	; (8005d94 <_printf_float+0x300>)
 8005b22:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005b26:	bf8c      	ite	hi
 8005b28:	4690      	movhi	r8, r2
 8005b2a:	4698      	movls	r8, r3
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	f02b 0204 	bic.w	r2, fp, #4
 8005b32:	6123      	str	r3, [r4, #16]
 8005b34:	6022      	str	r2, [r4, #0]
 8005b36:	f04f 0900 	mov.w	r9, #0
 8005b3a:	9700      	str	r7, [sp, #0]
 8005b3c:	4633      	mov	r3, r6
 8005b3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005b40:	4621      	mov	r1, r4
 8005b42:	4628      	mov	r0, r5
 8005b44:	f000 f9e6 	bl	8005f14 <_printf_common>
 8005b48:	3001      	adds	r0, #1
 8005b4a:	f040 808d 	bne.w	8005c68 <_printf_float+0x1d4>
 8005b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b52:	b00d      	add	sp, #52	; 0x34
 8005b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b58:	4642      	mov	r2, r8
 8005b5a:	464b      	mov	r3, r9
 8005b5c:	4640      	mov	r0, r8
 8005b5e:	4649      	mov	r1, r9
 8005b60:	f7fa ff9c 	bl	8000a9c <__aeabi_dcmpun>
 8005b64:	b110      	cbz	r0, 8005b6c <_printf_float+0xd8>
 8005b66:	4a8c      	ldr	r2, [pc, #560]	; (8005d98 <_printf_float+0x304>)
 8005b68:	4b8c      	ldr	r3, [pc, #560]	; (8005d9c <_printf_float+0x308>)
 8005b6a:	e7da      	b.n	8005b22 <_printf_float+0x8e>
 8005b6c:	6861      	ldr	r1, [r4, #4]
 8005b6e:	1c4b      	adds	r3, r1, #1
 8005b70:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005b74:	a80a      	add	r0, sp, #40	; 0x28
 8005b76:	d13e      	bne.n	8005bf6 <_printf_float+0x162>
 8005b78:	2306      	movs	r3, #6
 8005b7a:	6063      	str	r3, [r4, #4]
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005b82:	ab09      	add	r3, sp, #36	; 0x24
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	ec49 8b10 	vmov	d0, r8, r9
 8005b8a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005b8e:	6022      	str	r2, [r4, #0]
 8005b90:	f8cd a004 	str.w	sl, [sp, #4]
 8005b94:	6861      	ldr	r1, [r4, #4]
 8005b96:	4628      	mov	r0, r5
 8005b98:	f7ff fee7 	bl	800596a <__cvt>
 8005b9c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005ba0:	2b47      	cmp	r3, #71	; 0x47
 8005ba2:	4680      	mov	r8, r0
 8005ba4:	d109      	bne.n	8005bba <_printf_float+0x126>
 8005ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ba8:	1cd8      	adds	r0, r3, #3
 8005baa:	db02      	blt.n	8005bb2 <_printf_float+0x11e>
 8005bac:	6862      	ldr	r2, [r4, #4]
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	dd47      	ble.n	8005c42 <_printf_float+0x1ae>
 8005bb2:	f1aa 0a02 	sub.w	sl, sl, #2
 8005bb6:	fa5f fa8a 	uxtb.w	sl, sl
 8005bba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005bbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bc0:	d824      	bhi.n	8005c0c <_printf_float+0x178>
 8005bc2:	3901      	subs	r1, #1
 8005bc4:	4652      	mov	r2, sl
 8005bc6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005bca:	9109      	str	r1, [sp, #36]	; 0x24
 8005bcc:	f7ff ff2e 	bl	8005a2c <__exponent>
 8005bd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bd2:	1813      	adds	r3, r2, r0
 8005bd4:	2a01      	cmp	r2, #1
 8005bd6:	4681      	mov	r9, r0
 8005bd8:	6123      	str	r3, [r4, #16]
 8005bda:	dc02      	bgt.n	8005be2 <_printf_float+0x14e>
 8005bdc:	6822      	ldr	r2, [r4, #0]
 8005bde:	07d1      	lsls	r1, r2, #31
 8005be0:	d501      	bpl.n	8005be6 <_printf_float+0x152>
 8005be2:	3301      	adds	r3, #1
 8005be4:	6123      	str	r3, [r4, #16]
 8005be6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d0a5      	beq.n	8005b3a <_printf_float+0xa6>
 8005bee:	232d      	movs	r3, #45	; 0x2d
 8005bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bf4:	e7a1      	b.n	8005b3a <_printf_float+0xa6>
 8005bf6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005bfa:	f000 8177 	beq.w	8005eec <_printf_float+0x458>
 8005bfe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005c02:	d1bb      	bne.n	8005b7c <_printf_float+0xe8>
 8005c04:	2900      	cmp	r1, #0
 8005c06:	d1b9      	bne.n	8005b7c <_printf_float+0xe8>
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e7b6      	b.n	8005b7a <_printf_float+0xe6>
 8005c0c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005c10:	d119      	bne.n	8005c46 <_printf_float+0x1b2>
 8005c12:	2900      	cmp	r1, #0
 8005c14:	6863      	ldr	r3, [r4, #4]
 8005c16:	dd0c      	ble.n	8005c32 <_printf_float+0x19e>
 8005c18:	6121      	str	r1, [r4, #16]
 8005c1a:	b913      	cbnz	r3, 8005c22 <_printf_float+0x18e>
 8005c1c:	6822      	ldr	r2, [r4, #0]
 8005c1e:	07d2      	lsls	r2, r2, #31
 8005c20:	d502      	bpl.n	8005c28 <_printf_float+0x194>
 8005c22:	3301      	adds	r3, #1
 8005c24:	440b      	add	r3, r1
 8005c26:	6123      	str	r3, [r4, #16]
 8005c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c2a:	65a3      	str	r3, [r4, #88]	; 0x58
 8005c2c:	f04f 0900 	mov.w	r9, #0
 8005c30:	e7d9      	b.n	8005be6 <_printf_float+0x152>
 8005c32:	b913      	cbnz	r3, 8005c3a <_printf_float+0x1a6>
 8005c34:	6822      	ldr	r2, [r4, #0]
 8005c36:	07d0      	lsls	r0, r2, #31
 8005c38:	d501      	bpl.n	8005c3e <_printf_float+0x1aa>
 8005c3a:	3302      	adds	r3, #2
 8005c3c:	e7f3      	b.n	8005c26 <_printf_float+0x192>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e7f1      	b.n	8005c26 <_printf_float+0x192>
 8005c42:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005c46:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	db05      	blt.n	8005c5a <_printf_float+0x1c6>
 8005c4e:	6822      	ldr	r2, [r4, #0]
 8005c50:	6123      	str	r3, [r4, #16]
 8005c52:	07d1      	lsls	r1, r2, #31
 8005c54:	d5e8      	bpl.n	8005c28 <_printf_float+0x194>
 8005c56:	3301      	adds	r3, #1
 8005c58:	e7e5      	b.n	8005c26 <_printf_float+0x192>
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	bfd4      	ite	le
 8005c5e:	f1c3 0302 	rsble	r3, r3, #2
 8005c62:	2301      	movgt	r3, #1
 8005c64:	4413      	add	r3, r2
 8005c66:	e7de      	b.n	8005c26 <_printf_float+0x192>
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	055a      	lsls	r2, r3, #21
 8005c6c:	d407      	bmi.n	8005c7e <_printf_float+0x1ea>
 8005c6e:	6923      	ldr	r3, [r4, #16]
 8005c70:	4642      	mov	r2, r8
 8005c72:	4631      	mov	r1, r6
 8005c74:	4628      	mov	r0, r5
 8005c76:	47b8      	blx	r7
 8005c78:	3001      	adds	r0, #1
 8005c7a:	d12b      	bne.n	8005cd4 <_printf_float+0x240>
 8005c7c:	e767      	b.n	8005b4e <_printf_float+0xba>
 8005c7e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005c82:	f240 80dc 	bls.w	8005e3e <_printf_float+0x3aa>
 8005c86:	2200      	movs	r2, #0
 8005c88:	2300      	movs	r3, #0
 8005c8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c8e:	f7fa fed3 	bl	8000a38 <__aeabi_dcmpeq>
 8005c92:	2800      	cmp	r0, #0
 8005c94:	d033      	beq.n	8005cfe <_printf_float+0x26a>
 8005c96:	2301      	movs	r3, #1
 8005c98:	4a41      	ldr	r2, [pc, #260]	; (8005da0 <_printf_float+0x30c>)
 8005c9a:	4631      	mov	r1, r6
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	47b8      	blx	r7
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	f43f af54 	beq.w	8005b4e <_printf_float+0xba>
 8005ca6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005caa:	429a      	cmp	r2, r3
 8005cac:	db02      	blt.n	8005cb4 <_printf_float+0x220>
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	07d8      	lsls	r0, r3, #31
 8005cb2:	d50f      	bpl.n	8005cd4 <_printf_float+0x240>
 8005cb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cb8:	4631      	mov	r1, r6
 8005cba:	4628      	mov	r0, r5
 8005cbc:	47b8      	blx	r7
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	f43f af45 	beq.w	8005b4e <_printf_float+0xba>
 8005cc4:	f04f 0800 	mov.w	r8, #0
 8005cc8:	f104 091a 	add.w	r9, r4, #26
 8005ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	4543      	cmp	r3, r8
 8005cd2:	dc09      	bgt.n	8005ce8 <_printf_float+0x254>
 8005cd4:	6823      	ldr	r3, [r4, #0]
 8005cd6:	079b      	lsls	r3, r3, #30
 8005cd8:	f100 8103 	bmi.w	8005ee2 <_printf_float+0x44e>
 8005cdc:	68e0      	ldr	r0, [r4, #12]
 8005cde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ce0:	4298      	cmp	r0, r3
 8005ce2:	bfb8      	it	lt
 8005ce4:	4618      	movlt	r0, r3
 8005ce6:	e734      	b.n	8005b52 <_printf_float+0xbe>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	464a      	mov	r2, r9
 8005cec:	4631      	mov	r1, r6
 8005cee:	4628      	mov	r0, r5
 8005cf0:	47b8      	blx	r7
 8005cf2:	3001      	adds	r0, #1
 8005cf4:	f43f af2b 	beq.w	8005b4e <_printf_float+0xba>
 8005cf8:	f108 0801 	add.w	r8, r8, #1
 8005cfc:	e7e6      	b.n	8005ccc <_printf_float+0x238>
 8005cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	dc2b      	bgt.n	8005d5c <_printf_float+0x2c8>
 8005d04:	2301      	movs	r3, #1
 8005d06:	4a26      	ldr	r2, [pc, #152]	; (8005da0 <_printf_float+0x30c>)
 8005d08:	4631      	mov	r1, r6
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	47b8      	blx	r7
 8005d0e:	3001      	adds	r0, #1
 8005d10:	f43f af1d 	beq.w	8005b4e <_printf_float+0xba>
 8005d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d16:	b923      	cbnz	r3, 8005d22 <_printf_float+0x28e>
 8005d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d1a:	b913      	cbnz	r3, 8005d22 <_printf_float+0x28e>
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	07d9      	lsls	r1, r3, #31
 8005d20:	d5d8      	bpl.n	8005cd4 <_printf_float+0x240>
 8005d22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d26:	4631      	mov	r1, r6
 8005d28:	4628      	mov	r0, r5
 8005d2a:	47b8      	blx	r7
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	f43f af0e 	beq.w	8005b4e <_printf_float+0xba>
 8005d32:	f04f 0900 	mov.w	r9, #0
 8005d36:	f104 0a1a 	add.w	sl, r4, #26
 8005d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d3c:	425b      	negs	r3, r3
 8005d3e:	454b      	cmp	r3, r9
 8005d40:	dc01      	bgt.n	8005d46 <_printf_float+0x2b2>
 8005d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d44:	e794      	b.n	8005c70 <_printf_float+0x1dc>
 8005d46:	2301      	movs	r3, #1
 8005d48:	4652      	mov	r2, sl
 8005d4a:	4631      	mov	r1, r6
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	47b8      	blx	r7
 8005d50:	3001      	adds	r0, #1
 8005d52:	f43f aefc 	beq.w	8005b4e <_printf_float+0xba>
 8005d56:	f109 0901 	add.w	r9, r9, #1
 8005d5a:	e7ee      	b.n	8005d3a <_printf_float+0x2a6>
 8005d5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d60:	429a      	cmp	r2, r3
 8005d62:	bfa8      	it	ge
 8005d64:	461a      	movge	r2, r3
 8005d66:	2a00      	cmp	r2, #0
 8005d68:	4691      	mov	r9, r2
 8005d6a:	dd07      	ble.n	8005d7c <_printf_float+0x2e8>
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	4631      	mov	r1, r6
 8005d70:	4642      	mov	r2, r8
 8005d72:	4628      	mov	r0, r5
 8005d74:	47b8      	blx	r7
 8005d76:	3001      	adds	r0, #1
 8005d78:	f43f aee9 	beq.w	8005b4e <_printf_float+0xba>
 8005d7c:	f104 031a 	add.w	r3, r4, #26
 8005d80:	f04f 0b00 	mov.w	fp, #0
 8005d84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d88:	9306      	str	r3, [sp, #24]
 8005d8a:	e015      	b.n	8005db8 <_printf_float+0x324>
 8005d8c:	7fefffff 	.word	0x7fefffff
 8005d90:	0800740c 	.word	0x0800740c
 8005d94:	08007408 	.word	0x08007408
 8005d98:	08007414 	.word	0x08007414
 8005d9c:	08007410 	.word	0x08007410
 8005da0:	08007418 	.word	0x08007418
 8005da4:	2301      	movs	r3, #1
 8005da6:	9a06      	ldr	r2, [sp, #24]
 8005da8:	4631      	mov	r1, r6
 8005daa:	4628      	mov	r0, r5
 8005dac:	47b8      	blx	r7
 8005dae:	3001      	adds	r0, #1
 8005db0:	f43f aecd 	beq.w	8005b4e <_printf_float+0xba>
 8005db4:	f10b 0b01 	add.w	fp, fp, #1
 8005db8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005dbc:	ebaa 0309 	sub.w	r3, sl, r9
 8005dc0:	455b      	cmp	r3, fp
 8005dc2:	dcef      	bgt.n	8005da4 <_printf_float+0x310>
 8005dc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	44d0      	add	r8, sl
 8005dcc:	db15      	blt.n	8005dfa <_printf_float+0x366>
 8005dce:	6823      	ldr	r3, [r4, #0]
 8005dd0:	07da      	lsls	r2, r3, #31
 8005dd2:	d412      	bmi.n	8005dfa <_printf_float+0x366>
 8005dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005dd8:	eba3 020a 	sub.w	r2, r3, sl
 8005ddc:	eba3 0a01 	sub.w	sl, r3, r1
 8005de0:	4592      	cmp	sl, r2
 8005de2:	bfa8      	it	ge
 8005de4:	4692      	movge	sl, r2
 8005de6:	f1ba 0f00 	cmp.w	sl, #0
 8005dea:	dc0e      	bgt.n	8005e0a <_printf_float+0x376>
 8005dec:	f04f 0800 	mov.w	r8, #0
 8005df0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005df4:	f104 091a 	add.w	r9, r4, #26
 8005df8:	e019      	b.n	8005e2e <_printf_float+0x39a>
 8005dfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dfe:	4631      	mov	r1, r6
 8005e00:	4628      	mov	r0, r5
 8005e02:	47b8      	blx	r7
 8005e04:	3001      	adds	r0, #1
 8005e06:	d1e5      	bne.n	8005dd4 <_printf_float+0x340>
 8005e08:	e6a1      	b.n	8005b4e <_printf_float+0xba>
 8005e0a:	4653      	mov	r3, sl
 8005e0c:	4642      	mov	r2, r8
 8005e0e:	4631      	mov	r1, r6
 8005e10:	4628      	mov	r0, r5
 8005e12:	47b8      	blx	r7
 8005e14:	3001      	adds	r0, #1
 8005e16:	d1e9      	bne.n	8005dec <_printf_float+0x358>
 8005e18:	e699      	b.n	8005b4e <_printf_float+0xba>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	464a      	mov	r2, r9
 8005e1e:	4631      	mov	r1, r6
 8005e20:	4628      	mov	r0, r5
 8005e22:	47b8      	blx	r7
 8005e24:	3001      	adds	r0, #1
 8005e26:	f43f ae92 	beq.w	8005b4e <_printf_float+0xba>
 8005e2a:	f108 0801 	add.w	r8, r8, #1
 8005e2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e32:	1a9b      	subs	r3, r3, r2
 8005e34:	eba3 030a 	sub.w	r3, r3, sl
 8005e38:	4543      	cmp	r3, r8
 8005e3a:	dcee      	bgt.n	8005e1a <_printf_float+0x386>
 8005e3c:	e74a      	b.n	8005cd4 <_printf_float+0x240>
 8005e3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e40:	2a01      	cmp	r2, #1
 8005e42:	dc01      	bgt.n	8005e48 <_printf_float+0x3b4>
 8005e44:	07db      	lsls	r3, r3, #31
 8005e46:	d53a      	bpl.n	8005ebe <_printf_float+0x42a>
 8005e48:	2301      	movs	r3, #1
 8005e4a:	4642      	mov	r2, r8
 8005e4c:	4631      	mov	r1, r6
 8005e4e:	4628      	mov	r0, r5
 8005e50:	47b8      	blx	r7
 8005e52:	3001      	adds	r0, #1
 8005e54:	f43f ae7b 	beq.w	8005b4e <_printf_float+0xba>
 8005e58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e5c:	4631      	mov	r1, r6
 8005e5e:	4628      	mov	r0, r5
 8005e60:	47b8      	blx	r7
 8005e62:	3001      	adds	r0, #1
 8005e64:	f108 0801 	add.w	r8, r8, #1
 8005e68:	f43f ae71 	beq.w	8005b4e <_printf_float+0xba>
 8005e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f103 3aff 	add.w	sl, r3, #4294967295
 8005e74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e78:	2300      	movs	r3, #0
 8005e7a:	f7fa fddd 	bl	8000a38 <__aeabi_dcmpeq>
 8005e7e:	b9c8      	cbnz	r0, 8005eb4 <_printf_float+0x420>
 8005e80:	4653      	mov	r3, sl
 8005e82:	4642      	mov	r2, r8
 8005e84:	4631      	mov	r1, r6
 8005e86:	4628      	mov	r0, r5
 8005e88:	47b8      	blx	r7
 8005e8a:	3001      	adds	r0, #1
 8005e8c:	d10e      	bne.n	8005eac <_printf_float+0x418>
 8005e8e:	e65e      	b.n	8005b4e <_printf_float+0xba>
 8005e90:	2301      	movs	r3, #1
 8005e92:	4652      	mov	r2, sl
 8005e94:	4631      	mov	r1, r6
 8005e96:	4628      	mov	r0, r5
 8005e98:	47b8      	blx	r7
 8005e9a:	3001      	adds	r0, #1
 8005e9c:	f43f ae57 	beq.w	8005b4e <_printf_float+0xba>
 8005ea0:	f108 0801 	add.w	r8, r8, #1
 8005ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	4543      	cmp	r3, r8
 8005eaa:	dcf1      	bgt.n	8005e90 <_printf_float+0x3fc>
 8005eac:	464b      	mov	r3, r9
 8005eae:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005eb2:	e6de      	b.n	8005c72 <_printf_float+0x1de>
 8005eb4:	f04f 0800 	mov.w	r8, #0
 8005eb8:	f104 0a1a 	add.w	sl, r4, #26
 8005ebc:	e7f2      	b.n	8005ea4 <_printf_float+0x410>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e7df      	b.n	8005e82 <_printf_float+0x3ee>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	464a      	mov	r2, r9
 8005ec6:	4631      	mov	r1, r6
 8005ec8:	4628      	mov	r0, r5
 8005eca:	47b8      	blx	r7
 8005ecc:	3001      	adds	r0, #1
 8005ece:	f43f ae3e 	beq.w	8005b4e <_printf_float+0xba>
 8005ed2:	f108 0801 	add.w	r8, r8, #1
 8005ed6:	68e3      	ldr	r3, [r4, #12]
 8005ed8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005eda:	1a9b      	subs	r3, r3, r2
 8005edc:	4543      	cmp	r3, r8
 8005ede:	dcf0      	bgt.n	8005ec2 <_printf_float+0x42e>
 8005ee0:	e6fc      	b.n	8005cdc <_printf_float+0x248>
 8005ee2:	f04f 0800 	mov.w	r8, #0
 8005ee6:	f104 0919 	add.w	r9, r4, #25
 8005eea:	e7f4      	b.n	8005ed6 <_printf_float+0x442>
 8005eec:	2900      	cmp	r1, #0
 8005eee:	f43f ae8b 	beq.w	8005c08 <_printf_float+0x174>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005ef8:	ab09      	add	r3, sp, #36	; 0x24
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	ec49 8b10 	vmov	d0, r8, r9
 8005f00:	6022      	str	r2, [r4, #0]
 8005f02:	f8cd a004 	str.w	sl, [sp, #4]
 8005f06:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	f7ff fd2d 	bl	800596a <__cvt>
 8005f10:	4680      	mov	r8, r0
 8005f12:	e648      	b.n	8005ba6 <_printf_float+0x112>

08005f14 <_printf_common>:
 8005f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f18:	4691      	mov	r9, r2
 8005f1a:	461f      	mov	r7, r3
 8005f1c:	688a      	ldr	r2, [r1, #8]
 8005f1e:	690b      	ldr	r3, [r1, #16]
 8005f20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f24:	4293      	cmp	r3, r2
 8005f26:	bfb8      	it	lt
 8005f28:	4613      	movlt	r3, r2
 8005f2a:	f8c9 3000 	str.w	r3, [r9]
 8005f2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f32:	4606      	mov	r6, r0
 8005f34:	460c      	mov	r4, r1
 8005f36:	b112      	cbz	r2, 8005f3e <_printf_common+0x2a>
 8005f38:	3301      	adds	r3, #1
 8005f3a:	f8c9 3000 	str.w	r3, [r9]
 8005f3e:	6823      	ldr	r3, [r4, #0]
 8005f40:	0699      	lsls	r1, r3, #26
 8005f42:	bf42      	ittt	mi
 8005f44:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005f48:	3302      	addmi	r3, #2
 8005f4a:	f8c9 3000 	strmi.w	r3, [r9]
 8005f4e:	6825      	ldr	r5, [r4, #0]
 8005f50:	f015 0506 	ands.w	r5, r5, #6
 8005f54:	d107      	bne.n	8005f66 <_printf_common+0x52>
 8005f56:	f104 0a19 	add.w	sl, r4, #25
 8005f5a:	68e3      	ldr	r3, [r4, #12]
 8005f5c:	f8d9 2000 	ldr.w	r2, [r9]
 8005f60:	1a9b      	subs	r3, r3, r2
 8005f62:	42ab      	cmp	r3, r5
 8005f64:	dc28      	bgt.n	8005fb8 <_printf_common+0xa4>
 8005f66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005f6a:	6822      	ldr	r2, [r4, #0]
 8005f6c:	3300      	adds	r3, #0
 8005f6e:	bf18      	it	ne
 8005f70:	2301      	movne	r3, #1
 8005f72:	0692      	lsls	r2, r2, #26
 8005f74:	d42d      	bmi.n	8005fd2 <_printf_common+0xbe>
 8005f76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f7a:	4639      	mov	r1, r7
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	47c0      	blx	r8
 8005f80:	3001      	adds	r0, #1
 8005f82:	d020      	beq.n	8005fc6 <_printf_common+0xb2>
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	68e5      	ldr	r5, [r4, #12]
 8005f88:	f8d9 2000 	ldr.w	r2, [r9]
 8005f8c:	f003 0306 	and.w	r3, r3, #6
 8005f90:	2b04      	cmp	r3, #4
 8005f92:	bf08      	it	eq
 8005f94:	1aad      	subeq	r5, r5, r2
 8005f96:	68a3      	ldr	r3, [r4, #8]
 8005f98:	6922      	ldr	r2, [r4, #16]
 8005f9a:	bf0c      	ite	eq
 8005f9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fa0:	2500      	movne	r5, #0
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	bfc4      	itt	gt
 8005fa6:	1a9b      	subgt	r3, r3, r2
 8005fa8:	18ed      	addgt	r5, r5, r3
 8005faa:	f04f 0900 	mov.w	r9, #0
 8005fae:	341a      	adds	r4, #26
 8005fb0:	454d      	cmp	r5, r9
 8005fb2:	d11a      	bne.n	8005fea <_printf_common+0xd6>
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	e008      	b.n	8005fca <_printf_common+0xb6>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	4652      	mov	r2, sl
 8005fbc:	4639      	mov	r1, r7
 8005fbe:	4630      	mov	r0, r6
 8005fc0:	47c0      	blx	r8
 8005fc2:	3001      	adds	r0, #1
 8005fc4:	d103      	bne.n	8005fce <_printf_common+0xba>
 8005fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8005fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fce:	3501      	adds	r5, #1
 8005fd0:	e7c3      	b.n	8005f5a <_printf_common+0x46>
 8005fd2:	18e1      	adds	r1, r4, r3
 8005fd4:	1c5a      	adds	r2, r3, #1
 8005fd6:	2030      	movs	r0, #48	; 0x30
 8005fd8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fdc:	4422      	add	r2, r4
 8005fde:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fe2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fe6:	3302      	adds	r3, #2
 8005fe8:	e7c5      	b.n	8005f76 <_printf_common+0x62>
 8005fea:	2301      	movs	r3, #1
 8005fec:	4622      	mov	r2, r4
 8005fee:	4639      	mov	r1, r7
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	47c0      	blx	r8
 8005ff4:	3001      	adds	r0, #1
 8005ff6:	d0e6      	beq.n	8005fc6 <_printf_common+0xb2>
 8005ff8:	f109 0901 	add.w	r9, r9, #1
 8005ffc:	e7d8      	b.n	8005fb0 <_printf_common+0x9c>

08005ffe <quorem>:
 8005ffe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006002:	6903      	ldr	r3, [r0, #16]
 8006004:	690c      	ldr	r4, [r1, #16]
 8006006:	42a3      	cmp	r3, r4
 8006008:	4680      	mov	r8, r0
 800600a:	f2c0 8082 	blt.w	8006112 <quorem+0x114>
 800600e:	3c01      	subs	r4, #1
 8006010:	f101 0714 	add.w	r7, r1, #20
 8006014:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006018:	f100 0614 	add.w	r6, r0, #20
 800601c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006020:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006024:	eb06 030c 	add.w	r3, r6, ip
 8006028:	3501      	adds	r5, #1
 800602a:	eb07 090c 	add.w	r9, r7, ip
 800602e:	9301      	str	r3, [sp, #4]
 8006030:	fbb0 f5f5 	udiv	r5, r0, r5
 8006034:	b395      	cbz	r5, 800609c <quorem+0x9e>
 8006036:	f04f 0a00 	mov.w	sl, #0
 800603a:	4638      	mov	r0, r7
 800603c:	46b6      	mov	lr, r6
 800603e:	46d3      	mov	fp, sl
 8006040:	f850 2b04 	ldr.w	r2, [r0], #4
 8006044:	b293      	uxth	r3, r2
 8006046:	fb05 a303 	mla	r3, r5, r3, sl
 800604a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800604e:	b29b      	uxth	r3, r3
 8006050:	ebab 0303 	sub.w	r3, fp, r3
 8006054:	0c12      	lsrs	r2, r2, #16
 8006056:	f8de b000 	ldr.w	fp, [lr]
 800605a:	fb05 a202 	mla	r2, r5, r2, sl
 800605e:	fa13 f38b 	uxtah	r3, r3, fp
 8006062:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006066:	fa1f fb82 	uxth.w	fp, r2
 800606a:	f8de 2000 	ldr.w	r2, [lr]
 800606e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006072:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006076:	b29b      	uxth	r3, r3
 8006078:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800607c:	4581      	cmp	r9, r0
 800607e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006082:	f84e 3b04 	str.w	r3, [lr], #4
 8006086:	d2db      	bcs.n	8006040 <quorem+0x42>
 8006088:	f856 300c 	ldr.w	r3, [r6, ip]
 800608c:	b933      	cbnz	r3, 800609c <quorem+0x9e>
 800608e:	9b01      	ldr	r3, [sp, #4]
 8006090:	3b04      	subs	r3, #4
 8006092:	429e      	cmp	r6, r3
 8006094:	461a      	mov	r2, r3
 8006096:	d330      	bcc.n	80060fa <quorem+0xfc>
 8006098:	f8c8 4010 	str.w	r4, [r8, #16]
 800609c:	4640      	mov	r0, r8
 800609e:	f001 f81f 	bl	80070e0 <__mcmp>
 80060a2:	2800      	cmp	r0, #0
 80060a4:	db25      	blt.n	80060f2 <quorem+0xf4>
 80060a6:	3501      	adds	r5, #1
 80060a8:	4630      	mov	r0, r6
 80060aa:	f04f 0c00 	mov.w	ip, #0
 80060ae:	f857 2b04 	ldr.w	r2, [r7], #4
 80060b2:	f8d0 e000 	ldr.w	lr, [r0]
 80060b6:	b293      	uxth	r3, r2
 80060b8:	ebac 0303 	sub.w	r3, ip, r3
 80060bc:	0c12      	lsrs	r2, r2, #16
 80060be:	fa13 f38e 	uxtah	r3, r3, lr
 80060c2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80060c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060d0:	45b9      	cmp	r9, r7
 80060d2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80060d6:	f840 3b04 	str.w	r3, [r0], #4
 80060da:	d2e8      	bcs.n	80060ae <quorem+0xb0>
 80060dc:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80060e0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80060e4:	b92a      	cbnz	r2, 80060f2 <quorem+0xf4>
 80060e6:	3b04      	subs	r3, #4
 80060e8:	429e      	cmp	r6, r3
 80060ea:	461a      	mov	r2, r3
 80060ec:	d30b      	bcc.n	8006106 <quorem+0x108>
 80060ee:	f8c8 4010 	str.w	r4, [r8, #16]
 80060f2:	4628      	mov	r0, r5
 80060f4:	b003      	add	sp, #12
 80060f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060fa:	6812      	ldr	r2, [r2, #0]
 80060fc:	3b04      	subs	r3, #4
 80060fe:	2a00      	cmp	r2, #0
 8006100:	d1ca      	bne.n	8006098 <quorem+0x9a>
 8006102:	3c01      	subs	r4, #1
 8006104:	e7c5      	b.n	8006092 <quorem+0x94>
 8006106:	6812      	ldr	r2, [r2, #0]
 8006108:	3b04      	subs	r3, #4
 800610a:	2a00      	cmp	r2, #0
 800610c:	d1ef      	bne.n	80060ee <quorem+0xf0>
 800610e:	3c01      	subs	r4, #1
 8006110:	e7ea      	b.n	80060e8 <quorem+0xea>
 8006112:	2000      	movs	r0, #0
 8006114:	e7ee      	b.n	80060f4 <quorem+0xf6>
	...

08006118 <_dtoa_r>:
 8006118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611c:	ec57 6b10 	vmov	r6, r7, d0
 8006120:	b097      	sub	sp, #92	; 0x5c
 8006122:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006124:	9106      	str	r1, [sp, #24]
 8006126:	4604      	mov	r4, r0
 8006128:	920b      	str	r2, [sp, #44]	; 0x2c
 800612a:	9312      	str	r3, [sp, #72]	; 0x48
 800612c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006130:	e9cd 6700 	strd	r6, r7, [sp]
 8006134:	b93d      	cbnz	r5, 8006146 <_dtoa_r+0x2e>
 8006136:	2010      	movs	r0, #16
 8006138:	f000 fdb4 	bl	8006ca4 <malloc>
 800613c:	6260      	str	r0, [r4, #36]	; 0x24
 800613e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006142:	6005      	str	r5, [r0, #0]
 8006144:	60c5      	str	r5, [r0, #12]
 8006146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006148:	6819      	ldr	r1, [r3, #0]
 800614a:	b151      	cbz	r1, 8006162 <_dtoa_r+0x4a>
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	604a      	str	r2, [r1, #4]
 8006150:	2301      	movs	r3, #1
 8006152:	4093      	lsls	r3, r2
 8006154:	608b      	str	r3, [r1, #8]
 8006156:	4620      	mov	r0, r4
 8006158:	f000 fde0 	bl	8006d1c <_Bfree>
 800615c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800615e:	2200      	movs	r2, #0
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	1e3b      	subs	r3, r7, #0
 8006164:	bfbb      	ittet	lt
 8006166:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800616a:	9301      	strlt	r3, [sp, #4]
 800616c:	2300      	movge	r3, #0
 800616e:	2201      	movlt	r2, #1
 8006170:	bfac      	ite	ge
 8006172:	f8c8 3000 	strge.w	r3, [r8]
 8006176:	f8c8 2000 	strlt.w	r2, [r8]
 800617a:	4baf      	ldr	r3, [pc, #700]	; (8006438 <_dtoa_r+0x320>)
 800617c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006180:	ea33 0308 	bics.w	r3, r3, r8
 8006184:	d114      	bne.n	80061b0 <_dtoa_r+0x98>
 8006186:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006188:	f242 730f 	movw	r3, #9999	; 0x270f
 800618c:	6013      	str	r3, [r2, #0]
 800618e:	9b00      	ldr	r3, [sp, #0]
 8006190:	b923      	cbnz	r3, 800619c <_dtoa_r+0x84>
 8006192:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006196:	2800      	cmp	r0, #0
 8006198:	f000 8542 	beq.w	8006c20 <_dtoa_r+0xb08>
 800619c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800619e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800644c <_dtoa_r+0x334>
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 8544 	beq.w	8006c30 <_dtoa_r+0xb18>
 80061a8:	f10b 0303 	add.w	r3, fp, #3
 80061ac:	f000 bd3e 	b.w	8006c2c <_dtoa_r+0xb14>
 80061b0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80061b4:	2200      	movs	r2, #0
 80061b6:	2300      	movs	r3, #0
 80061b8:	4630      	mov	r0, r6
 80061ba:	4639      	mov	r1, r7
 80061bc:	f7fa fc3c 	bl	8000a38 <__aeabi_dcmpeq>
 80061c0:	4681      	mov	r9, r0
 80061c2:	b168      	cbz	r0, 80061e0 <_dtoa_r+0xc8>
 80061c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80061c6:	2301      	movs	r3, #1
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 8524 	beq.w	8006c1a <_dtoa_r+0xb02>
 80061d2:	4b9a      	ldr	r3, [pc, #616]	; (800643c <_dtoa_r+0x324>)
 80061d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80061d6:	f103 3bff 	add.w	fp, r3, #4294967295
 80061da:	6013      	str	r3, [r2, #0]
 80061dc:	f000 bd28 	b.w	8006c30 <_dtoa_r+0xb18>
 80061e0:	aa14      	add	r2, sp, #80	; 0x50
 80061e2:	a915      	add	r1, sp, #84	; 0x54
 80061e4:	ec47 6b10 	vmov	d0, r6, r7
 80061e8:	4620      	mov	r0, r4
 80061ea:	f000 fff0 	bl	80071ce <__d2b>
 80061ee:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80061f2:	9004      	str	r0, [sp, #16]
 80061f4:	2d00      	cmp	r5, #0
 80061f6:	d07c      	beq.n	80062f2 <_dtoa_r+0x1da>
 80061f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80061fc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006200:	46b2      	mov	sl, r6
 8006202:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006206:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800620a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800620e:	2200      	movs	r2, #0
 8006210:	4b8b      	ldr	r3, [pc, #556]	; (8006440 <_dtoa_r+0x328>)
 8006212:	4650      	mov	r0, sl
 8006214:	4659      	mov	r1, fp
 8006216:	f7f9 ffef 	bl	80001f8 <__aeabi_dsub>
 800621a:	a381      	add	r3, pc, #516	; (adr r3, 8006420 <_dtoa_r+0x308>)
 800621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006220:	f7fa f9a2 	bl	8000568 <__aeabi_dmul>
 8006224:	a380      	add	r3, pc, #512	; (adr r3, 8006428 <_dtoa_r+0x310>)
 8006226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622a:	f7f9 ffe7 	bl	80001fc <__adddf3>
 800622e:	4606      	mov	r6, r0
 8006230:	4628      	mov	r0, r5
 8006232:	460f      	mov	r7, r1
 8006234:	f7fa f92e 	bl	8000494 <__aeabi_i2d>
 8006238:	a37d      	add	r3, pc, #500	; (adr r3, 8006430 <_dtoa_r+0x318>)
 800623a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623e:	f7fa f993 	bl	8000568 <__aeabi_dmul>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4630      	mov	r0, r6
 8006248:	4639      	mov	r1, r7
 800624a:	f7f9 ffd7 	bl	80001fc <__adddf3>
 800624e:	4606      	mov	r6, r0
 8006250:	460f      	mov	r7, r1
 8006252:	f7fa fc39 	bl	8000ac8 <__aeabi_d2iz>
 8006256:	2200      	movs	r2, #0
 8006258:	4682      	mov	sl, r0
 800625a:	2300      	movs	r3, #0
 800625c:	4630      	mov	r0, r6
 800625e:	4639      	mov	r1, r7
 8006260:	f7fa fbf4 	bl	8000a4c <__aeabi_dcmplt>
 8006264:	b148      	cbz	r0, 800627a <_dtoa_r+0x162>
 8006266:	4650      	mov	r0, sl
 8006268:	f7fa f914 	bl	8000494 <__aeabi_i2d>
 800626c:	4632      	mov	r2, r6
 800626e:	463b      	mov	r3, r7
 8006270:	f7fa fbe2 	bl	8000a38 <__aeabi_dcmpeq>
 8006274:	b908      	cbnz	r0, 800627a <_dtoa_r+0x162>
 8006276:	f10a 3aff 	add.w	sl, sl, #4294967295
 800627a:	f1ba 0f16 	cmp.w	sl, #22
 800627e:	d859      	bhi.n	8006334 <_dtoa_r+0x21c>
 8006280:	4970      	ldr	r1, [pc, #448]	; (8006444 <_dtoa_r+0x32c>)
 8006282:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006286:	e9dd 2300 	ldrd	r2, r3, [sp]
 800628a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800628e:	f7fa fbfb 	bl	8000a88 <__aeabi_dcmpgt>
 8006292:	2800      	cmp	r0, #0
 8006294:	d050      	beq.n	8006338 <_dtoa_r+0x220>
 8006296:	f10a 3aff 	add.w	sl, sl, #4294967295
 800629a:	2300      	movs	r3, #0
 800629c:	930f      	str	r3, [sp, #60]	; 0x3c
 800629e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80062a0:	1b5d      	subs	r5, r3, r5
 80062a2:	f1b5 0801 	subs.w	r8, r5, #1
 80062a6:	bf49      	itett	mi
 80062a8:	f1c5 0301 	rsbmi	r3, r5, #1
 80062ac:	2300      	movpl	r3, #0
 80062ae:	9305      	strmi	r3, [sp, #20]
 80062b0:	f04f 0800 	movmi.w	r8, #0
 80062b4:	bf58      	it	pl
 80062b6:	9305      	strpl	r3, [sp, #20]
 80062b8:	f1ba 0f00 	cmp.w	sl, #0
 80062bc:	db3e      	blt.n	800633c <_dtoa_r+0x224>
 80062be:	2300      	movs	r3, #0
 80062c0:	44d0      	add	r8, sl
 80062c2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80062c6:	9307      	str	r3, [sp, #28]
 80062c8:	9b06      	ldr	r3, [sp, #24]
 80062ca:	2b09      	cmp	r3, #9
 80062cc:	f200 8090 	bhi.w	80063f0 <_dtoa_r+0x2d8>
 80062d0:	2b05      	cmp	r3, #5
 80062d2:	bfc4      	itt	gt
 80062d4:	3b04      	subgt	r3, #4
 80062d6:	9306      	strgt	r3, [sp, #24]
 80062d8:	9b06      	ldr	r3, [sp, #24]
 80062da:	f1a3 0302 	sub.w	r3, r3, #2
 80062de:	bfcc      	ite	gt
 80062e0:	2500      	movgt	r5, #0
 80062e2:	2501      	movle	r5, #1
 80062e4:	2b03      	cmp	r3, #3
 80062e6:	f200 808f 	bhi.w	8006408 <_dtoa_r+0x2f0>
 80062ea:	e8df f003 	tbb	[pc, r3]
 80062ee:	7f7d      	.short	0x7f7d
 80062f0:	7131      	.short	0x7131
 80062f2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80062f6:	441d      	add	r5, r3
 80062f8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80062fc:	2820      	cmp	r0, #32
 80062fe:	dd13      	ble.n	8006328 <_dtoa_r+0x210>
 8006300:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006304:	9b00      	ldr	r3, [sp, #0]
 8006306:	fa08 f800 	lsl.w	r8, r8, r0
 800630a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800630e:	fa23 f000 	lsr.w	r0, r3, r0
 8006312:	ea48 0000 	orr.w	r0, r8, r0
 8006316:	f7fa f8ad 	bl	8000474 <__aeabi_ui2d>
 800631a:	2301      	movs	r3, #1
 800631c:	4682      	mov	sl, r0
 800631e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006322:	3d01      	subs	r5, #1
 8006324:	9313      	str	r3, [sp, #76]	; 0x4c
 8006326:	e772      	b.n	800620e <_dtoa_r+0xf6>
 8006328:	9b00      	ldr	r3, [sp, #0]
 800632a:	f1c0 0020 	rsb	r0, r0, #32
 800632e:	fa03 f000 	lsl.w	r0, r3, r0
 8006332:	e7f0      	b.n	8006316 <_dtoa_r+0x1fe>
 8006334:	2301      	movs	r3, #1
 8006336:	e7b1      	b.n	800629c <_dtoa_r+0x184>
 8006338:	900f      	str	r0, [sp, #60]	; 0x3c
 800633a:	e7b0      	b.n	800629e <_dtoa_r+0x186>
 800633c:	9b05      	ldr	r3, [sp, #20]
 800633e:	eba3 030a 	sub.w	r3, r3, sl
 8006342:	9305      	str	r3, [sp, #20]
 8006344:	f1ca 0300 	rsb	r3, sl, #0
 8006348:	9307      	str	r3, [sp, #28]
 800634a:	2300      	movs	r3, #0
 800634c:	930e      	str	r3, [sp, #56]	; 0x38
 800634e:	e7bb      	b.n	80062c8 <_dtoa_r+0x1b0>
 8006350:	2301      	movs	r3, #1
 8006352:	930a      	str	r3, [sp, #40]	; 0x28
 8006354:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006356:	2b00      	cmp	r3, #0
 8006358:	dd59      	ble.n	800640e <_dtoa_r+0x2f6>
 800635a:	9302      	str	r3, [sp, #8]
 800635c:	4699      	mov	r9, r3
 800635e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006360:	2200      	movs	r2, #0
 8006362:	6072      	str	r2, [r6, #4]
 8006364:	2204      	movs	r2, #4
 8006366:	f102 0014 	add.w	r0, r2, #20
 800636a:	4298      	cmp	r0, r3
 800636c:	6871      	ldr	r1, [r6, #4]
 800636e:	d953      	bls.n	8006418 <_dtoa_r+0x300>
 8006370:	4620      	mov	r0, r4
 8006372:	f000 fc9f 	bl	8006cb4 <_Balloc>
 8006376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006378:	6030      	str	r0, [r6, #0]
 800637a:	f1b9 0f0e 	cmp.w	r9, #14
 800637e:	f8d3 b000 	ldr.w	fp, [r3]
 8006382:	f200 80e6 	bhi.w	8006552 <_dtoa_r+0x43a>
 8006386:	2d00      	cmp	r5, #0
 8006388:	f000 80e3 	beq.w	8006552 <_dtoa_r+0x43a>
 800638c:	ed9d 7b00 	vldr	d7, [sp]
 8006390:	f1ba 0f00 	cmp.w	sl, #0
 8006394:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006398:	dd74      	ble.n	8006484 <_dtoa_r+0x36c>
 800639a:	4a2a      	ldr	r2, [pc, #168]	; (8006444 <_dtoa_r+0x32c>)
 800639c:	f00a 030f 	and.w	r3, sl, #15
 80063a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80063a4:	ed93 7b00 	vldr	d7, [r3]
 80063a8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80063ac:	06f0      	lsls	r0, r6, #27
 80063ae:	ed8d 7b08 	vstr	d7, [sp, #32]
 80063b2:	d565      	bpl.n	8006480 <_dtoa_r+0x368>
 80063b4:	4b24      	ldr	r3, [pc, #144]	; (8006448 <_dtoa_r+0x330>)
 80063b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80063be:	f7fa f9fd 	bl	80007bc <__aeabi_ddiv>
 80063c2:	e9cd 0100 	strd	r0, r1, [sp]
 80063c6:	f006 060f 	and.w	r6, r6, #15
 80063ca:	2503      	movs	r5, #3
 80063cc:	4f1e      	ldr	r7, [pc, #120]	; (8006448 <_dtoa_r+0x330>)
 80063ce:	e04c      	b.n	800646a <_dtoa_r+0x352>
 80063d0:	2301      	movs	r3, #1
 80063d2:	930a      	str	r3, [sp, #40]	; 0x28
 80063d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063d6:	4453      	add	r3, sl
 80063d8:	f103 0901 	add.w	r9, r3, #1
 80063dc:	9302      	str	r3, [sp, #8]
 80063de:	464b      	mov	r3, r9
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	bfb8      	it	lt
 80063e4:	2301      	movlt	r3, #1
 80063e6:	e7ba      	b.n	800635e <_dtoa_r+0x246>
 80063e8:	2300      	movs	r3, #0
 80063ea:	e7b2      	b.n	8006352 <_dtoa_r+0x23a>
 80063ec:	2300      	movs	r3, #0
 80063ee:	e7f0      	b.n	80063d2 <_dtoa_r+0x2ba>
 80063f0:	2501      	movs	r5, #1
 80063f2:	2300      	movs	r3, #0
 80063f4:	9306      	str	r3, [sp, #24]
 80063f6:	950a      	str	r5, [sp, #40]	; 0x28
 80063f8:	f04f 33ff 	mov.w	r3, #4294967295
 80063fc:	9302      	str	r3, [sp, #8]
 80063fe:	4699      	mov	r9, r3
 8006400:	2200      	movs	r2, #0
 8006402:	2312      	movs	r3, #18
 8006404:	920b      	str	r2, [sp, #44]	; 0x2c
 8006406:	e7aa      	b.n	800635e <_dtoa_r+0x246>
 8006408:	2301      	movs	r3, #1
 800640a:	930a      	str	r3, [sp, #40]	; 0x28
 800640c:	e7f4      	b.n	80063f8 <_dtoa_r+0x2e0>
 800640e:	2301      	movs	r3, #1
 8006410:	9302      	str	r3, [sp, #8]
 8006412:	4699      	mov	r9, r3
 8006414:	461a      	mov	r2, r3
 8006416:	e7f5      	b.n	8006404 <_dtoa_r+0x2ec>
 8006418:	3101      	adds	r1, #1
 800641a:	6071      	str	r1, [r6, #4]
 800641c:	0052      	lsls	r2, r2, #1
 800641e:	e7a2      	b.n	8006366 <_dtoa_r+0x24e>
 8006420:	636f4361 	.word	0x636f4361
 8006424:	3fd287a7 	.word	0x3fd287a7
 8006428:	8b60c8b3 	.word	0x8b60c8b3
 800642c:	3fc68a28 	.word	0x3fc68a28
 8006430:	509f79fb 	.word	0x509f79fb
 8006434:	3fd34413 	.word	0x3fd34413
 8006438:	7ff00000 	.word	0x7ff00000
 800643c:	08007419 	.word	0x08007419
 8006440:	3ff80000 	.word	0x3ff80000
 8006444:	08007450 	.word	0x08007450
 8006448:	08007428 	.word	0x08007428
 800644c:	08007423 	.word	0x08007423
 8006450:	07f1      	lsls	r1, r6, #31
 8006452:	d508      	bpl.n	8006466 <_dtoa_r+0x34e>
 8006454:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800645c:	f7fa f884 	bl	8000568 <__aeabi_dmul>
 8006460:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006464:	3501      	adds	r5, #1
 8006466:	1076      	asrs	r6, r6, #1
 8006468:	3708      	adds	r7, #8
 800646a:	2e00      	cmp	r6, #0
 800646c:	d1f0      	bne.n	8006450 <_dtoa_r+0x338>
 800646e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006472:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006476:	f7fa f9a1 	bl	80007bc <__aeabi_ddiv>
 800647a:	e9cd 0100 	strd	r0, r1, [sp]
 800647e:	e01a      	b.n	80064b6 <_dtoa_r+0x39e>
 8006480:	2502      	movs	r5, #2
 8006482:	e7a3      	b.n	80063cc <_dtoa_r+0x2b4>
 8006484:	f000 80a0 	beq.w	80065c8 <_dtoa_r+0x4b0>
 8006488:	f1ca 0600 	rsb	r6, sl, #0
 800648c:	4b9f      	ldr	r3, [pc, #636]	; (800670c <_dtoa_r+0x5f4>)
 800648e:	4fa0      	ldr	r7, [pc, #640]	; (8006710 <_dtoa_r+0x5f8>)
 8006490:	f006 020f 	and.w	r2, r6, #15
 8006494:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80064a0:	f7fa f862 	bl	8000568 <__aeabi_dmul>
 80064a4:	e9cd 0100 	strd	r0, r1, [sp]
 80064a8:	1136      	asrs	r6, r6, #4
 80064aa:	2300      	movs	r3, #0
 80064ac:	2502      	movs	r5, #2
 80064ae:	2e00      	cmp	r6, #0
 80064b0:	d17f      	bne.n	80065b2 <_dtoa_r+0x49a>
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1e1      	bne.n	800647a <_dtoa_r+0x362>
 80064b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 8087 	beq.w	80065cc <_dtoa_r+0x4b4>
 80064be:	e9dd 6700 	ldrd	r6, r7, [sp]
 80064c2:	2200      	movs	r2, #0
 80064c4:	4b93      	ldr	r3, [pc, #588]	; (8006714 <_dtoa_r+0x5fc>)
 80064c6:	4630      	mov	r0, r6
 80064c8:	4639      	mov	r1, r7
 80064ca:	f7fa fabf 	bl	8000a4c <__aeabi_dcmplt>
 80064ce:	2800      	cmp	r0, #0
 80064d0:	d07c      	beq.n	80065cc <_dtoa_r+0x4b4>
 80064d2:	f1b9 0f00 	cmp.w	r9, #0
 80064d6:	d079      	beq.n	80065cc <_dtoa_r+0x4b4>
 80064d8:	9b02      	ldr	r3, [sp, #8]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	dd35      	ble.n	800654a <_dtoa_r+0x432>
 80064de:	f10a 33ff 	add.w	r3, sl, #4294967295
 80064e2:	9308      	str	r3, [sp, #32]
 80064e4:	4639      	mov	r1, r7
 80064e6:	2200      	movs	r2, #0
 80064e8:	4b8b      	ldr	r3, [pc, #556]	; (8006718 <_dtoa_r+0x600>)
 80064ea:	4630      	mov	r0, r6
 80064ec:	f7fa f83c 	bl	8000568 <__aeabi_dmul>
 80064f0:	e9cd 0100 	strd	r0, r1, [sp]
 80064f4:	9f02      	ldr	r7, [sp, #8]
 80064f6:	3501      	adds	r5, #1
 80064f8:	4628      	mov	r0, r5
 80064fa:	f7f9 ffcb 	bl	8000494 <__aeabi_i2d>
 80064fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006502:	f7fa f831 	bl	8000568 <__aeabi_dmul>
 8006506:	2200      	movs	r2, #0
 8006508:	4b84      	ldr	r3, [pc, #528]	; (800671c <_dtoa_r+0x604>)
 800650a:	f7f9 fe77 	bl	80001fc <__adddf3>
 800650e:	4605      	mov	r5, r0
 8006510:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006514:	2f00      	cmp	r7, #0
 8006516:	d15d      	bne.n	80065d4 <_dtoa_r+0x4bc>
 8006518:	2200      	movs	r2, #0
 800651a:	4b81      	ldr	r3, [pc, #516]	; (8006720 <_dtoa_r+0x608>)
 800651c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006520:	f7f9 fe6a 	bl	80001f8 <__aeabi_dsub>
 8006524:	462a      	mov	r2, r5
 8006526:	4633      	mov	r3, r6
 8006528:	e9cd 0100 	strd	r0, r1, [sp]
 800652c:	f7fa faac 	bl	8000a88 <__aeabi_dcmpgt>
 8006530:	2800      	cmp	r0, #0
 8006532:	f040 8288 	bne.w	8006a46 <_dtoa_r+0x92e>
 8006536:	462a      	mov	r2, r5
 8006538:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800653c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006540:	f7fa fa84 	bl	8000a4c <__aeabi_dcmplt>
 8006544:	2800      	cmp	r0, #0
 8006546:	f040 827c 	bne.w	8006a42 <_dtoa_r+0x92a>
 800654a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800654e:	e9cd 2300 	strd	r2, r3, [sp]
 8006552:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006554:	2b00      	cmp	r3, #0
 8006556:	f2c0 8150 	blt.w	80067fa <_dtoa_r+0x6e2>
 800655a:	f1ba 0f0e 	cmp.w	sl, #14
 800655e:	f300 814c 	bgt.w	80067fa <_dtoa_r+0x6e2>
 8006562:	4b6a      	ldr	r3, [pc, #424]	; (800670c <_dtoa_r+0x5f4>)
 8006564:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006568:	ed93 7b00 	vldr	d7, [r3]
 800656c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800656e:	2b00      	cmp	r3, #0
 8006570:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006574:	f280 80d8 	bge.w	8006728 <_dtoa_r+0x610>
 8006578:	f1b9 0f00 	cmp.w	r9, #0
 800657c:	f300 80d4 	bgt.w	8006728 <_dtoa_r+0x610>
 8006580:	f040 825e 	bne.w	8006a40 <_dtoa_r+0x928>
 8006584:	2200      	movs	r2, #0
 8006586:	4b66      	ldr	r3, [pc, #408]	; (8006720 <_dtoa_r+0x608>)
 8006588:	ec51 0b17 	vmov	r0, r1, d7
 800658c:	f7f9 ffec 	bl	8000568 <__aeabi_dmul>
 8006590:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006594:	f7fa fa6e 	bl	8000a74 <__aeabi_dcmpge>
 8006598:	464f      	mov	r7, r9
 800659a:	464e      	mov	r6, r9
 800659c:	2800      	cmp	r0, #0
 800659e:	f040 8234 	bne.w	8006a0a <_dtoa_r+0x8f2>
 80065a2:	2331      	movs	r3, #49	; 0x31
 80065a4:	f10b 0501 	add.w	r5, fp, #1
 80065a8:	f88b 3000 	strb.w	r3, [fp]
 80065ac:	f10a 0a01 	add.w	sl, sl, #1
 80065b0:	e22f      	b.n	8006a12 <_dtoa_r+0x8fa>
 80065b2:	07f2      	lsls	r2, r6, #31
 80065b4:	d505      	bpl.n	80065c2 <_dtoa_r+0x4aa>
 80065b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065ba:	f7f9 ffd5 	bl	8000568 <__aeabi_dmul>
 80065be:	3501      	adds	r5, #1
 80065c0:	2301      	movs	r3, #1
 80065c2:	1076      	asrs	r6, r6, #1
 80065c4:	3708      	adds	r7, #8
 80065c6:	e772      	b.n	80064ae <_dtoa_r+0x396>
 80065c8:	2502      	movs	r5, #2
 80065ca:	e774      	b.n	80064b6 <_dtoa_r+0x39e>
 80065cc:	f8cd a020 	str.w	sl, [sp, #32]
 80065d0:	464f      	mov	r7, r9
 80065d2:	e791      	b.n	80064f8 <_dtoa_r+0x3e0>
 80065d4:	4b4d      	ldr	r3, [pc, #308]	; (800670c <_dtoa_r+0x5f4>)
 80065d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80065da:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80065de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d047      	beq.n	8006674 <_dtoa_r+0x55c>
 80065e4:	4602      	mov	r2, r0
 80065e6:	460b      	mov	r3, r1
 80065e8:	2000      	movs	r0, #0
 80065ea:	494e      	ldr	r1, [pc, #312]	; (8006724 <_dtoa_r+0x60c>)
 80065ec:	f7fa f8e6 	bl	80007bc <__aeabi_ddiv>
 80065f0:	462a      	mov	r2, r5
 80065f2:	4633      	mov	r3, r6
 80065f4:	f7f9 fe00 	bl	80001f8 <__aeabi_dsub>
 80065f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80065fc:	465d      	mov	r5, fp
 80065fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006602:	f7fa fa61 	bl	8000ac8 <__aeabi_d2iz>
 8006606:	4606      	mov	r6, r0
 8006608:	f7f9 ff44 	bl	8000494 <__aeabi_i2d>
 800660c:	4602      	mov	r2, r0
 800660e:	460b      	mov	r3, r1
 8006610:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006614:	f7f9 fdf0 	bl	80001f8 <__aeabi_dsub>
 8006618:	3630      	adds	r6, #48	; 0x30
 800661a:	f805 6b01 	strb.w	r6, [r5], #1
 800661e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006622:	e9cd 0100 	strd	r0, r1, [sp]
 8006626:	f7fa fa11 	bl	8000a4c <__aeabi_dcmplt>
 800662a:	2800      	cmp	r0, #0
 800662c:	d163      	bne.n	80066f6 <_dtoa_r+0x5de>
 800662e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006632:	2000      	movs	r0, #0
 8006634:	4937      	ldr	r1, [pc, #220]	; (8006714 <_dtoa_r+0x5fc>)
 8006636:	f7f9 fddf 	bl	80001f8 <__aeabi_dsub>
 800663a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800663e:	f7fa fa05 	bl	8000a4c <__aeabi_dcmplt>
 8006642:	2800      	cmp	r0, #0
 8006644:	f040 80b7 	bne.w	80067b6 <_dtoa_r+0x69e>
 8006648:	eba5 030b 	sub.w	r3, r5, fp
 800664c:	429f      	cmp	r7, r3
 800664e:	f77f af7c 	ble.w	800654a <_dtoa_r+0x432>
 8006652:	2200      	movs	r2, #0
 8006654:	4b30      	ldr	r3, [pc, #192]	; (8006718 <_dtoa_r+0x600>)
 8006656:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800665a:	f7f9 ff85 	bl	8000568 <__aeabi_dmul>
 800665e:	2200      	movs	r2, #0
 8006660:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006664:	4b2c      	ldr	r3, [pc, #176]	; (8006718 <_dtoa_r+0x600>)
 8006666:	e9dd 0100 	ldrd	r0, r1, [sp]
 800666a:	f7f9 ff7d 	bl	8000568 <__aeabi_dmul>
 800666e:	e9cd 0100 	strd	r0, r1, [sp]
 8006672:	e7c4      	b.n	80065fe <_dtoa_r+0x4e6>
 8006674:	462a      	mov	r2, r5
 8006676:	4633      	mov	r3, r6
 8006678:	f7f9 ff76 	bl	8000568 <__aeabi_dmul>
 800667c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006680:	eb0b 0507 	add.w	r5, fp, r7
 8006684:	465e      	mov	r6, fp
 8006686:	e9dd 0100 	ldrd	r0, r1, [sp]
 800668a:	f7fa fa1d 	bl	8000ac8 <__aeabi_d2iz>
 800668e:	4607      	mov	r7, r0
 8006690:	f7f9 ff00 	bl	8000494 <__aeabi_i2d>
 8006694:	3730      	adds	r7, #48	; 0x30
 8006696:	4602      	mov	r2, r0
 8006698:	460b      	mov	r3, r1
 800669a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800669e:	f7f9 fdab 	bl	80001f8 <__aeabi_dsub>
 80066a2:	f806 7b01 	strb.w	r7, [r6], #1
 80066a6:	42ae      	cmp	r6, r5
 80066a8:	e9cd 0100 	strd	r0, r1, [sp]
 80066ac:	f04f 0200 	mov.w	r2, #0
 80066b0:	d126      	bne.n	8006700 <_dtoa_r+0x5e8>
 80066b2:	4b1c      	ldr	r3, [pc, #112]	; (8006724 <_dtoa_r+0x60c>)
 80066b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80066b8:	f7f9 fda0 	bl	80001fc <__adddf3>
 80066bc:	4602      	mov	r2, r0
 80066be:	460b      	mov	r3, r1
 80066c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066c4:	f7fa f9e0 	bl	8000a88 <__aeabi_dcmpgt>
 80066c8:	2800      	cmp	r0, #0
 80066ca:	d174      	bne.n	80067b6 <_dtoa_r+0x69e>
 80066cc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80066d0:	2000      	movs	r0, #0
 80066d2:	4914      	ldr	r1, [pc, #80]	; (8006724 <_dtoa_r+0x60c>)
 80066d4:	f7f9 fd90 	bl	80001f8 <__aeabi_dsub>
 80066d8:	4602      	mov	r2, r0
 80066da:	460b      	mov	r3, r1
 80066dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066e0:	f7fa f9b4 	bl	8000a4c <__aeabi_dcmplt>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	f43f af30 	beq.w	800654a <_dtoa_r+0x432>
 80066ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80066ee:	2b30      	cmp	r3, #48	; 0x30
 80066f0:	f105 32ff 	add.w	r2, r5, #4294967295
 80066f4:	d002      	beq.n	80066fc <_dtoa_r+0x5e4>
 80066f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80066fa:	e04a      	b.n	8006792 <_dtoa_r+0x67a>
 80066fc:	4615      	mov	r5, r2
 80066fe:	e7f4      	b.n	80066ea <_dtoa_r+0x5d2>
 8006700:	4b05      	ldr	r3, [pc, #20]	; (8006718 <_dtoa_r+0x600>)
 8006702:	f7f9 ff31 	bl	8000568 <__aeabi_dmul>
 8006706:	e9cd 0100 	strd	r0, r1, [sp]
 800670a:	e7bc      	b.n	8006686 <_dtoa_r+0x56e>
 800670c:	08007450 	.word	0x08007450
 8006710:	08007428 	.word	0x08007428
 8006714:	3ff00000 	.word	0x3ff00000
 8006718:	40240000 	.word	0x40240000
 800671c:	401c0000 	.word	0x401c0000
 8006720:	40140000 	.word	0x40140000
 8006724:	3fe00000 	.word	0x3fe00000
 8006728:	e9dd 6700 	ldrd	r6, r7, [sp]
 800672c:	465d      	mov	r5, fp
 800672e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006732:	4630      	mov	r0, r6
 8006734:	4639      	mov	r1, r7
 8006736:	f7fa f841 	bl	80007bc <__aeabi_ddiv>
 800673a:	f7fa f9c5 	bl	8000ac8 <__aeabi_d2iz>
 800673e:	4680      	mov	r8, r0
 8006740:	f7f9 fea8 	bl	8000494 <__aeabi_i2d>
 8006744:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006748:	f7f9 ff0e 	bl	8000568 <__aeabi_dmul>
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	4630      	mov	r0, r6
 8006752:	4639      	mov	r1, r7
 8006754:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006758:	f7f9 fd4e 	bl	80001f8 <__aeabi_dsub>
 800675c:	f805 6b01 	strb.w	r6, [r5], #1
 8006760:	eba5 060b 	sub.w	r6, r5, fp
 8006764:	45b1      	cmp	r9, r6
 8006766:	4602      	mov	r2, r0
 8006768:	460b      	mov	r3, r1
 800676a:	d139      	bne.n	80067e0 <_dtoa_r+0x6c8>
 800676c:	f7f9 fd46 	bl	80001fc <__adddf3>
 8006770:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006774:	4606      	mov	r6, r0
 8006776:	460f      	mov	r7, r1
 8006778:	f7fa f986 	bl	8000a88 <__aeabi_dcmpgt>
 800677c:	b9c8      	cbnz	r0, 80067b2 <_dtoa_r+0x69a>
 800677e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006782:	4630      	mov	r0, r6
 8006784:	4639      	mov	r1, r7
 8006786:	f7fa f957 	bl	8000a38 <__aeabi_dcmpeq>
 800678a:	b110      	cbz	r0, 8006792 <_dtoa_r+0x67a>
 800678c:	f018 0f01 	tst.w	r8, #1
 8006790:	d10f      	bne.n	80067b2 <_dtoa_r+0x69a>
 8006792:	9904      	ldr	r1, [sp, #16]
 8006794:	4620      	mov	r0, r4
 8006796:	f000 fac1 	bl	8006d1c <_Bfree>
 800679a:	2300      	movs	r3, #0
 800679c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800679e:	702b      	strb	r3, [r5, #0]
 80067a0:	f10a 0301 	add.w	r3, sl, #1
 80067a4:	6013      	str	r3, [r2, #0]
 80067a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 8241 	beq.w	8006c30 <_dtoa_r+0xb18>
 80067ae:	601d      	str	r5, [r3, #0]
 80067b0:	e23e      	b.n	8006c30 <_dtoa_r+0xb18>
 80067b2:	f8cd a020 	str.w	sl, [sp, #32]
 80067b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80067ba:	2a39      	cmp	r2, #57	; 0x39
 80067bc:	f105 33ff 	add.w	r3, r5, #4294967295
 80067c0:	d108      	bne.n	80067d4 <_dtoa_r+0x6bc>
 80067c2:	459b      	cmp	fp, r3
 80067c4:	d10a      	bne.n	80067dc <_dtoa_r+0x6c4>
 80067c6:	9b08      	ldr	r3, [sp, #32]
 80067c8:	3301      	adds	r3, #1
 80067ca:	9308      	str	r3, [sp, #32]
 80067cc:	2330      	movs	r3, #48	; 0x30
 80067ce:	f88b 3000 	strb.w	r3, [fp]
 80067d2:	465b      	mov	r3, fp
 80067d4:	781a      	ldrb	r2, [r3, #0]
 80067d6:	3201      	adds	r2, #1
 80067d8:	701a      	strb	r2, [r3, #0]
 80067da:	e78c      	b.n	80066f6 <_dtoa_r+0x5de>
 80067dc:	461d      	mov	r5, r3
 80067de:	e7ea      	b.n	80067b6 <_dtoa_r+0x69e>
 80067e0:	2200      	movs	r2, #0
 80067e2:	4b9b      	ldr	r3, [pc, #620]	; (8006a50 <_dtoa_r+0x938>)
 80067e4:	f7f9 fec0 	bl	8000568 <__aeabi_dmul>
 80067e8:	2200      	movs	r2, #0
 80067ea:	2300      	movs	r3, #0
 80067ec:	4606      	mov	r6, r0
 80067ee:	460f      	mov	r7, r1
 80067f0:	f7fa f922 	bl	8000a38 <__aeabi_dcmpeq>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d09a      	beq.n	800672e <_dtoa_r+0x616>
 80067f8:	e7cb      	b.n	8006792 <_dtoa_r+0x67a>
 80067fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067fc:	2a00      	cmp	r2, #0
 80067fe:	f000 808b 	beq.w	8006918 <_dtoa_r+0x800>
 8006802:	9a06      	ldr	r2, [sp, #24]
 8006804:	2a01      	cmp	r2, #1
 8006806:	dc6e      	bgt.n	80068e6 <_dtoa_r+0x7ce>
 8006808:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800680a:	2a00      	cmp	r2, #0
 800680c:	d067      	beq.n	80068de <_dtoa_r+0x7c6>
 800680e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006812:	9f07      	ldr	r7, [sp, #28]
 8006814:	9d05      	ldr	r5, [sp, #20]
 8006816:	9a05      	ldr	r2, [sp, #20]
 8006818:	2101      	movs	r1, #1
 800681a:	441a      	add	r2, r3
 800681c:	4620      	mov	r0, r4
 800681e:	9205      	str	r2, [sp, #20]
 8006820:	4498      	add	r8, r3
 8006822:	f000 fb1b 	bl	8006e5c <__i2b>
 8006826:	4606      	mov	r6, r0
 8006828:	2d00      	cmp	r5, #0
 800682a:	dd0c      	ble.n	8006846 <_dtoa_r+0x72e>
 800682c:	f1b8 0f00 	cmp.w	r8, #0
 8006830:	dd09      	ble.n	8006846 <_dtoa_r+0x72e>
 8006832:	4545      	cmp	r5, r8
 8006834:	9a05      	ldr	r2, [sp, #20]
 8006836:	462b      	mov	r3, r5
 8006838:	bfa8      	it	ge
 800683a:	4643      	movge	r3, r8
 800683c:	1ad2      	subs	r2, r2, r3
 800683e:	9205      	str	r2, [sp, #20]
 8006840:	1aed      	subs	r5, r5, r3
 8006842:	eba8 0803 	sub.w	r8, r8, r3
 8006846:	9b07      	ldr	r3, [sp, #28]
 8006848:	b1eb      	cbz	r3, 8006886 <_dtoa_r+0x76e>
 800684a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800684c:	2b00      	cmp	r3, #0
 800684e:	d067      	beq.n	8006920 <_dtoa_r+0x808>
 8006850:	b18f      	cbz	r7, 8006876 <_dtoa_r+0x75e>
 8006852:	4631      	mov	r1, r6
 8006854:	463a      	mov	r2, r7
 8006856:	4620      	mov	r0, r4
 8006858:	f000 fba0 	bl	8006f9c <__pow5mult>
 800685c:	9a04      	ldr	r2, [sp, #16]
 800685e:	4601      	mov	r1, r0
 8006860:	4606      	mov	r6, r0
 8006862:	4620      	mov	r0, r4
 8006864:	f000 fb03 	bl	8006e6e <__multiply>
 8006868:	9904      	ldr	r1, [sp, #16]
 800686a:	9008      	str	r0, [sp, #32]
 800686c:	4620      	mov	r0, r4
 800686e:	f000 fa55 	bl	8006d1c <_Bfree>
 8006872:	9b08      	ldr	r3, [sp, #32]
 8006874:	9304      	str	r3, [sp, #16]
 8006876:	9b07      	ldr	r3, [sp, #28]
 8006878:	1bda      	subs	r2, r3, r7
 800687a:	d004      	beq.n	8006886 <_dtoa_r+0x76e>
 800687c:	9904      	ldr	r1, [sp, #16]
 800687e:	4620      	mov	r0, r4
 8006880:	f000 fb8c 	bl	8006f9c <__pow5mult>
 8006884:	9004      	str	r0, [sp, #16]
 8006886:	2101      	movs	r1, #1
 8006888:	4620      	mov	r0, r4
 800688a:	f000 fae7 	bl	8006e5c <__i2b>
 800688e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006890:	4607      	mov	r7, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	f000 81d0 	beq.w	8006c38 <_dtoa_r+0xb20>
 8006898:	461a      	mov	r2, r3
 800689a:	4601      	mov	r1, r0
 800689c:	4620      	mov	r0, r4
 800689e:	f000 fb7d 	bl	8006f9c <__pow5mult>
 80068a2:	9b06      	ldr	r3, [sp, #24]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	4607      	mov	r7, r0
 80068a8:	dc40      	bgt.n	800692c <_dtoa_r+0x814>
 80068aa:	9b00      	ldr	r3, [sp, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d139      	bne.n	8006924 <_dtoa_r+0x80c>
 80068b0:	9b01      	ldr	r3, [sp, #4]
 80068b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d136      	bne.n	8006928 <_dtoa_r+0x810>
 80068ba:	9b01      	ldr	r3, [sp, #4]
 80068bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068c0:	0d1b      	lsrs	r3, r3, #20
 80068c2:	051b      	lsls	r3, r3, #20
 80068c4:	b12b      	cbz	r3, 80068d2 <_dtoa_r+0x7ba>
 80068c6:	9b05      	ldr	r3, [sp, #20]
 80068c8:	3301      	adds	r3, #1
 80068ca:	9305      	str	r3, [sp, #20]
 80068cc:	f108 0801 	add.w	r8, r8, #1
 80068d0:	2301      	movs	r3, #1
 80068d2:	9307      	str	r3, [sp, #28]
 80068d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d12a      	bne.n	8006930 <_dtoa_r+0x818>
 80068da:	2001      	movs	r0, #1
 80068dc:	e030      	b.n	8006940 <_dtoa_r+0x828>
 80068de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80068e0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80068e4:	e795      	b.n	8006812 <_dtoa_r+0x6fa>
 80068e6:	9b07      	ldr	r3, [sp, #28]
 80068e8:	f109 37ff 	add.w	r7, r9, #4294967295
 80068ec:	42bb      	cmp	r3, r7
 80068ee:	bfbf      	itttt	lt
 80068f0:	9b07      	ldrlt	r3, [sp, #28]
 80068f2:	9707      	strlt	r7, [sp, #28]
 80068f4:	1afa      	sublt	r2, r7, r3
 80068f6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80068f8:	bfbb      	ittet	lt
 80068fa:	189b      	addlt	r3, r3, r2
 80068fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80068fe:	1bdf      	subge	r7, r3, r7
 8006900:	2700      	movlt	r7, #0
 8006902:	f1b9 0f00 	cmp.w	r9, #0
 8006906:	bfb5      	itete	lt
 8006908:	9b05      	ldrlt	r3, [sp, #20]
 800690a:	9d05      	ldrge	r5, [sp, #20]
 800690c:	eba3 0509 	sublt.w	r5, r3, r9
 8006910:	464b      	movge	r3, r9
 8006912:	bfb8      	it	lt
 8006914:	2300      	movlt	r3, #0
 8006916:	e77e      	b.n	8006816 <_dtoa_r+0x6fe>
 8006918:	9f07      	ldr	r7, [sp, #28]
 800691a:	9d05      	ldr	r5, [sp, #20]
 800691c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800691e:	e783      	b.n	8006828 <_dtoa_r+0x710>
 8006920:	9a07      	ldr	r2, [sp, #28]
 8006922:	e7ab      	b.n	800687c <_dtoa_r+0x764>
 8006924:	2300      	movs	r3, #0
 8006926:	e7d4      	b.n	80068d2 <_dtoa_r+0x7ba>
 8006928:	9b00      	ldr	r3, [sp, #0]
 800692a:	e7d2      	b.n	80068d2 <_dtoa_r+0x7ba>
 800692c:	2300      	movs	r3, #0
 800692e:	9307      	str	r3, [sp, #28]
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006936:	6918      	ldr	r0, [r3, #16]
 8006938:	f000 fa42 	bl	8006dc0 <__hi0bits>
 800693c:	f1c0 0020 	rsb	r0, r0, #32
 8006940:	4440      	add	r0, r8
 8006942:	f010 001f 	ands.w	r0, r0, #31
 8006946:	d047      	beq.n	80069d8 <_dtoa_r+0x8c0>
 8006948:	f1c0 0320 	rsb	r3, r0, #32
 800694c:	2b04      	cmp	r3, #4
 800694e:	dd3b      	ble.n	80069c8 <_dtoa_r+0x8b0>
 8006950:	9b05      	ldr	r3, [sp, #20]
 8006952:	f1c0 001c 	rsb	r0, r0, #28
 8006956:	4403      	add	r3, r0
 8006958:	9305      	str	r3, [sp, #20]
 800695a:	4405      	add	r5, r0
 800695c:	4480      	add	r8, r0
 800695e:	9b05      	ldr	r3, [sp, #20]
 8006960:	2b00      	cmp	r3, #0
 8006962:	dd05      	ble.n	8006970 <_dtoa_r+0x858>
 8006964:	461a      	mov	r2, r3
 8006966:	9904      	ldr	r1, [sp, #16]
 8006968:	4620      	mov	r0, r4
 800696a:	f000 fb65 	bl	8007038 <__lshift>
 800696e:	9004      	str	r0, [sp, #16]
 8006970:	f1b8 0f00 	cmp.w	r8, #0
 8006974:	dd05      	ble.n	8006982 <_dtoa_r+0x86a>
 8006976:	4639      	mov	r1, r7
 8006978:	4642      	mov	r2, r8
 800697a:	4620      	mov	r0, r4
 800697c:	f000 fb5c 	bl	8007038 <__lshift>
 8006980:	4607      	mov	r7, r0
 8006982:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006984:	b353      	cbz	r3, 80069dc <_dtoa_r+0x8c4>
 8006986:	4639      	mov	r1, r7
 8006988:	9804      	ldr	r0, [sp, #16]
 800698a:	f000 fba9 	bl	80070e0 <__mcmp>
 800698e:	2800      	cmp	r0, #0
 8006990:	da24      	bge.n	80069dc <_dtoa_r+0x8c4>
 8006992:	2300      	movs	r3, #0
 8006994:	220a      	movs	r2, #10
 8006996:	9904      	ldr	r1, [sp, #16]
 8006998:	4620      	mov	r0, r4
 800699a:	f000 f9d6 	bl	8006d4a <__multadd>
 800699e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069a0:	9004      	str	r0, [sp, #16]
 80069a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f000 814d 	beq.w	8006c46 <_dtoa_r+0xb2e>
 80069ac:	2300      	movs	r3, #0
 80069ae:	4631      	mov	r1, r6
 80069b0:	220a      	movs	r2, #10
 80069b2:	4620      	mov	r0, r4
 80069b4:	f000 f9c9 	bl	8006d4a <__multadd>
 80069b8:	9b02      	ldr	r3, [sp, #8]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	4606      	mov	r6, r0
 80069be:	dc4f      	bgt.n	8006a60 <_dtoa_r+0x948>
 80069c0:	9b06      	ldr	r3, [sp, #24]
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	dd4c      	ble.n	8006a60 <_dtoa_r+0x948>
 80069c6:	e011      	b.n	80069ec <_dtoa_r+0x8d4>
 80069c8:	d0c9      	beq.n	800695e <_dtoa_r+0x846>
 80069ca:	9a05      	ldr	r2, [sp, #20]
 80069cc:	331c      	adds	r3, #28
 80069ce:	441a      	add	r2, r3
 80069d0:	9205      	str	r2, [sp, #20]
 80069d2:	441d      	add	r5, r3
 80069d4:	4498      	add	r8, r3
 80069d6:	e7c2      	b.n	800695e <_dtoa_r+0x846>
 80069d8:	4603      	mov	r3, r0
 80069da:	e7f6      	b.n	80069ca <_dtoa_r+0x8b2>
 80069dc:	f1b9 0f00 	cmp.w	r9, #0
 80069e0:	dc38      	bgt.n	8006a54 <_dtoa_r+0x93c>
 80069e2:	9b06      	ldr	r3, [sp, #24]
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	dd35      	ble.n	8006a54 <_dtoa_r+0x93c>
 80069e8:	f8cd 9008 	str.w	r9, [sp, #8]
 80069ec:	9b02      	ldr	r3, [sp, #8]
 80069ee:	b963      	cbnz	r3, 8006a0a <_dtoa_r+0x8f2>
 80069f0:	4639      	mov	r1, r7
 80069f2:	2205      	movs	r2, #5
 80069f4:	4620      	mov	r0, r4
 80069f6:	f000 f9a8 	bl	8006d4a <__multadd>
 80069fa:	4601      	mov	r1, r0
 80069fc:	4607      	mov	r7, r0
 80069fe:	9804      	ldr	r0, [sp, #16]
 8006a00:	f000 fb6e 	bl	80070e0 <__mcmp>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	f73f adcc 	bgt.w	80065a2 <_dtoa_r+0x48a>
 8006a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a0c:	465d      	mov	r5, fp
 8006a0e:	ea6f 0a03 	mvn.w	sl, r3
 8006a12:	f04f 0900 	mov.w	r9, #0
 8006a16:	4639      	mov	r1, r7
 8006a18:	4620      	mov	r0, r4
 8006a1a:	f000 f97f 	bl	8006d1c <_Bfree>
 8006a1e:	2e00      	cmp	r6, #0
 8006a20:	f43f aeb7 	beq.w	8006792 <_dtoa_r+0x67a>
 8006a24:	f1b9 0f00 	cmp.w	r9, #0
 8006a28:	d005      	beq.n	8006a36 <_dtoa_r+0x91e>
 8006a2a:	45b1      	cmp	r9, r6
 8006a2c:	d003      	beq.n	8006a36 <_dtoa_r+0x91e>
 8006a2e:	4649      	mov	r1, r9
 8006a30:	4620      	mov	r0, r4
 8006a32:	f000 f973 	bl	8006d1c <_Bfree>
 8006a36:	4631      	mov	r1, r6
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f000 f96f 	bl	8006d1c <_Bfree>
 8006a3e:	e6a8      	b.n	8006792 <_dtoa_r+0x67a>
 8006a40:	2700      	movs	r7, #0
 8006a42:	463e      	mov	r6, r7
 8006a44:	e7e1      	b.n	8006a0a <_dtoa_r+0x8f2>
 8006a46:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006a4a:	463e      	mov	r6, r7
 8006a4c:	e5a9      	b.n	80065a2 <_dtoa_r+0x48a>
 8006a4e:	bf00      	nop
 8006a50:	40240000 	.word	0x40240000
 8006a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a56:	f8cd 9008 	str.w	r9, [sp, #8]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f000 80fa 	beq.w	8006c54 <_dtoa_r+0xb3c>
 8006a60:	2d00      	cmp	r5, #0
 8006a62:	dd05      	ble.n	8006a70 <_dtoa_r+0x958>
 8006a64:	4631      	mov	r1, r6
 8006a66:	462a      	mov	r2, r5
 8006a68:	4620      	mov	r0, r4
 8006a6a:	f000 fae5 	bl	8007038 <__lshift>
 8006a6e:	4606      	mov	r6, r0
 8006a70:	9b07      	ldr	r3, [sp, #28]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d04c      	beq.n	8006b10 <_dtoa_r+0x9f8>
 8006a76:	6871      	ldr	r1, [r6, #4]
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f000 f91b 	bl	8006cb4 <_Balloc>
 8006a7e:	6932      	ldr	r2, [r6, #16]
 8006a80:	3202      	adds	r2, #2
 8006a82:	4605      	mov	r5, r0
 8006a84:	0092      	lsls	r2, r2, #2
 8006a86:	f106 010c 	add.w	r1, r6, #12
 8006a8a:	300c      	adds	r0, #12
 8006a8c:	f7fe ff5a 	bl	8005944 <memcpy>
 8006a90:	2201      	movs	r2, #1
 8006a92:	4629      	mov	r1, r5
 8006a94:	4620      	mov	r0, r4
 8006a96:	f000 facf 	bl	8007038 <__lshift>
 8006a9a:	9b00      	ldr	r3, [sp, #0]
 8006a9c:	f8cd b014 	str.w	fp, [sp, #20]
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	46b1      	mov	r9, r6
 8006aa6:	9307      	str	r3, [sp, #28]
 8006aa8:	4606      	mov	r6, r0
 8006aaa:	4639      	mov	r1, r7
 8006aac:	9804      	ldr	r0, [sp, #16]
 8006aae:	f7ff faa6 	bl	8005ffe <quorem>
 8006ab2:	4649      	mov	r1, r9
 8006ab4:	4605      	mov	r5, r0
 8006ab6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006aba:	9804      	ldr	r0, [sp, #16]
 8006abc:	f000 fb10 	bl	80070e0 <__mcmp>
 8006ac0:	4632      	mov	r2, r6
 8006ac2:	9000      	str	r0, [sp, #0]
 8006ac4:	4639      	mov	r1, r7
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f000 fb24 	bl	8007114 <__mdiff>
 8006acc:	68c3      	ldr	r3, [r0, #12]
 8006ace:	4602      	mov	r2, r0
 8006ad0:	bb03      	cbnz	r3, 8006b14 <_dtoa_r+0x9fc>
 8006ad2:	4601      	mov	r1, r0
 8006ad4:	9008      	str	r0, [sp, #32]
 8006ad6:	9804      	ldr	r0, [sp, #16]
 8006ad8:	f000 fb02 	bl	80070e0 <__mcmp>
 8006adc:	9a08      	ldr	r2, [sp, #32]
 8006ade:	4603      	mov	r3, r0
 8006ae0:	4611      	mov	r1, r2
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	9308      	str	r3, [sp, #32]
 8006ae6:	f000 f919 	bl	8006d1c <_Bfree>
 8006aea:	9b08      	ldr	r3, [sp, #32]
 8006aec:	b9a3      	cbnz	r3, 8006b18 <_dtoa_r+0xa00>
 8006aee:	9a06      	ldr	r2, [sp, #24]
 8006af0:	b992      	cbnz	r2, 8006b18 <_dtoa_r+0xa00>
 8006af2:	9a07      	ldr	r2, [sp, #28]
 8006af4:	b982      	cbnz	r2, 8006b18 <_dtoa_r+0xa00>
 8006af6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006afa:	d029      	beq.n	8006b50 <_dtoa_r+0xa38>
 8006afc:	9b00      	ldr	r3, [sp, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	dd01      	ble.n	8006b06 <_dtoa_r+0x9ee>
 8006b02:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006b06:	9b05      	ldr	r3, [sp, #20]
 8006b08:	1c5d      	adds	r5, r3, #1
 8006b0a:	f883 8000 	strb.w	r8, [r3]
 8006b0e:	e782      	b.n	8006a16 <_dtoa_r+0x8fe>
 8006b10:	4630      	mov	r0, r6
 8006b12:	e7c2      	b.n	8006a9a <_dtoa_r+0x982>
 8006b14:	2301      	movs	r3, #1
 8006b16:	e7e3      	b.n	8006ae0 <_dtoa_r+0x9c8>
 8006b18:	9a00      	ldr	r2, [sp, #0]
 8006b1a:	2a00      	cmp	r2, #0
 8006b1c:	db04      	blt.n	8006b28 <_dtoa_r+0xa10>
 8006b1e:	d125      	bne.n	8006b6c <_dtoa_r+0xa54>
 8006b20:	9a06      	ldr	r2, [sp, #24]
 8006b22:	bb1a      	cbnz	r2, 8006b6c <_dtoa_r+0xa54>
 8006b24:	9a07      	ldr	r2, [sp, #28]
 8006b26:	bb0a      	cbnz	r2, 8006b6c <_dtoa_r+0xa54>
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	ddec      	ble.n	8006b06 <_dtoa_r+0x9ee>
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	9904      	ldr	r1, [sp, #16]
 8006b30:	4620      	mov	r0, r4
 8006b32:	f000 fa81 	bl	8007038 <__lshift>
 8006b36:	4639      	mov	r1, r7
 8006b38:	9004      	str	r0, [sp, #16]
 8006b3a:	f000 fad1 	bl	80070e0 <__mcmp>
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	dc03      	bgt.n	8006b4a <_dtoa_r+0xa32>
 8006b42:	d1e0      	bne.n	8006b06 <_dtoa_r+0x9ee>
 8006b44:	f018 0f01 	tst.w	r8, #1
 8006b48:	d0dd      	beq.n	8006b06 <_dtoa_r+0x9ee>
 8006b4a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006b4e:	d1d8      	bne.n	8006b02 <_dtoa_r+0x9ea>
 8006b50:	9b05      	ldr	r3, [sp, #20]
 8006b52:	9a05      	ldr	r2, [sp, #20]
 8006b54:	1c5d      	adds	r5, r3, #1
 8006b56:	2339      	movs	r3, #57	; 0x39
 8006b58:	7013      	strb	r3, [r2, #0]
 8006b5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b5e:	2b39      	cmp	r3, #57	; 0x39
 8006b60:	f105 32ff 	add.w	r2, r5, #4294967295
 8006b64:	d04f      	beq.n	8006c06 <_dtoa_r+0xaee>
 8006b66:	3301      	adds	r3, #1
 8006b68:	7013      	strb	r3, [r2, #0]
 8006b6a:	e754      	b.n	8006a16 <_dtoa_r+0x8fe>
 8006b6c:	9a05      	ldr	r2, [sp, #20]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f102 0501 	add.w	r5, r2, #1
 8006b74:	dd06      	ble.n	8006b84 <_dtoa_r+0xa6c>
 8006b76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006b7a:	d0e9      	beq.n	8006b50 <_dtoa_r+0xa38>
 8006b7c:	f108 0801 	add.w	r8, r8, #1
 8006b80:	9b05      	ldr	r3, [sp, #20]
 8006b82:	e7c2      	b.n	8006b0a <_dtoa_r+0x9f2>
 8006b84:	9a02      	ldr	r2, [sp, #8]
 8006b86:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006b8a:	eba5 030b 	sub.w	r3, r5, fp
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d021      	beq.n	8006bd6 <_dtoa_r+0xabe>
 8006b92:	2300      	movs	r3, #0
 8006b94:	220a      	movs	r2, #10
 8006b96:	9904      	ldr	r1, [sp, #16]
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f000 f8d6 	bl	8006d4a <__multadd>
 8006b9e:	45b1      	cmp	r9, r6
 8006ba0:	9004      	str	r0, [sp, #16]
 8006ba2:	f04f 0300 	mov.w	r3, #0
 8006ba6:	f04f 020a 	mov.w	r2, #10
 8006baa:	4649      	mov	r1, r9
 8006bac:	4620      	mov	r0, r4
 8006bae:	d105      	bne.n	8006bbc <_dtoa_r+0xaa4>
 8006bb0:	f000 f8cb 	bl	8006d4a <__multadd>
 8006bb4:	4681      	mov	r9, r0
 8006bb6:	4606      	mov	r6, r0
 8006bb8:	9505      	str	r5, [sp, #20]
 8006bba:	e776      	b.n	8006aaa <_dtoa_r+0x992>
 8006bbc:	f000 f8c5 	bl	8006d4a <__multadd>
 8006bc0:	4631      	mov	r1, r6
 8006bc2:	4681      	mov	r9, r0
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	220a      	movs	r2, #10
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f000 f8be 	bl	8006d4a <__multadd>
 8006bce:	4606      	mov	r6, r0
 8006bd0:	e7f2      	b.n	8006bb8 <_dtoa_r+0xaa0>
 8006bd2:	f04f 0900 	mov.w	r9, #0
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	9904      	ldr	r1, [sp, #16]
 8006bda:	4620      	mov	r0, r4
 8006bdc:	f000 fa2c 	bl	8007038 <__lshift>
 8006be0:	4639      	mov	r1, r7
 8006be2:	9004      	str	r0, [sp, #16]
 8006be4:	f000 fa7c 	bl	80070e0 <__mcmp>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	dcb6      	bgt.n	8006b5a <_dtoa_r+0xa42>
 8006bec:	d102      	bne.n	8006bf4 <_dtoa_r+0xadc>
 8006bee:	f018 0f01 	tst.w	r8, #1
 8006bf2:	d1b2      	bne.n	8006b5a <_dtoa_r+0xa42>
 8006bf4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006bf8:	2b30      	cmp	r3, #48	; 0x30
 8006bfa:	f105 32ff 	add.w	r2, r5, #4294967295
 8006bfe:	f47f af0a 	bne.w	8006a16 <_dtoa_r+0x8fe>
 8006c02:	4615      	mov	r5, r2
 8006c04:	e7f6      	b.n	8006bf4 <_dtoa_r+0xadc>
 8006c06:	4593      	cmp	fp, r2
 8006c08:	d105      	bne.n	8006c16 <_dtoa_r+0xafe>
 8006c0a:	2331      	movs	r3, #49	; 0x31
 8006c0c:	f10a 0a01 	add.w	sl, sl, #1
 8006c10:	f88b 3000 	strb.w	r3, [fp]
 8006c14:	e6ff      	b.n	8006a16 <_dtoa_r+0x8fe>
 8006c16:	4615      	mov	r5, r2
 8006c18:	e79f      	b.n	8006b5a <_dtoa_r+0xa42>
 8006c1a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006c80 <_dtoa_r+0xb68>
 8006c1e:	e007      	b.n	8006c30 <_dtoa_r+0xb18>
 8006c20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c22:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006c84 <_dtoa_r+0xb6c>
 8006c26:	b11b      	cbz	r3, 8006c30 <_dtoa_r+0xb18>
 8006c28:	f10b 0308 	add.w	r3, fp, #8
 8006c2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c2e:	6013      	str	r3, [r2, #0]
 8006c30:	4658      	mov	r0, fp
 8006c32:	b017      	add	sp, #92	; 0x5c
 8006c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c38:	9b06      	ldr	r3, [sp, #24]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	f77f ae35 	ble.w	80068aa <_dtoa_r+0x792>
 8006c40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c42:	9307      	str	r3, [sp, #28]
 8006c44:	e649      	b.n	80068da <_dtoa_r+0x7c2>
 8006c46:	9b02      	ldr	r3, [sp, #8]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	dc03      	bgt.n	8006c54 <_dtoa_r+0xb3c>
 8006c4c:	9b06      	ldr	r3, [sp, #24]
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	f73f aecc 	bgt.w	80069ec <_dtoa_r+0x8d4>
 8006c54:	465d      	mov	r5, fp
 8006c56:	4639      	mov	r1, r7
 8006c58:	9804      	ldr	r0, [sp, #16]
 8006c5a:	f7ff f9d0 	bl	8005ffe <quorem>
 8006c5e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006c62:	f805 8b01 	strb.w	r8, [r5], #1
 8006c66:	9a02      	ldr	r2, [sp, #8]
 8006c68:	eba5 030b 	sub.w	r3, r5, fp
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	ddb0      	ble.n	8006bd2 <_dtoa_r+0xaba>
 8006c70:	2300      	movs	r3, #0
 8006c72:	220a      	movs	r2, #10
 8006c74:	9904      	ldr	r1, [sp, #16]
 8006c76:	4620      	mov	r0, r4
 8006c78:	f000 f867 	bl	8006d4a <__multadd>
 8006c7c:	9004      	str	r0, [sp, #16]
 8006c7e:	e7ea      	b.n	8006c56 <_dtoa_r+0xb3e>
 8006c80:	08007418 	.word	0x08007418
 8006c84:	0800741a 	.word	0x0800741a

08006c88 <_localeconv_r>:
 8006c88:	4b04      	ldr	r3, [pc, #16]	; (8006c9c <_localeconv_r+0x14>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6a18      	ldr	r0, [r3, #32]
 8006c8e:	4b04      	ldr	r3, [pc, #16]	; (8006ca0 <_localeconv_r+0x18>)
 8006c90:	2800      	cmp	r0, #0
 8006c92:	bf08      	it	eq
 8006c94:	4618      	moveq	r0, r3
 8006c96:	30f0      	adds	r0, #240	; 0xf0
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	20000010 	.word	0x20000010
 8006ca0:	20000074 	.word	0x20000074

08006ca4 <malloc>:
 8006ca4:	4b02      	ldr	r3, [pc, #8]	; (8006cb0 <malloc+0xc>)
 8006ca6:	4601      	mov	r1, r0
 8006ca8:	6818      	ldr	r0, [r3, #0]
 8006caa:	f000 baed 	b.w	8007288 <_malloc_r>
 8006cae:	bf00      	nop
 8006cb0:	20000010 	.word	0x20000010

08006cb4 <_Balloc>:
 8006cb4:	b570      	push	{r4, r5, r6, lr}
 8006cb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006cb8:	4604      	mov	r4, r0
 8006cba:	460e      	mov	r6, r1
 8006cbc:	b93d      	cbnz	r5, 8006cce <_Balloc+0x1a>
 8006cbe:	2010      	movs	r0, #16
 8006cc0:	f7ff fff0 	bl	8006ca4 <malloc>
 8006cc4:	6260      	str	r0, [r4, #36]	; 0x24
 8006cc6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006cca:	6005      	str	r5, [r0, #0]
 8006ccc:	60c5      	str	r5, [r0, #12]
 8006cce:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006cd0:	68eb      	ldr	r3, [r5, #12]
 8006cd2:	b183      	cbz	r3, 8006cf6 <_Balloc+0x42>
 8006cd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006cdc:	b9b8      	cbnz	r0, 8006d0e <_Balloc+0x5a>
 8006cde:	2101      	movs	r1, #1
 8006ce0:	fa01 f506 	lsl.w	r5, r1, r6
 8006ce4:	1d6a      	adds	r2, r5, #5
 8006ce6:	0092      	lsls	r2, r2, #2
 8006ce8:	4620      	mov	r0, r4
 8006cea:	f000 fabf 	bl	800726c <_calloc_r>
 8006cee:	b160      	cbz	r0, 8006d0a <_Balloc+0x56>
 8006cf0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006cf4:	e00e      	b.n	8006d14 <_Balloc+0x60>
 8006cf6:	2221      	movs	r2, #33	; 0x21
 8006cf8:	2104      	movs	r1, #4
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f000 fab6 	bl	800726c <_calloc_r>
 8006d00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d02:	60e8      	str	r0, [r5, #12]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1e4      	bne.n	8006cd4 <_Balloc+0x20>
 8006d0a:	2000      	movs	r0, #0
 8006d0c:	bd70      	pop	{r4, r5, r6, pc}
 8006d0e:	6802      	ldr	r2, [r0, #0]
 8006d10:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006d14:	2300      	movs	r3, #0
 8006d16:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d1a:	e7f7      	b.n	8006d0c <_Balloc+0x58>

08006d1c <_Bfree>:
 8006d1c:	b570      	push	{r4, r5, r6, lr}
 8006d1e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006d20:	4606      	mov	r6, r0
 8006d22:	460d      	mov	r5, r1
 8006d24:	b93c      	cbnz	r4, 8006d36 <_Bfree+0x1a>
 8006d26:	2010      	movs	r0, #16
 8006d28:	f7ff ffbc 	bl	8006ca4 <malloc>
 8006d2c:	6270      	str	r0, [r6, #36]	; 0x24
 8006d2e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d32:	6004      	str	r4, [r0, #0]
 8006d34:	60c4      	str	r4, [r0, #12]
 8006d36:	b13d      	cbz	r5, 8006d48 <_Bfree+0x2c>
 8006d38:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006d3a:	686a      	ldr	r2, [r5, #4]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d42:	6029      	str	r1, [r5, #0]
 8006d44:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006d48:	bd70      	pop	{r4, r5, r6, pc}

08006d4a <__multadd>:
 8006d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d4e:	690d      	ldr	r5, [r1, #16]
 8006d50:	461f      	mov	r7, r3
 8006d52:	4606      	mov	r6, r0
 8006d54:	460c      	mov	r4, r1
 8006d56:	f101 0c14 	add.w	ip, r1, #20
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	f8dc 0000 	ldr.w	r0, [ip]
 8006d60:	b281      	uxth	r1, r0
 8006d62:	fb02 7101 	mla	r1, r2, r1, r7
 8006d66:	0c0f      	lsrs	r7, r1, #16
 8006d68:	0c00      	lsrs	r0, r0, #16
 8006d6a:	fb02 7000 	mla	r0, r2, r0, r7
 8006d6e:	b289      	uxth	r1, r1
 8006d70:	3301      	adds	r3, #1
 8006d72:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006d76:	429d      	cmp	r5, r3
 8006d78:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006d7c:	f84c 1b04 	str.w	r1, [ip], #4
 8006d80:	dcec      	bgt.n	8006d5c <__multadd+0x12>
 8006d82:	b1d7      	cbz	r7, 8006dba <__multadd+0x70>
 8006d84:	68a3      	ldr	r3, [r4, #8]
 8006d86:	42ab      	cmp	r3, r5
 8006d88:	dc12      	bgt.n	8006db0 <__multadd+0x66>
 8006d8a:	6861      	ldr	r1, [r4, #4]
 8006d8c:	4630      	mov	r0, r6
 8006d8e:	3101      	adds	r1, #1
 8006d90:	f7ff ff90 	bl	8006cb4 <_Balloc>
 8006d94:	6922      	ldr	r2, [r4, #16]
 8006d96:	3202      	adds	r2, #2
 8006d98:	f104 010c 	add.w	r1, r4, #12
 8006d9c:	4680      	mov	r8, r0
 8006d9e:	0092      	lsls	r2, r2, #2
 8006da0:	300c      	adds	r0, #12
 8006da2:	f7fe fdcf 	bl	8005944 <memcpy>
 8006da6:	4621      	mov	r1, r4
 8006da8:	4630      	mov	r0, r6
 8006daa:	f7ff ffb7 	bl	8006d1c <_Bfree>
 8006dae:	4644      	mov	r4, r8
 8006db0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006db4:	3501      	adds	r5, #1
 8006db6:	615f      	str	r7, [r3, #20]
 8006db8:	6125      	str	r5, [r4, #16]
 8006dba:	4620      	mov	r0, r4
 8006dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006dc0 <__hi0bits>:
 8006dc0:	0c02      	lsrs	r2, r0, #16
 8006dc2:	0412      	lsls	r2, r2, #16
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	b9b2      	cbnz	r2, 8006df6 <__hi0bits+0x36>
 8006dc8:	0403      	lsls	r3, r0, #16
 8006dca:	2010      	movs	r0, #16
 8006dcc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006dd0:	bf04      	itt	eq
 8006dd2:	021b      	lsleq	r3, r3, #8
 8006dd4:	3008      	addeq	r0, #8
 8006dd6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006dda:	bf04      	itt	eq
 8006ddc:	011b      	lsleq	r3, r3, #4
 8006dde:	3004      	addeq	r0, #4
 8006de0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006de4:	bf04      	itt	eq
 8006de6:	009b      	lsleq	r3, r3, #2
 8006de8:	3002      	addeq	r0, #2
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	db06      	blt.n	8006dfc <__hi0bits+0x3c>
 8006dee:	005b      	lsls	r3, r3, #1
 8006df0:	d503      	bpl.n	8006dfa <__hi0bits+0x3a>
 8006df2:	3001      	adds	r0, #1
 8006df4:	4770      	bx	lr
 8006df6:	2000      	movs	r0, #0
 8006df8:	e7e8      	b.n	8006dcc <__hi0bits+0xc>
 8006dfa:	2020      	movs	r0, #32
 8006dfc:	4770      	bx	lr

08006dfe <__lo0bits>:
 8006dfe:	6803      	ldr	r3, [r0, #0]
 8006e00:	f013 0207 	ands.w	r2, r3, #7
 8006e04:	4601      	mov	r1, r0
 8006e06:	d00b      	beq.n	8006e20 <__lo0bits+0x22>
 8006e08:	07da      	lsls	r2, r3, #31
 8006e0a:	d423      	bmi.n	8006e54 <__lo0bits+0x56>
 8006e0c:	0798      	lsls	r0, r3, #30
 8006e0e:	bf49      	itett	mi
 8006e10:	085b      	lsrmi	r3, r3, #1
 8006e12:	089b      	lsrpl	r3, r3, #2
 8006e14:	2001      	movmi	r0, #1
 8006e16:	600b      	strmi	r3, [r1, #0]
 8006e18:	bf5c      	itt	pl
 8006e1a:	600b      	strpl	r3, [r1, #0]
 8006e1c:	2002      	movpl	r0, #2
 8006e1e:	4770      	bx	lr
 8006e20:	b298      	uxth	r0, r3
 8006e22:	b9a8      	cbnz	r0, 8006e50 <__lo0bits+0x52>
 8006e24:	0c1b      	lsrs	r3, r3, #16
 8006e26:	2010      	movs	r0, #16
 8006e28:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006e2c:	bf04      	itt	eq
 8006e2e:	0a1b      	lsreq	r3, r3, #8
 8006e30:	3008      	addeq	r0, #8
 8006e32:	071a      	lsls	r2, r3, #28
 8006e34:	bf04      	itt	eq
 8006e36:	091b      	lsreq	r3, r3, #4
 8006e38:	3004      	addeq	r0, #4
 8006e3a:	079a      	lsls	r2, r3, #30
 8006e3c:	bf04      	itt	eq
 8006e3e:	089b      	lsreq	r3, r3, #2
 8006e40:	3002      	addeq	r0, #2
 8006e42:	07da      	lsls	r2, r3, #31
 8006e44:	d402      	bmi.n	8006e4c <__lo0bits+0x4e>
 8006e46:	085b      	lsrs	r3, r3, #1
 8006e48:	d006      	beq.n	8006e58 <__lo0bits+0x5a>
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	600b      	str	r3, [r1, #0]
 8006e4e:	4770      	bx	lr
 8006e50:	4610      	mov	r0, r2
 8006e52:	e7e9      	b.n	8006e28 <__lo0bits+0x2a>
 8006e54:	2000      	movs	r0, #0
 8006e56:	4770      	bx	lr
 8006e58:	2020      	movs	r0, #32
 8006e5a:	4770      	bx	lr

08006e5c <__i2b>:
 8006e5c:	b510      	push	{r4, lr}
 8006e5e:	460c      	mov	r4, r1
 8006e60:	2101      	movs	r1, #1
 8006e62:	f7ff ff27 	bl	8006cb4 <_Balloc>
 8006e66:	2201      	movs	r2, #1
 8006e68:	6144      	str	r4, [r0, #20]
 8006e6a:	6102      	str	r2, [r0, #16]
 8006e6c:	bd10      	pop	{r4, pc}

08006e6e <__multiply>:
 8006e6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e72:	4614      	mov	r4, r2
 8006e74:	690a      	ldr	r2, [r1, #16]
 8006e76:	6923      	ldr	r3, [r4, #16]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	bfb8      	it	lt
 8006e7c:	460b      	movlt	r3, r1
 8006e7e:	4688      	mov	r8, r1
 8006e80:	bfbc      	itt	lt
 8006e82:	46a0      	movlt	r8, r4
 8006e84:	461c      	movlt	r4, r3
 8006e86:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006e8a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006e8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e92:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006e96:	eb07 0609 	add.w	r6, r7, r9
 8006e9a:	42b3      	cmp	r3, r6
 8006e9c:	bfb8      	it	lt
 8006e9e:	3101      	addlt	r1, #1
 8006ea0:	f7ff ff08 	bl	8006cb4 <_Balloc>
 8006ea4:	f100 0514 	add.w	r5, r0, #20
 8006ea8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006eac:	462b      	mov	r3, r5
 8006eae:	2200      	movs	r2, #0
 8006eb0:	4573      	cmp	r3, lr
 8006eb2:	d316      	bcc.n	8006ee2 <__multiply+0x74>
 8006eb4:	f104 0214 	add.w	r2, r4, #20
 8006eb8:	f108 0114 	add.w	r1, r8, #20
 8006ebc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006ec0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	9b00      	ldr	r3, [sp, #0]
 8006ec8:	9201      	str	r2, [sp, #4]
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d80c      	bhi.n	8006ee8 <__multiply+0x7a>
 8006ece:	2e00      	cmp	r6, #0
 8006ed0:	dd03      	ble.n	8006eda <__multiply+0x6c>
 8006ed2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d05d      	beq.n	8006f96 <__multiply+0x128>
 8006eda:	6106      	str	r6, [r0, #16]
 8006edc:	b003      	add	sp, #12
 8006ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ee2:	f843 2b04 	str.w	r2, [r3], #4
 8006ee6:	e7e3      	b.n	8006eb0 <__multiply+0x42>
 8006ee8:	f8b2 b000 	ldrh.w	fp, [r2]
 8006eec:	f1bb 0f00 	cmp.w	fp, #0
 8006ef0:	d023      	beq.n	8006f3a <__multiply+0xcc>
 8006ef2:	4689      	mov	r9, r1
 8006ef4:	46ac      	mov	ip, r5
 8006ef6:	f04f 0800 	mov.w	r8, #0
 8006efa:	f859 4b04 	ldr.w	r4, [r9], #4
 8006efe:	f8dc a000 	ldr.w	sl, [ip]
 8006f02:	b2a3      	uxth	r3, r4
 8006f04:	fa1f fa8a 	uxth.w	sl, sl
 8006f08:	fb0b a303 	mla	r3, fp, r3, sl
 8006f0c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006f10:	f8dc 4000 	ldr.w	r4, [ip]
 8006f14:	4443      	add	r3, r8
 8006f16:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006f1a:	fb0b 840a 	mla	r4, fp, sl, r8
 8006f1e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006f22:	46e2      	mov	sl, ip
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006f2a:	454f      	cmp	r7, r9
 8006f2c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006f30:	f84a 3b04 	str.w	r3, [sl], #4
 8006f34:	d82b      	bhi.n	8006f8e <__multiply+0x120>
 8006f36:	f8cc 8004 	str.w	r8, [ip, #4]
 8006f3a:	9b01      	ldr	r3, [sp, #4]
 8006f3c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006f40:	3204      	adds	r2, #4
 8006f42:	f1ba 0f00 	cmp.w	sl, #0
 8006f46:	d020      	beq.n	8006f8a <__multiply+0x11c>
 8006f48:	682b      	ldr	r3, [r5, #0]
 8006f4a:	4689      	mov	r9, r1
 8006f4c:	46a8      	mov	r8, r5
 8006f4e:	f04f 0b00 	mov.w	fp, #0
 8006f52:	f8b9 c000 	ldrh.w	ip, [r9]
 8006f56:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006f5a:	fb0a 440c 	mla	r4, sl, ip, r4
 8006f5e:	445c      	add	r4, fp
 8006f60:	46c4      	mov	ip, r8
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006f68:	f84c 3b04 	str.w	r3, [ip], #4
 8006f6c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f70:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006f74:	0c1b      	lsrs	r3, r3, #16
 8006f76:	fb0a b303 	mla	r3, sl, r3, fp
 8006f7a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006f7e:	454f      	cmp	r7, r9
 8006f80:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006f84:	d805      	bhi.n	8006f92 <__multiply+0x124>
 8006f86:	f8c8 3004 	str.w	r3, [r8, #4]
 8006f8a:	3504      	adds	r5, #4
 8006f8c:	e79b      	b.n	8006ec6 <__multiply+0x58>
 8006f8e:	46d4      	mov	ip, sl
 8006f90:	e7b3      	b.n	8006efa <__multiply+0x8c>
 8006f92:	46e0      	mov	r8, ip
 8006f94:	e7dd      	b.n	8006f52 <__multiply+0xe4>
 8006f96:	3e01      	subs	r6, #1
 8006f98:	e799      	b.n	8006ece <__multiply+0x60>
	...

08006f9c <__pow5mult>:
 8006f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fa0:	4615      	mov	r5, r2
 8006fa2:	f012 0203 	ands.w	r2, r2, #3
 8006fa6:	4606      	mov	r6, r0
 8006fa8:	460f      	mov	r7, r1
 8006faa:	d007      	beq.n	8006fbc <__pow5mult+0x20>
 8006fac:	3a01      	subs	r2, #1
 8006fae:	4c21      	ldr	r4, [pc, #132]	; (8007034 <__pow5mult+0x98>)
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006fb6:	f7ff fec8 	bl	8006d4a <__multadd>
 8006fba:	4607      	mov	r7, r0
 8006fbc:	10ad      	asrs	r5, r5, #2
 8006fbe:	d035      	beq.n	800702c <__pow5mult+0x90>
 8006fc0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006fc2:	b93c      	cbnz	r4, 8006fd4 <__pow5mult+0x38>
 8006fc4:	2010      	movs	r0, #16
 8006fc6:	f7ff fe6d 	bl	8006ca4 <malloc>
 8006fca:	6270      	str	r0, [r6, #36]	; 0x24
 8006fcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006fd0:	6004      	str	r4, [r0, #0]
 8006fd2:	60c4      	str	r4, [r0, #12]
 8006fd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006fd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006fdc:	b94c      	cbnz	r4, 8006ff2 <__pow5mult+0x56>
 8006fde:	f240 2171 	movw	r1, #625	; 0x271
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	f7ff ff3a 	bl	8006e5c <__i2b>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	f8c8 0008 	str.w	r0, [r8, #8]
 8006fee:	4604      	mov	r4, r0
 8006ff0:	6003      	str	r3, [r0, #0]
 8006ff2:	f04f 0800 	mov.w	r8, #0
 8006ff6:	07eb      	lsls	r3, r5, #31
 8006ff8:	d50a      	bpl.n	8007010 <__pow5mult+0x74>
 8006ffa:	4639      	mov	r1, r7
 8006ffc:	4622      	mov	r2, r4
 8006ffe:	4630      	mov	r0, r6
 8007000:	f7ff ff35 	bl	8006e6e <__multiply>
 8007004:	4639      	mov	r1, r7
 8007006:	4681      	mov	r9, r0
 8007008:	4630      	mov	r0, r6
 800700a:	f7ff fe87 	bl	8006d1c <_Bfree>
 800700e:	464f      	mov	r7, r9
 8007010:	106d      	asrs	r5, r5, #1
 8007012:	d00b      	beq.n	800702c <__pow5mult+0x90>
 8007014:	6820      	ldr	r0, [r4, #0]
 8007016:	b938      	cbnz	r0, 8007028 <__pow5mult+0x8c>
 8007018:	4622      	mov	r2, r4
 800701a:	4621      	mov	r1, r4
 800701c:	4630      	mov	r0, r6
 800701e:	f7ff ff26 	bl	8006e6e <__multiply>
 8007022:	6020      	str	r0, [r4, #0]
 8007024:	f8c0 8000 	str.w	r8, [r0]
 8007028:	4604      	mov	r4, r0
 800702a:	e7e4      	b.n	8006ff6 <__pow5mult+0x5a>
 800702c:	4638      	mov	r0, r7
 800702e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007032:	bf00      	nop
 8007034:	08007518 	.word	0x08007518

08007038 <__lshift>:
 8007038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800703c:	460c      	mov	r4, r1
 800703e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007042:	6923      	ldr	r3, [r4, #16]
 8007044:	6849      	ldr	r1, [r1, #4]
 8007046:	eb0a 0903 	add.w	r9, sl, r3
 800704a:	68a3      	ldr	r3, [r4, #8]
 800704c:	4607      	mov	r7, r0
 800704e:	4616      	mov	r6, r2
 8007050:	f109 0501 	add.w	r5, r9, #1
 8007054:	42ab      	cmp	r3, r5
 8007056:	db32      	blt.n	80070be <__lshift+0x86>
 8007058:	4638      	mov	r0, r7
 800705a:	f7ff fe2b 	bl	8006cb4 <_Balloc>
 800705e:	2300      	movs	r3, #0
 8007060:	4680      	mov	r8, r0
 8007062:	f100 0114 	add.w	r1, r0, #20
 8007066:	461a      	mov	r2, r3
 8007068:	4553      	cmp	r3, sl
 800706a:	db2b      	blt.n	80070c4 <__lshift+0x8c>
 800706c:	6920      	ldr	r0, [r4, #16]
 800706e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007072:	f104 0314 	add.w	r3, r4, #20
 8007076:	f016 021f 	ands.w	r2, r6, #31
 800707a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800707e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007082:	d025      	beq.n	80070d0 <__lshift+0x98>
 8007084:	f1c2 0e20 	rsb	lr, r2, #32
 8007088:	2000      	movs	r0, #0
 800708a:	681e      	ldr	r6, [r3, #0]
 800708c:	468a      	mov	sl, r1
 800708e:	4096      	lsls	r6, r2
 8007090:	4330      	orrs	r0, r6
 8007092:	f84a 0b04 	str.w	r0, [sl], #4
 8007096:	f853 0b04 	ldr.w	r0, [r3], #4
 800709a:	459c      	cmp	ip, r3
 800709c:	fa20 f00e 	lsr.w	r0, r0, lr
 80070a0:	d814      	bhi.n	80070cc <__lshift+0x94>
 80070a2:	6048      	str	r0, [r1, #4]
 80070a4:	b108      	cbz	r0, 80070aa <__lshift+0x72>
 80070a6:	f109 0502 	add.w	r5, r9, #2
 80070aa:	3d01      	subs	r5, #1
 80070ac:	4638      	mov	r0, r7
 80070ae:	f8c8 5010 	str.w	r5, [r8, #16]
 80070b2:	4621      	mov	r1, r4
 80070b4:	f7ff fe32 	bl	8006d1c <_Bfree>
 80070b8:	4640      	mov	r0, r8
 80070ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070be:	3101      	adds	r1, #1
 80070c0:	005b      	lsls	r3, r3, #1
 80070c2:	e7c7      	b.n	8007054 <__lshift+0x1c>
 80070c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80070c8:	3301      	adds	r3, #1
 80070ca:	e7cd      	b.n	8007068 <__lshift+0x30>
 80070cc:	4651      	mov	r1, sl
 80070ce:	e7dc      	b.n	800708a <__lshift+0x52>
 80070d0:	3904      	subs	r1, #4
 80070d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80070d6:	f841 2f04 	str.w	r2, [r1, #4]!
 80070da:	459c      	cmp	ip, r3
 80070dc:	d8f9      	bhi.n	80070d2 <__lshift+0x9a>
 80070de:	e7e4      	b.n	80070aa <__lshift+0x72>

080070e0 <__mcmp>:
 80070e0:	6903      	ldr	r3, [r0, #16]
 80070e2:	690a      	ldr	r2, [r1, #16]
 80070e4:	1a9b      	subs	r3, r3, r2
 80070e6:	b530      	push	{r4, r5, lr}
 80070e8:	d10c      	bne.n	8007104 <__mcmp+0x24>
 80070ea:	0092      	lsls	r2, r2, #2
 80070ec:	3014      	adds	r0, #20
 80070ee:	3114      	adds	r1, #20
 80070f0:	1884      	adds	r4, r0, r2
 80070f2:	4411      	add	r1, r2
 80070f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80070f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80070fc:	4295      	cmp	r5, r2
 80070fe:	d003      	beq.n	8007108 <__mcmp+0x28>
 8007100:	d305      	bcc.n	800710e <__mcmp+0x2e>
 8007102:	2301      	movs	r3, #1
 8007104:	4618      	mov	r0, r3
 8007106:	bd30      	pop	{r4, r5, pc}
 8007108:	42a0      	cmp	r0, r4
 800710a:	d3f3      	bcc.n	80070f4 <__mcmp+0x14>
 800710c:	e7fa      	b.n	8007104 <__mcmp+0x24>
 800710e:	f04f 33ff 	mov.w	r3, #4294967295
 8007112:	e7f7      	b.n	8007104 <__mcmp+0x24>

08007114 <__mdiff>:
 8007114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007118:	460d      	mov	r5, r1
 800711a:	4607      	mov	r7, r0
 800711c:	4611      	mov	r1, r2
 800711e:	4628      	mov	r0, r5
 8007120:	4614      	mov	r4, r2
 8007122:	f7ff ffdd 	bl	80070e0 <__mcmp>
 8007126:	1e06      	subs	r6, r0, #0
 8007128:	d108      	bne.n	800713c <__mdiff+0x28>
 800712a:	4631      	mov	r1, r6
 800712c:	4638      	mov	r0, r7
 800712e:	f7ff fdc1 	bl	8006cb4 <_Balloc>
 8007132:	2301      	movs	r3, #1
 8007134:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800713c:	bfa4      	itt	ge
 800713e:	4623      	movge	r3, r4
 8007140:	462c      	movge	r4, r5
 8007142:	4638      	mov	r0, r7
 8007144:	6861      	ldr	r1, [r4, #4]
 8007146:	bfa6      	itte	ge
 8007148:	461d      	movge	r5, r3
 800714a:	2600      	movge	r6, #0
 800714c:	2601      	movlt	r6, #1
 800714e:	f7ff fdb1 	bl	8006cb4 <_Balloc>
 8007152:	692b      	ldr	r3, [r5, #16]
 8007154:	60c6      	str	r6, [r0, #12]
 8007156:	6926      	ldr	r6, [r4, #16]
 8007158:	f105 0914 	add.w	r9, r5, #20
 800715c:	f104 0214 	add.w	r2, r4, #20
 8007160:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007164:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007168:	f100 0514 	add.w	r5, r0, #20
 800716c:	f04f 0e00 	mov.w	lr, #0
 8007170:	f852 ab04 	ldr.w	sl, [r2], #4
 8007174:	f859 4b04 	ldr.w	r4, [r9], #4
 8007178:	fa1e f18a 	uxtah	r1, lr, sl
 800717c:	b2a3      	uxth	r3, r4
 800717e:	1ac9      	subs	r1, r1, r3
 8007180:	0c23      	lsrs	r3, r4, #16
 8007182:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007186:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800718a:	b289      	uxth	r1, r1
 800718c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007190:	45c8      	cmp	r8, r9
 8007192:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007196:	4694      	mov	ip, r2
 8007198:	f845 3b04 	str.w	r3, [r5], #4
 800719c:	d8e8      	bhi.n	8007170 <__mdiff+0x5c>
 800719e:	45bc      	cmp	ip, r7
 80071a0:	d304      	bcc.n	80071ac <__mdiff+0x98>
 80071a2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80071a6:	b183      	cbz	r3, 80071ca <__mdiff+0xb6>
 80071a8:	6106      	str	r6, [r0, #16]
 80071aa:	e7c5      	b.n	8007138 <__mdiff+0x24>
 80071ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 80071b0:	fa1e f381 	uxtah	r3, lr, r1
 80071b4:	141a      	asrs	r2, r3, #16
 80071b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071c0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80071c4:	f845 3b04 	str.w	r3, [r5], #4
 80071c8:	e7e9      	b.n	800719e <__mdiff+0x8a>
 80071ca:	3e01      	subs	r6, #1
 80071cc:	e7e9      	b.n	80071a2 <__mdiff+0x8e>

080071ce <__d2b>:
 80071ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80071d2:	460e      	mov	r6, r1
 80071d4:	2101      	movs	r1, #1
 80071d6:	ec59 8b10 	vmov	r8, r9, d0
 80071da:	4615      	mov	r5, r2
 80071dc:	f7ff fd6a 	bl	8006cb4 <_Balloc>
 80071e0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80071e4:	4607      	mov	r7, r0
 80071e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071ea:	bb34      	cbnz	r4, 800723a <__d2b+0x6c>
 80071ec:	9301      	str	r3, [sp, #4]
 80071ee:	f1b8 0300 	subs.w	r3, r8, #0
 80071f2:	d027      	beq.n	8007244 <__d2b+0x76>
 80071f4:	a802      	add	r0, sp, #8
 80071f6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80071fa:	f7ff fe00 	bl	8006dfe <__lo0bits>
 80071fe:	9900      	ldr	r1, [sp, #0]
 8007200:	b1f0      	cbz	r0, 8007240 <__d2b+0x72>
 8007202:	9a01      	ldr	r2, [sp, #4]
 8007204:	f1c0 0320 	rsb	r3, r0, #32
 8007208:	fa02 f303 	lsl.w	r3, r2, r3
 800720c:	430b      	orrs	r3, r1
 800720e:	40c2      	lsrs	r2, r0
 8007210:	617b      	str	r3, [r7, #20]
 8007212:	9201      	str	r2, [sp, #4]
 8007214:	9b01      	ldr	r3, [sp, #4]
 8007216:	61bb      	str	r3, [r7, #24]
 8007218:	2b00      	cmp	r3, #0
 800721a:	bf14      	ite	ne
 800721c:	2102      	movne	r1, #2
 800721e:	2101      	moveq	r1, #1
 8007220:	6139      	str	r1, [r7, #16]
 8007222:	b1c4      	cbz	r4, 8007256 <__d2b+0x88>
 8007224:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007228:	4404      	add	r4, r0
 800722a:	6034      	str	r4, [r6, #0]
 800722c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007230:	6028      	str	r0, [r5, #0]
 8007232:	4638      	mov	r0, r7
 8007234:	b003      	add	sp, #12
 8007236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800723a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800723e:	e7d5      	b.n	80071ec <__d2b+0x1e>
 8007240:	6179      	str	r1, [r7, #20]
 8007242:	e7e7      	b.n	8007214 <__d2b+0x46>
 8007244:	a801      	add	r0, sp, #4
 8007246:	f7ff fdda 	bl	8006dfe <__lo0bits>
 800724a:	9b01      	ldr	r3, [sp, #4]
 800724c:	617b      	str	r3, [r7, #20]
 800724e:	2101      	movs	r1, #1
 8007250:	6139      	str	r1, [r7, #16]
 8007252:	3020      	adds	r0, #32
 8007254:	e7e5      	b.n	8007222 <__d2b+0x54>
 8007256:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800725a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800725e:	6030      	str	r0, [r6, #0]
 8007260:	6918      	ldr	r0, [r3, #16]
 8007262:	f7ff fdad 	bl	8006dc0 <__hi0bits>
 8007266:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800726a:	e7e1      	b.n	8007230 <__d2b+0x62>

0800726c <_calloc_r>:
 800726c:	b538      	push	{r3, r4, r5, lr}
 800726e:	fb02 f401 	mul.w	r4, r2, r1
 8007272:	4621      	mov	r1, r4
 8007274:	f000 f808 	bl	8007288 <_malloc_r>
 8007278:	4605      	mov	r5, r0
 800727a:	b118      	cbz	r0, 8007284 <_calloc_r+0x18>
 800727c:	4622      	mov	r2, r4
 800727e:	2100      	movs	r1, #0
 8007280:	f7fe fb6b 	bl	800595a <memset>
 8007284:	4628      	mov	r0, r5
 8007286:	bd38      	pop	{r3, r4, r5, pc}

08007288 <_malloc_r>:
 8007288:	b570      	push	{r4, r5, r6, lr}
 800728a:	1ccd      	adds	r5, r1, #3
 800728c:	f025 0503 	bic.w	r5, r5, #3
 8007290:	3508      	adds	r5, #8
 8007292:	2d0c      	cmp	r5, #12
 8007294:	bf38      	it	cc
 8007296:	250c      	movcc	r5, #12
 8007298:	2d00      	cmp	r5, #0
 800729a:	4606      	mov	r6, r0
 800729c:	db01      	blt.n	80072a2 <_malloc_r+0x1a>
 800729e:	42a9      	cmp	r1, r5
 80072a0:	d903      	bls.n	80072aa <_malloc_r+0x22>
 80072a2:	230c      	movs	r3, #12
 80072a4:	6033      	str	r3, [r6, #0]
 80072a6:	2000      	movs	r0, #0
 80072a8:	bd70      	pop	{r4, r5, r6, pc}
 80072aa:	f000 f869 	bl	8007380 <__malloc_lock>
 80072ae:	4a21      	ldr	r2, [pc, #132]	; (8007334 <_malloc_r+0xac>)
 80072b0:	6814      	ldr	r4, [r2, #0]
 80072b2:	4621      	mov	r1, r4
 80072b4:	b991      	cbnz	r1, 80072dc <_malloc_r+0x54>
 80072b6:	4c20      	ldr	r4, [pc, #128]	; (8007338 <_malloc_r+0xb0>)
 80072b8:	6823      	ldr	r3, [r4, #0]
 80072ba:	b91b      	cbnz	r3, 80072c4 <_malloc_r+0x3c>
 80072bc:	4630      	mov	r0, r6
 80072be:	f000 f83d 	bl	800733c <_sbrk_r>
 80072c2:	6020      	str	r0, [r4, #0]
 80072c4:	4629      	mov	r1, r5
 80072c6:	4630      	mov	r0, r6
 80072c8:	f000 f838 	bl	800733c <_sbrk_r>
 80072cc:	1c43      	adds	r3, r0, #1
 80072ce:	d124      	bne.n	800731a <_malloc_r+0x92>
 80072d0:	230c      	movs	r3, #12
 80072d2:	6033      	str	r3, [r6, #0]
 80072d4:	4630      	mov	r0, r6
 80072d6:	f000 f854 	bl	8007382 <__malloc_unlock>
 80072da:	e7e4      	b.n	80072a6 <_malloc_r+0x1e>
 80072dc:	680b      	ldr	r3, [r1, #0]
 80072de:	1b5b      	subs	r3, r3, r5
 80072e0:	d418      	bmi.n	8007314 <_malloc_r+0x8c>
 80072e2:	2b0b      	cmp	r3, #11
 80072e4:	d90f      	bls.n	8007306 <_malloc_r+0x7e>
 80072e6:	600b      	str	r3, [r1, #0]
 80072e8:	50cd      	str	r5, [r1, r3]
 80072ea:	18cc      	adds	r4, r1, r3
 80072ec:	4630      	mov	r0, r6
 80072ee:	f000 f848 	bl	8007382 <__malloc_unlock>
 80072f2:	f104 000b 	add.w	r0, r4, #11
 80072f6:	1d23      	adds	r3, r4, #4
 80072f8:	f020 0007 	bic.w	r0, r0, #7
 80072fc:	1ac3      	subs	r3, r0, r3
 80072fe:	d0d3      	beq.n	80072a8 <_malloc_r+0x20>
 8007300:	425a      	negs	r2, r3
 8007302:	50e2      	str	r2, [r4, r3]
 8007304:	e7d0      	b.n	80072a8 <_malloc_r+0x20>
 8007306:	428c      	cmp	r4, r1
 8007308:	684b      	ldr	r3, [r1, #4]
 800730a:	bf16      	itet	ne
 800730c:	6063      	strne	r3, [r4, #4]
 800730e:	6013      	streq	r3, [r2, #0]
 8007310:	460c      	movne	r4, r1
 8007312:	e7eb      	b.n	80072ec <_malloc_r+0x64>
 8007314:	460c      	mov	r4, r1
 8007316:	6849      	ldr	r1, [r1, #4]
 8007318:	e7cc      	b.n	80072b4 <_malloc_r+0x2c>
 800731a:	1cc4      	adds	r4, r0, #3
 800731c:	f024 0403 	bic.w	r4, r4, #3
 8007320:	42a0      	cmp	r0, r4
 8007322:	d005      	beq.n	8007330 <_malloc_r+0xa8>
 8007324:	1a21      	subs	r1, r4, r0
 8007326:	4630      	mov	r0, r6
 8007328:	f000 f808 	bl	800733c <_sbrk_r>
 800732c:	3001      	adds	r0, #1
 800732e:	d0cf      	beq.n	80072d0 <_malloc_r+0x48>
 8007330:	6025      	str	r5, [r4, #0]
 8007332:	e7db      	b.n	80072ec <_malloc_r+0x64>
 8007334:	200041a4 	.word	0x200041a4
 8007338:	200041a8 	.word	0x200041a8

0800733c <_sbrk_r>:
 800733c:	b538      	push	{r3, r4, r5, lr}
 800733e:	4c06      	ldr	r4, [pc, #24]	; (8007358 <_sbrk_r+0x1c>)
 8007340:	2300      	movs	r3, #0
 8007342:	4605      	mov	r5, r0
 8007344:	4608      	mov	r0, r1
 8007346:	6023      	str	r3, [r4, #0]
 8007348:	f7fa f974 	bl	8001634 <_sbrk>
 800734c:	1c43      	adds	r3, r0, #1
 800734e:	d102      	bne.n	8007356 <_sbrk_r+0x1a>
 8007350:	6823      	ldr	r3, [r4, #0]
 8007352:	b103      	cbz	r3, 8007356 <_sbrk_r+0x1a>
 8007354:	602b      	str	r3, [r5, #0]
 8007356:	bd38      	pop	{r3, r4, r5, pc}
 8007358:	20004334 	.word	0x20004334

0800735c <__ascii_mbtowc>:
 800735c:	b082      	sub	sp, #8
 800735e:	b901      	cbnz	r1, 8007362 <__ascii_mbtowc+0x6>
 8007360:	a901      	add	r1, sp, #4
 8007362:	b142      	cbz	r2, 8007376 <__ascii_mbtowc+0x1a>
 8007364:	b14b      	cbz	r3, 800737a <__ascii_mbtowc+0x1e>
 8007366:	7813      	ldrb	r3, [r2, #0]
 8007368:	600b      	str	r3, [r1, #0]
 800736a:	7812      	ldrb	r2, [r2, #0]
 800736c:	1c10      	adds	r0, r2, #0
 800736e:	bf18      	it	ne
 8007370:	2001      	movne	r0, #1
 8007372:	b002      	add	sp, #8
 8007374:	4770      	bx	lr
 8007376:	4610      	mov	r0, r2
 8007378:	e7fb      	b.n	8007372 <__ascii_mbtowc+0x16>
 800737a:	f06f 0001 	mvn.w	r0, #1
 800737e:	e7f8      	b.n	8007372 <__ascii_mbtowc+0x16>

08007380 <__malloc_lock>:
 8007380:	4770      	bx	lr

08007382 <__malloc_unlock>:
 8007382:	4770      	bx	lr

08007384 <__ascii_wctomb>:
 8007384:	b149      	cbz	r1, 800739a <__ascii_wctomb+0x16>
 8007386:	2aff      	cmp	r2, #255	; 0xff
 8007388:	bf85      	ittet	hi
 800738a:	238a      	movhi	r3, #138	; 0x8a
 800738c:	6003      	strhi	r3, [r0, #0]
 800738e:	700a      	strbls	r2, [r1, #0]
 8007390:	f04f 30ff 	movhi.w	r0, #4294967295
 8007394:	bf98      	it	ls
 8007396:	2001      	movls	r0, #1
 8007398:	4770      	bx	lr
 800739a:	4608      	mov	r0, r1
 800739c:	4770      	bx	lr
	...

080073a0 <_init>:
 80073a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a2:	bf00      	nop
 80073a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073a6:	bc08      	pop	{r3}
 80073a8:	469e      	mov	lr, r3
 80073aa:	4770      	bx	lr

080073ac <_fini>:
 80073ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ae:	bf00      	nop
 80073b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073b2:	bc08      	pop	{r3}
 80073b4:	469e      	mov	lr, r3
 80073b6:	4770      	bx	lr
